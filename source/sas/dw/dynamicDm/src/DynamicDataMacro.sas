/**
Author: Pradeep Kumar Sharma
Company : CSRA
Year : 2018
NBS Version: 5.4
Description: This is the Utility sas macro class to create the dynamic datamart for page builder pages.
This process not only create dynamic datamarts, but also drop orphan datamarts 

*/

%MACRO ASSIGN_KEY (DS, KEY);
 DATA &DS;
  IF &KEY=1 THEN OUTPUT;
  SET &DS;  
	&KEY+1;
	OUTPUT;     
 RUN; 
 PROC SORT DATA=&DS NODUPKEY; BY &KEY;RUN;
%MEND ASSIGN_KEY;

%macro dbload (DBtable, DSname);
 Proc Append Force base=nbs_rdb.&DBtable data=&DSname;
 Run;
 Quit;
%mend dbload;

/*It creates the rdb_table_nm table in different ways depending of if the rdb_table_nm exists or not*/
%macro CONDITIONALCHECKER; 
PROC SQL;
%IF %SYSFUNC(EXIST(NBS_RDB. &RDB_TABLE_NM)) %THEN %DO;
	CREATE TABLE &RDB_TABLE_NM AS 
	SELECT  &D_INV_CASE_UNIT  &D_INV_CASE_OTH &D_INV_CASE , SUMM_DATAMART.INVESTIGATION_KEY FROM NBS_RDB.SUMM_DATAMART
	INNER JOIN  NBS_RDB .&FACT_CASE ON
	SUMM_DATAMART.INVESTIGATION_KEY  =&FACT_CASE .INVESTIGATION_KEY
	INNER JOIN  NBS_RDB. &RDB_TABLE_NM ON
	&FACT_CASE .&DIM_KEY  =&RDB_TABLE_NM .&DIM_KEY
	WHERE SUMM_DATAMART.DISEASE_GRP_CD = (SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME);
   %END;

%ELSE %DO;     
	CREATE TABLE &RDB_TABLE_NM AS 
	SELECT  &D_INV_CASE_UNIT  &D_INV_CASE_OTH &D_INV_CASE , SUMM_DATAMART.INVESTIGATION_KEY FROM NBS_RDB.SUMM_DATAMART;
    %END;
;QUIT;
%mend CONDITIONALCHECKER;

%MACRO INVEST_FORM_CLEAN_PROC( DATABASE_NAME);
PROC SQL;
DROP TABLE NBS_RDB.&DATABASE_NAME;
QUIT;
%MEND INVEST_FORM_CLEAN_PROC;

%MACRO INVEST_FORM_PROC();
PROC SQL;
  DROP TABLE NBS_RDB.SUMM_DATAMART;
QUIT;
PROC SQL;
/*Creates a summ_datamart with patient key, investigation key and disease group code*/
  CREATE TABLE NBS_RDB.SUMM_DATAMART AS SELECT PATIENT_KEY AS PATIENT_KEY, INVESTIGATION_KEY, DISEASE_GRP_CD
     FROM NBS_RDB.INV_SUMM_DATAMART
       INNER JOIN NBS_RDB.CONDITION ON 
	    INV_SUMM_DATAMART.DISEASE_CD = CONDITION.CONDITION_CD
     WHERE CONDITION.DISEASE_GRP_CD = (SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME);

QUIT;


/*Investigation data*/
/*-------INVESTIGATION----------*/
PROC SQL;
/*creates a table with all the metadata related to the investigation*/
CREATE TABLE INV_METADATA AS
SELECT  DISTINCT INIT.FORM_CD, INIT.DATAMART_NM, NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM FROM NBS_RDB.INIT INNER JOIN NBS_ODS.NBS_UI_METADATA
ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
INNER JOIN NBS_ODS.NBS_RDB_METADATA
ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
WHERE RDB_TABLE_NM='INVESTIGATION' 
AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
ORDER BY INIT.FORM_CD,  NBS_RDB_METADATA.RDB_COLUMN_NM;

QUIT;
/*Make a list of rdb_column_nm separated by ,*/
%ASSIGN_KEY (INV_METADATA, SORT_KEY);
DATA INVLISTING;
  SET INV_METADATA;
	BY SORT_KEY;

	LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT; 
	RETAIN RDB_COLUMN_NAME_LIST;
	IF FIRST.SORT_KEY THEN
		USER_DEFINED_COLUMN_NAME = TRIM(RDB_COLUMN_NM) || ' AS ' ||TRIM(USER_DEFINED_COLUMN_NM)|| "'"||TRIM(USER_DEFINED_COLUMN_NM)||"'";
		RDB_COLUMN_NAME_LIST = (USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST);  
	OUTPUT;
RUN;
PROC SQL; 
DELETE FROM INVLISTING WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM INVLISTING);
QUIT;
DATA INVLISTING;
SET INVLISTING;
/*It seems it is getting rid off the last character*/
	 CALL SYMPUTX('INV_SEL2', '');
	LENGTH=LENGTHN(RDB_COLUMN_NAME_LIST);
	TRIMMED_VALUE=SUBSTR(RDB_COLUMN_NAME_LIST, 1, LENGTH-1);
	 CALL SYMPUTX('INV_SEL2', TRIMMED_VALUE);
RUN;

PROC SQL;
/*It creates a new table with a list of all the rdb column name plus the investigation key*/
	CREATE TABLE INVESTIGATION_DATA AS 
	SELECT  &INV_SEL2, SUMM_DATAMART.INVESTIGATION_KEY FROM NBS_RDB.INVESTIGATION
	INNER JOIN NBS_RDB.SUMM_DATAMART ON
	SUMM_DATAMART.INVESTIGATION_KEY  =INVESTIGATION.INVESTIGATION_KEY
WHERE SUMM_DATAMART.DISEASE_GRP_CD = (SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME);
QUIT;


/*-------INVESTIGATION ENDS----------*/
/*CMData  data*/

PROC SQL;
/*it creates a new table with all the metadata associated to that investigation for the specific datamart name*/
	CREATE TABLE CASE_MANAGEMENT_METADATA AS
	SELECT  DISTINCT INIT.FORM_CD, INIT.DATAMART_NM, NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM  FROM NBS_RDB.INIT INNER JOIN NBS_ODS.NBS_UI_METADATA
	ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
	INNER JOIN NBS_ODS.NBS_RDB_METADATA
	ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
	WHERE RDB_TABLE_NM='D_CASE_MANAGEMENT' 
	AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
	AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
	ORDER BY INIT.FORM_CD,  NBS_RDB_METADATA.RDB_COLUMN_NM;

	INSERT INTO CASE_MANAGEMENT_METADATA set FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME),
	RDB_TABLE_NM='D_CASE_MANAGEMENT';
QUIT;
/*New table with some columns of the investigation summary datamart*/

PROC SQL;
CREATE TABLE INV_SUMM_DATAMART AS
SELECT INV_SUMM_DATAMART.PROGRAM_JURISDICTION_OID,
	INV_SUMM_DATAMART.INVESTIGATION_KEY,
	INV_SUMM_DATAMART.PATIENT_KEY,
	INV_SUMM_DATAMART.PATIENT_LOCAL_ID,
	INV_SUMM_DATAMART.INVESTIGATION_CREATE_DATE,
	INV_SUMM_DATAMART.INVESTIGATION_CREATED_BY,
	INV_SUMM_DATAMART.INVESTIGATION_LAST_UPDTD_DATE,
	INV_SUMM_DATAMART.INVESTIGATION_LAST_UPDTD_BY,
	INV_SUMM_DATAMART.EVENT_DATE,
	INV_SUMM_DATAMART.EVENT_DATE_TYPE,
	INV_SUMM_DATAMART.LABORATORY_INFORMATION,
	INV_SUMM_DATAMART.EARLIEST_SPECIMEN_COLLECT_DATE,
	INV_SUMM_DATAMART.NOTIFICATION_STATUS,
	INV_SUMM_DATAMART.CONFIRMATION_METHOD, 
	INV_SUMM_DATAMART.CONFIRMATION_DT, 
	INV_SUMM_DATAMART.DISEASE_CD,
	INV_SUMM_DATAMART.DISEASE,
	INV_SUMM_DATAMART.NOTIFICATION_LAST_UPDATED_DATE, 
	INV_SUMM_DATAMART.NOTIFICATION_LOCAL_ID,
	INV_SUMM_DATAMART.PROGRAM_AREA, 
	INV_SUMM_DATAMART.INVESTIGATION_LAST_UPDTD_BY,
	INV_SUMM_DATAMART.PATIENT_COUNTY_CODE,
	INV_SUMM_DATAMART.JURISDICTION_NM
	FROM NBS_RDB.INV_SUMM_DATAMART
	INNER JOIN INVESTIGATION_DATA ON
	INVESTIGATION_DATA.INVESTIGATION_KEY = INV_SUMM_DATAMART.INVESTIGATION_KEY;
QUIT;

/*Patient data*/
PROC SQL;
	CREATE TABLE PAT_METADATA AS 
	SELECT  DISTINCT INIT.FORM_CD, INIT.DATAMART_NM, NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM  FROM NBS_RDB.INIT INNER JOIN NBS_ODS.NBS_UI_METADATA
ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
INNER JOIN NBS_ODS.NBS_RDB_METADATA
ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
WHERE RDB_TABLE_NM='D_PATIENT' 
AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND RDB_COLUMN_NM NOT IN ('PATIENT_WORK_STREET_ADDRESS_1', 'PATIENT_WORK_STREET_ADDRESS_2')
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
ORDER BY INIT.FORM_CD,  NBS_RDB_METADATA.RDB_COLUMN_NM;

QUIT;

/*List of rdb_column name for patient data*/
%ASSIGN_KEY (PAT_METADATA, SORT_KEY);
DATA LISTING;
  SET PAT_METADATA;
	BY SORT_KEY;

	LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT; 
	RETAIN RDB_COLUMN_NAME_LIST;
	IF FIRST.SORT_KEY THEN
		USER_DEFINED_COLUMN_NAME = ' AS ' ||USER_DEFINED_COLUMN_NM|| "'"||USER_DEFINED_COLUMN_NM||"'";
		RDB_COLUMN_NAME_LIST = (TRIM(RDB_COLUMN_NM) || USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST);  

	OUTPUT;
RUN;
PROC SQL; 
DELETE FROM LISTING WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM LISTING);
QUIT;
DATA LISTING;
SET LISTING;
	 CALL SYMPUTX('PAT_SEL', '');
	LENGTH=LENGTHN(RDB_COLUMN_NAME_LIST);
	TRIMMED_VALUE=TRIM(SUBSTR(RDB_COLUMN_NAME_LIST, 1, LENGTH-1));
	 CALL SYMPUTX('PAT_SEL', TRIMMED_VALUE);
RUN;


PROC SQL;
	CREATE TABLE PATIENT_DATA AS 
	SELECT  &PAT_SEL,SUMM_DATAMART.INVESTIGATION_KEY  FROM NBS_RDB.D_PATIENT
INNER JOIN NBS_RDB.SUMM_DATAMART ON
	D_PATIENT.PATIENT_KEY = SUMM_DATAMART.PATIENT_KEY;
QUIT;


%mend INVEST_FORM_PROC; 
%MACRO CREATEDM(DATAMART_TABLE_NAME);

PROC SQL;
DROP TABLE  NBS_RDB.&DATAMART_TABLE_NAME;
QUIT;

PROC SQL;

CREATE TABLE DISCRETE_ALL AS SELECT * FROM INV_SUMM_DATAMART 
LEFT JOIN INVESTIGATION_DATA ON INVESTIGATION_DATA.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN PATIENT_DATA ON PATIENT_DATA.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN CASE_MANAGEMENT_DATA ON CASE_MANAGEMENT_DATA.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_ADMINISTRATIVE ON D_INV_ADMINISTRATIVE.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_CLINICAL ON D_INV_CLINICAL.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_COMPLICATION ON D_INV_COMPLICATION.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_CONTACT ON D_INV_CONTACT.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_DEATH ON D_INV_DEATH.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_EPIDEMIOLOGY ON D_INV_EPIDEMIOLOGY.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_HIV ON D_INV_HIV.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_PATIENT_OBS ON D_INV_PATIENT_OBS.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_ISOLATE_TRACKING ON D_INV_ISOLATE_TRACKING.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_LAB_FINDING ON D_INV_LAB_FINDING.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY

LEFT JOIN D_INV_MEDICAL_HISTORY ON D_INV_MEDICAL_HISTORY.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_MOTHER ON D_INV_MOTHER.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_OTHER ON D_INV_OTHER.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_PREGNANCY_BIRTH ON D_INV_PREGNANCY_BIRTH.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_RESIDENCY ON D_INV_RESIDENCY.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_RISK_FACTOR ON D_INV_RISK_FACTOR.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_SOCIAL_HISTORY ON D_INV_SOCIAL_HISTORY.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_SYMPTOM ON D_INV_SYMPTOM.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY


LEFT JOIN D_INV_TREATMENT ON D_INV_TREATMENT.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_TRAVEL ON D_INV_TRAVEL.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_UNDER_CONDITION ON D_INV_UNDER_CONDITION.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_VACCINATION ON D_INV_VACCINATION.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN D_INV_STD ON D_INV_STD.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN ORGANIZATION ON ORGANIZATION.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY
LEFT JOIN PROVIDER ON PROVIDER.INVESTIGATION_KEY =INV_SUMM_DATAMART.INVESTIGATION_KEY;
QUIT;

PROC SQL;
CREATE TABLE REPEAT_ALL AS SELECT * FROM 
INVESTIGATION_REPEAT_VARCHAR
LEFT JOIN REPEAT_BLOCK_VARCHAR_ALL ON REPEAT_BLOCK_VARCHAR_ALL.INVESTIGATION_KEY =INVESTIGATION_REPEAT_VARCHAR.INVESTIGATION_KEY
LEFT JOIN INVESTIGATION_REPEAT_NUMERIC ON INVESTIGATION_REPEAT_NUMERIC.INVESTIGATION_KEY =INVESTIGATION_REPEAT_VARCHAR.INVESTIGATION_KEY
LEFT JOIN INVESTIGATION_REPEAT_DATE ON INVESTIGATION_REPEAT_DATE.INVESTIGATION_KEY =INVESTIGATION_REPEAT_VARCHAR.INVESTIGATION_KEY
LEFT JOIN REPEAT_BLOCK_DATE_ALL ON REPEAT_BLOCK_DATE_ALL.INVESTIGATION_KEY =INVESTIGATION_REPEAT_VARCHAR.INVESTIGATION_KEY
LEFT JOIN REPEAT_BLOCK_NUMERIC_ALL ON REPEAT_BLOCK_NUMERIC_ALL.INVESTIGATION_KEY =INVESTIGATION_REPEAT_VARCHAR.INVESTIGATION_KEY;
QUIT;

PROC SQL;
CREATE TABLE &DATAMART_TABLE_NAME AS SELECT * FROM 
DISCRETE_ALL LEFT OUTER JOIN REPEAT_ALL ON 
DISCRETE_ALL.INVESTIGATION_KEY = REPEAT_ALL.INVESTIGATION_KEY;
QUIT;

%DBLOAD (&DATAMART_TABLE_NAME, &DATAMART_TABLE_NAME);

PROC SQL;
DROP TABLE DISCRETE_ALL;
QUIT;

PROC SQL;
DROP TABLE REPEAT_ALL;
QUIT;

PROC SQL;
DROP TABLE &DATAMART_TABLE_NAME;
QUIT;


%MEND CREATEDM;

%MACRO MANAGE_CASE_MANAGEMENT ();
%ASSIGN_KEY (CASE_MANAGEMENT_METADATA, SORT_KEY);
/*Creating the list in the rdb_column_name_list with all the user defined column name*/

DATA CMLISTING;
  SET CASE_MANAGEMENT_METADATA; 
	BY SORT_KEY;

	LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT; 
	RETAIN RDB_COLUMN_NAME_LIST;
	IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN 
	USER_DEFINED_COLUMN_NAME = COMPRESS(RDB_COLUMN_NM) || ' AS ' ||COMPRESS(USER_DEFINED_COLUMN_NM)|| " '"||COMPRESS(USER_DEFINED_COLUMN_NM)||"'";
	IF (LENGTHN(USER_DEFINED_COLUMN_NAME))>0 THEN  RDB_COLUMN_NAME_LIST = (USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST);  
	OUTPUT;
RUN;

PROC SQL; 
DELETE FROM CMLISTING WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM CMLISTING);
QUIT;

/*if there's nothing on the list, we get the investigation_key at the minimum, else, we get the list.*/
DATA CMLISTING;
SET CMLISTING;
		CALL SYMPUTX('CM_CASE', '');
	LENGTH=LENGTHN(COMPRESS(RDB_COLUMN_NAME_LIST));
	RDB_COLUMN_NAME_LIST = TRIM(RDB_COLUMN_NAME_LIST);
	IF (LENGTH>1)  THEN TRIMMED_VALUE=SUBSTR((RDB_COLUMN_NAME_LIST), 1, LENGTHN(RDB_COLUMN_NAME_LIST)-1);
	IF (LENGTH<2) THEN TRIMMED_VALUE= 'D_CASE_MANAGEMENT.INVESTIGATION_KEY AS INVESTIGATION_KEY';
	CALL SYMPUTX('CM_CASE', TRIMMED_VALUE);

RUN;


/*it creates the case_management_data table with the rdb_column_nm associated to the case management plus the investigation key*/
PROC SQL;
	CREATE TABLE CASE_MANAGEMENT_DATA AS 
	SELECT  &CM_CASE , SUMM_DATAMART.INVESTIGATION_KEY FROM NBS_RDB.SUMM_DATAMART
	LEFT JOIN  NBS_RDB.D_CASE_MANAGEMENT ON
	SUMM_DATAMART.INVESTIGATION_KEY  =D_CASE_MANAGEMENT.INVESTIGATION_KEY
WHERE SUMM_DATAMART.DISEASE_GRP_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME) 
AND D_CASE_MANAGEMENT.INVESTIGATION_KEY>1;
QUIT;
/*-------CASE_MANAGEMENT---------*/
%mend MANAGE_CASE_MANAGEMENT; 

%MACRO MANAGE_D_INV (RDB_TABLE_NM,TABLE_NM,DIM_KEY);

PROC SQL;
	CREATE TABLE STD_TESTER(COUNTSTD NUM);
	INSERT INTO STD_TESTER( COUNTSTD) VALUES(NULL);
	UPDATE STD_TESTER SET COUNTSTD= (select  count(*) from CASE_MANAGEMENT_METADATA);
QUIT;

DATA _NULL_;
SET STD_TESTER;
/*This is to decide what Fact table we are using based on the countstd*/
  IF COUNTSTD>1 then call symputx('FACT_CASE', 'F_STD_PAGE_CASE'); 
  IF COUNTSTD<2 then call symputx('FACT_CASE', 'F_PAGE_CASE'); 
  RUN;

/*It creates a table with the metadata for that specific datamartnm and rdb_table_nm which is the one received as a parameter*/
PROC SQL;
	CREATE TABLE D_INV_METADATA AS
	SELECT  DISTINCT INIT.FORM_CD, INIT.DATAMART_NM, NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM  
	FROM NBS_RDB.INIT INNER JOIN NBS_ODS.NBS_UI_METADATA
	ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
	INNER JOIN NBS_ODS.NBS_RDB_METADATA
	ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
	WHERE RDB_TABLE_NM=&TABLE_NM 
	AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
	AND QUESTION_GROUP_SEQ_NBR IS NULL
	AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
/*AND ( OTHER_VALUE_IND_CD IS NULL OR OTHER_VALUE_IND_CD='F')*/
	ORDER BY INIT.FORM_CD,  NBS_RDB_METADATA.RDB_COLUMN_NM;

	INSERT INTO D_INV_METADATA set FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME),
	RDB_TABLE_NM=&TABLE_NM
	;
QUIT;

%ASSIGN_KEY (D_INV_METADATA, SORT_KEY);

DATA DYNINVLISTING;
  SET D_INV_METADATA;
	BY SORT_KEY;
/**/
	LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT; 
	RETAIN RDB_COLUMN_NAME_LIST;
	IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN 
	/*
	Replace the rdb_column_nm value wherever it finds the user_defined_column_nm in the user_defined_column_name column
	USER_DEFINED_COLUMN_NAME = ADM_PUBLISHED_INDICATOR AS PUBLISHED_INDICATOR 'USER_DEFINED_COLUMN_NM'
	At the end it is creating a list of all the rdb_column_nm*/
		USER_DEFINED_COLUMN_NAME = COMPRESS(RDB_COLUMN_NM) || ' AS ' ||COMPRESS(USER_DEFINED_COLUMN_NM)|| " '"||COMPRESS(USER_DEFINED_COLUMN_NM)||"'";
	IF (LENGTHN(USER_DEFINED_COLUMN_NAME))>0 THEN  RDB_COLUMN_NAME_LIST = COMPBL((USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST));  
	OUTPUT;
RUN;

PROC SQL; 
DELETE FROM DYNINVLISTING WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM DYNINVLISTING);
QUIT;

DATA DYNINVLISTING;
SET DYNINVLISTING;
LENGTH TRIMMED_VALUE $30000; 
	CALL SYMPUTX('D_INV_CASE', '');
	LENGTH=LENGTHN(COMPRESS(RDB_COLUMN_NAME_LIST));
	RDB_COLUMN_NAME_LIST = TRIM(RDB_COLUMN_NAME_LIST);
	/*If the length is more than 1, then it gets rid off the last character, and it is less than 2 it gets the investigation key from the fact table*/
	IF (LENGTH>1)  THEN TRIMMED_VALUE=SUBSTR((RDB_COLUMN_NAME_LIST), 1, LENGTHN(RDB_COLUMN_NAME_LIST)-1);
	IF (LENGTH<2) THEN TRIMMED_VALUE= TRIM("'"||&FACT_CASE ||"."||INVESTIGATION_KEY||"'");
	CALL SYMPUTX('D_INV_CASE', COMPBL(TRIMMED_VALUE));/*If there are more than 2 spaces, it replaces to 1 space*/
	/*COMPBL: removes multiple blanks*/
RUN;



PROC SQL;
/*This is the same table than the previous one but for questions with other indicator as true*/
	CREATE TABLE D_INV_METADATA_OTH AS
	SELECT  DISTINCT OTHER_VALUE_IND_CD, INIT.DATAMART_NM,NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM  
	FROM NBS_ODS.NBS_UI_METADATA
	INNER JOIN NBS_ODS.NBS_RDB_METADATA
	ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
	INNER JOIN NBS_RDB.INIT 
	ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
	WHERE RDB_TABLE_NM=&TABLE_NM  
	AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
	AND QUESTION_GROUP_SEQ_NBR IS NULL
	AND OTHER_VALUE_IND_CD='T'
	AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
	ORDER BY NBS_RDB_METADATA.RDB_COLUMN_NM;
QUIT;
%ASSIGN_KEY (D_INV_METADATA_OTH, SORT_KEY);

/*It replaces the name of the rdb_column_nm and the user_defined_column_nm by the same one with _OTH appended at the end*/
DATA D_INV_METADATA_OTH;
LENGTH RDB_COLUMN_NM2 $26;

  DO UNTIL(LAST.SORT_KEY);
    SET D_INV_METADATA_OTH;
    BY SORT_KEY;
   /* OUTPUT;*/
  end;
  DO UNTIL(LAST.SORT_KEY);
    SET D_INV_METADATA_OTH;
    BY SORT_KEY;
	RDB_COLUMN_NM2 =RDB_COLUMN_NM;
	RDB_COLUMN_NM =TRIM(RDB_COLUMN_NM2) || '_OTH';
	USER_DEFINED_COLUMN_NM= TRIM(USER_DEFINED_COLUMN_NM) || '_OTH';
    OUTPUT;
  END;
  DROP RDB_COLUMN_NM2;
RUN;
/*It creates the list of OTH columns*/
DATA DYNINVLISTING_OTH;
SET D_INV_METADATA_OTH;
	BY SORT_KEY;

	LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT; 
	RETAIN RDB_COLUMN_NAME_LIST;
	IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN 
		USER_DEFINED_COLUMN_NAME = COMPRESS(RDB_COLUMN_NM) || ' AS ' ||COMPRESS(USER_DEFINED_COLUMN_NM)|| " '"||COMPRESS(USER_DEFINED_COLUMN_NM)||"'";
	IF (LENGTHN(USER_DEFINED_COLUMN_NAME))>0 THEN  RDB_COLUMN_NAME_LIST = COMPBL((USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST));  
	OUTPUT;
RUN;

PROC SQL; 
DELETE FROM DYNINVLISTING_OTH WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM DYNINVLISTING_OTH);
QUIT;

DATA _NULL_;
	CALL SYMPUTX('D_INV_CASE_OTH', '');
RUN;

DATA DYNINVLISTING_OTH;
SET DYNINVLISTING_OTH;
LENGTH TRIMMED_VALUE $30000; 
	CALL SYMPUTX('D_INV_CASE_OTH', '');
	LENGTH=LENGTHN(COMPRESS(RDB_COLUMN_NAME_LIST));
	RDB_COLUMN_NAME_LIST = TRIM(RDB_COLUMN_NAME_LIST);
	IF (LENGTH>1)  THEN TRIMMED_VALUE=SUBSTR((RDB_COLUMN_NAME_LIST), 1, LENGTHN(RDB_COLUMN_NAME_LIST)-1);
	IF (LENGTH<2) THEN TRIMMED_VALUE= TRIM("'"||&FACT_CASE ||"."||INVESTIGATION_KEY||"'");
	IF (LENGTHN(TRIMMED_VALUE) >3) THEN TRIMMED_VALUE = TRIM(TRIMMED_VALUE) || ",";
	CALL SYMPUTX('D_INV_CASE_OTH', COMPBL(TRIMMED_VALUE));
RUN;
 
/*Numeric unit processing*/
/*The same than before for the UNIT columns*/
PROC SQL;
	CREATE TABLE D_INV_METADATA_UNIT AS
	SELECT  DISTINCT OTHER_VALUE_IND_CD, INIT.DATAMART_NM, NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM  
	FROM NBS_ODS.NBS_UI_METADATA
	INNER JOIN NBS_ODS.NBS_RDB_METADATA
	ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
	INNER JOIN NBS_RDB.INIT 
	ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
	WHERE RDB_TABLE_NM=&TABLE_NM  
	AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
	AND QUESTION_GROUP_SEQ_NBR IS NULL
	AND DATA_TYPE IN ('Numeric','NUMERIC') AND CODE_SET_GROUP_ID IS NULL AND MASK IS NOT NULL and UPCASE(UNIT_TYPE_CD)='CODED'
	AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
ORDER BY NBS_RDB_METADATA.RDB_COLUMN_NM;
QUIT;
%ASSIGN_KEY (D_INV_METADATA_UNIT, SORT_KEY);

/*Replace the value of the columns appending the _UNIT at the end like it was done before*/
DATA D_INV_METADATA_UNIT;
LENGTH RDB_COLUMN_NM2 $25;
LENGTH RDB_COLUMN_NM $30;

  DO UNTIL(LAST.SORT_KEY);
    SET D_INV_METADATA_UNIT;
    BY SORT_KEY;
   /* OUTPUT;*/
  end;
  DO UNTIL(LAST.SORT_KEY);
    SET D_INV_METADATA_UNIT;
    BY SORT_KEY;
	RDB_COLUMN_NM2 =RDB_COLUMN_NM;
	RDB_COLUMN_NM =TRIM(RDB_COLUMN_NM2) || '_UNIT';
	USER_DEFINED_COLUMN_NM= TRIM(USER_DEFINED_COLUMN_NM) || '_UNIT';
    OUTPUT;
  END;
  DROP RDB_COLUMN_NM2;
RUN;

DATA D_INV_METADATA_UNIT;
SET D_INV_METADATA_UNIT;
	BY SORT_KEY;

	LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT; 
	RETAIN RDB_COLUMN_NAME_LIST;
	IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN 
		USER_DEFINED_COLUMN_NAME = COMPRESS(RDB_COLUMN_NM) || ' AS ' ||COMPRESS(USER_DEFINED_COLUMN_NM)|| " '"||COMPRESS(USER_DEFINED_COLUMN_NM)||"'";
	IF (LENGTHN(USER_DEFINED_COLUMN_NAME))>0 THEN  RDB_COLUMN_NAME_LIST = COMPBL((USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST));  
	OUTPUT;
RUN;

PROC SQL; 
DELETE FROM D_INV_METADATA_UNIT WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM D_INV_METADATA_UNIT);
QUIT;

DATA _NULL_;
	CALL SYMPUTX('D_INV_CASE_UNIT', '');
RUN;

DATA D_INV_METADATA_UNIT;
SET D_INV_METADATA_UNIT;
LENGTH TRIMMED_VALUE $30000; 
	CALL SYMPUTX('D_INV_CASE_UNIT', '');
	LENGTH=LENGTHN(COMPRESS(RDB_COLUMN_NAME_LIST));
	RDB_COLUMN_NAME_LIST = TRIM(RDB_COLUMN_NAME_LIST);
	IF (LENGTH>1)  THEN TRIMMED_VALUE=SUBSTR((RDB_COLUMN_NAME_LIST), 1, LENGTHN(RDB_COLUMN_NAME_LIST)-1);
	IF (LENGTH<2) THEN TRIMMED_VALUE= TRIM("'"||&FACT_CASE ||"."||INVESTIGATION_KEY||"'");
	IF (LENGTHN(TRIMMED_VALUE) >3) THEN TRIMMED_VALUE = TRIM(TRIMMED_VALUE) || ",";

	CALL SYMPUTX('D_INV_CASE_UNIT', COMPBL(TRIMMED_VALUE));
RUN;
 
/* Numeric Unit Processing*/

/*It creates the rdb_table_nm table in different ways depending of if the rdb_table_nm exists or not*/
%CONDITIONALCHECKER; 
 
DATA &RDB_TABLE_NM;
SET &RDB_TABLE_NM; 
DROP _TEMA001 _TEMA002 _TEMA003 _TEMA004 _TEMA005 _TEMA006 _TEMA007 _TEMA008 ;
RUN;
/*-------D_INV---------*/
%mend MANAGE_D_INV; 

%MACRO POPULATE_ORGANIZATION(PART_TYPE_KEY,SUMM_DATAMART3, USER_DEFINED_COLUMN_NM, DETAIL, QEC, UID);
PROC SQL;
CREATE TABLE ORGPART_TABLE AS SELECT D_ORGANIZATION.ORGANIZATION_KEY,
D_ORGANIZATION.ORGANIZATION_QUICK_CODE,
D_ORGANIZATION.ORGANIZATION_NAME,
D_ORGANIZATION.ORGANIZATION_LOCAL_ID, 
D_ORGANIZATION.ORGANIZATION_UID,
D_ORGANIZATION.ORGANIZATION_STREET_ADDRESS_1,
D_ORGANIZATION.ORGANIZATION_STREET_ADDRESS_2,
D_ORGANIZATION.ORGANIZATION_CITY,D_ORGANIZATION.ORGANIZATION_STATE, D_ORGANIZATION.ORGANIZATION_ZIP,
D_ORGANIZATION.ORGANIZATION_COUNTY,
D_ORGANIZATION.ORGANIZATION_PHONE_WORK,D_ORGANIZATION.ORGANIZATION_PHONE_EXT_WORK,
&PART_TYPE_KEY, SUMM_DATAMART.INVESTIGATION_KEY AS INVESTIGATION_KEY
FROM NBS_RDB.SUMM_DATAMART INNER JOIN 
NBS_RDB. &FACT_CASE ON
SUMM_DATAMART.INVESTIGATION_KEY = &FACT_CASE .INVESTIGATION_KEY
LEFT JOIN NBS_RDB.D_ORGANIZATION ON  
&FACT_CASE . &PART_TYPE_KEY = D_ORGANIZATION.ORGANIZATION_KEY;
QUIT; 

DATA ORGPART_TABLE;
SET ORGPART_TABLE;
LENGTH CITY_STATE_ZIP $2000;
LENGTH &DETAIL  $2000;
 
IF   ORGANIZATION_KEY =1 THEN ORGANIZATION_KEY=.;
&USER_DEFINED_COLUMN_NM=ORGANIZATION_KEY;
&QEC =ORGANIZATION_QUICK_CODE;
&UID= ORGANIZATION_UID;
IF LENGTHN(TRIM(ORGANIZATION_CITY))>0 THEN CITY_STATE_ZIP =PROPCASE(TRIM(ORGANIZATION_CITY));
IF LENGTHN(TRIM(ORGANIZATION_STATE))>0 THEN CITY_STATE_ZIP = TRIM(CITY_STATE_ZIP) || ', ' || PROPCASE(TRIM(ORGANIZATION_STATE)) ;
IF LENGTHN(TRIM(ORGANIZATION_ZIP))>0 THEN CITY_STATE_ZIP = TRIM(CITY_STATE_ZIP) || ' ' || TRIM(ORGANIZATION_ZIP) ;

If LENGTHN(TRIM(ORGANIZATION_LOCAL_ID))>0 THEN &DETAIL ='<b></b>' ||TRIM(ORGANIZATION_LOCAL_ID);
If LENGTHN(TRIM(ORGANIZATION_NAME))>0 THEN &DETAIL =TRIM(&DETAIL) ||'<br>' || PROPCASE(ORGANIZATION_NAME);
IF LENGTHN(TRIM(ORGANIZATION_STREET_ADDRESS_1))>0 THEN &DETAIL=  TRIM(&DETAIL) ||'<br>' ||PROPCASE(TRIM(ORGANIZATION_STREET_ADDRESS_1));
IF LENGTHN(TRIM(ORGANIZATION_STREET_ADDRESS_2))>0 then &DETAIL=  TRIM(&DETAIL) || '<br>' || PROPCASE(TRIM(ORGANIZATION_STREET_ADDRESS_2)) ;
IF LENGTHN(TRIM(CITY_STATE_ZIP))>0 then &DETAIL= TRIM(&DETAIL)|| '<br>' || TRIM(CITY_STATE_ZIP) ;
IF LENGTHN(TRIM(ORGANIZATION_COUNTY))>0 then &DETAIL= TRIM(&DETAIL)|| '<br>' || PROPCASE(TRIM(ORGANIZATION_COUNTY));
IF LENGTHN(TRIM(ORGANIZATION_PHONE_WORK))>0 then &DETAIL= TRIM(&DETAIL)|| '<br>' || TRIM(ORGANIZATION_PHONE_WORK) ;
IF LENGTHN(TRIM(ORGANIZATION_PHONE_WORK))>0 and LENGTHN(TRIM(ORGANIZATION_PHONE_EXT_WORK))>0 then &DETAIL= TRIM(&DETAIL)|| ', ext. ' || TRIM(ORGANIZATION_PHONE_EXT_WORK) ;
IF LENGTHN(TRIM(ORGANIZATION_PHONE_WORK))=0 and LENGTHN(TRIM(ORGANIZATION_PHONE_EXT_WORK))>0 then &DETAIL= TRIM(&DETAIL)|| '<br> ext. ' || TRIM(ORGANIZATION_PHONE_EXT_WORK) ;
IF LENGTHN(TRIM(&DETAIL))>0 then &DETAIL= TRIM(&DETAIL)|| '<br>'; 
	
DROP ORGANIZATION_LOCAL_ID ORGANIZATION_NAME ORGANIZATION_STREET_ADDRESS_1 ORGANIZATION_STREET_ADDRESS_2 ORGANIZATION_COUNTY ORGANIZATION_PHONE_WORK ORGANIZATION_KEY 
ORGANIZATION_PHONE_EXT_WORK CITY_STATE_ZIP ORGANIZATION_CITY ORGANIZATION_ZIP ORGANIZATION_STATE ORGANIZATION_QUICK_CODE &PART_TYPE_KEY;

RUN; 

 PROC SORT DATA=ORGPART_TABLE NODUPKEY; BY INVESTIGATION_KEY;RUN;

DATA ORGANIZATION;
MERGE ORGPART_TABLE ORGANIZATION;
BY INVESTIGATION_KEY;
RUN;

%MEND POPULATE_ORGANIZATION;

%MACRO ORGDATA(); 
PROC SQL;
CREATE TABLE ORGANIZATION_METADATA  AS SELECT DISTINCT RDB_COLUMN_NM, user_defined_column_nm, part_type_cd FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA 
ON NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID
WHERE INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND PART_TYPE_CD IS NOT NULL AND RDB_TABLE_NM ='D_ORGANIZATION' AND DATA_TYPE='PART';
QUIT;
%ASSIGN_KEY (ORGANIZATION_METADATA, SORT_KEY);
PROC SQL;
CREATE TABLE ORGANIZATION 
(INVESTIGATION_KEY NUM);
QUIT;

DATA ORGANIZATION_METADATA;
  SET ORGANIZATION_METADATA;
	BY SORT_KEY;
	LENGTH DETAIL $2000;
	IF FIRST.SORT_KEY THEN
	IF part_type_cd= 'FldFupFacilityOfPHC' THEN PART_TYPE_CD='FACILITY_FLD_FOLLOW_UP_KEY';
	IF part_type_cd= 'HospOfADT' THEN PART_TYPE_CD='HOSPITAL_KEY';
	IF part_type_cd= 'OrgAsClinicOfPHC' THEN PART_TYPE_CD='ORDERING_FACILITY_KEY';
	IF part_type_cd= 'OrgAsHospitalOfDelivery' THEN PART_TYPE_CD='DELIVERING_HOSP_KEY';
	IF part_type_cd= 'OrgAsReporterOfPHC' THEN PART_TYPE_CD='ORG_AS_REPORTER_KEY';


	KEY  = SUBSTR(USER_DEFINED_COLUMN_NM, 1, INDEX(USER_DEFINED_COLUMN_NM, "_UID"))||'KEY';
	DETAIL  = SUBSTR(USER_DEFINED_COLUMN_NM, 1, INDEX(USER_DEFINED_COLUMN_NM, "_UID"))||'DETAIL';
	QEC  = SUBSTR(USER_DEFINED_COLUMN_NM, 1, INDEX(USER_DEFINED_COLUMN_NM, "_UID"))||'QEC';
	UID= USER_DEFINED_COLUMN_NM;
	call execute('%POPULATE_ORGANIZATION('|| PART_TYPE_CD||','||  SUMM_DATAMART||','||  KEY||','||  DETAIL||','||  QEC||','||  UID||')');
OUTPUT;
RUN;
%MEND ORGDATA;
%MACRO POPULATE_PROVIDER(PART_TYPE_KEY,SUMM_DATAMART3, USER_DEFINED_COLUMN_NM, DETAIL, QEC, UID);
PROC SQL;
CREATE TABLE PROVPART_TABLE AS SELECT D_PROVIDER.PROVIDER_KEY,
D_PROVIDER.PROVIDER_QUICK_CODE,
D_PROVIDER.PROVIDER_LOCAL_ID,
D_PROVIDER.PROVIDER_UID,
D_PROVIDER.PROVIDER_FIRST_NAME, D_PROVIDER.PROVIDER_MIDDLE_NAME, D_PROVIDER.PROVIDER_LAST_NAME,
D_PROVIDER.PROVIDER_NAME_SUFFIX, 
D_PROVIDER.PROVIDER_NAME_DEGREE,
D_PROVIDER.PROVIDER_STREET_ADDRESS_1,
D_PROVIDER.PROVIDER_STREET_ADDRESS_2,
D_PROVIDER.PROVIDER_CITY,D_PROVIDER.PROVIDER_STATE, D_PROVIDER.PROVIDER_ZIP,
D_PROVIDER.PROVIDER_COUNTY,
D_PROVIDER.PROVIDER_PHONE_WORK,D_PROVIDER.PROVIDER_PHONE_EXT_WORK,
PROVIDER_EMAIL_WORK,
&PART_TYPE_KEY, SUMM_DATAMART.INVESTIGATION_KEY AS INVESTIGATION_KEY
FROM NBS_RDB.SUMM_DATAMART INNER JOIN 
NBS_RDB. &FACT_CASE ON
SUMM_DATAMART.INVESTIGATION_KEY = &FACT_CASE .INVESTIGATION_KEY
LEFT JOIN NBS_RDB.D_PROVIDER ON  
&FACT_CASE . &PART_TYPE_KEY = D_PROVIDER.PROVIDER_KEY;
QUIT; 

DATA PROVPART_TABLE;
SET PROVPART_TABLE;
	LENGTH CITY_STATE_ZIP $2000;
	LENGTH &DETAIL  $2000;
	LENGTH PROVIDER_NAME  $2000;
	 
	 
	IF   PROVIDER_KEY =1 THEN PROVIDER_KEY=.;
	&USER_DEFINED_COLUMN_NM=PROVIDER_KEY;
	&QEC =PROVIDER_QUICK_CODE;
	&UID=PROVIDER_UID; 
	IF LENGTHN(TRIM(PROVIDER_CITY))>0 THEN CITY_STATE_ZIP =PROPCASE(TRIM(PROVIDER_CITY));
	IF LENGTHN(TRIM(PROVIDER_STATE))>0 THEN CITY_STATE_ZIP = TRIM(CITY_STATE_ZIP) || ', ' || PROPCASE(TRIM(PROVIDER_STATE)) ;
	IF LENGTHN(TRIM(PROVIDER_ZIP))>0 THEN CITY_STATE_ZIP = TRIM(CITY_STATE_ZIP) || ' ' || PROPCASE(TRIM(PROVIDER_ZIP)) ;
	
	PROVIDER_NAME=PROPCASE(TRIM(PROVIDER_FIRST_NAME));


	IF LENGTHN(TRIM(PROVIDER_NAME))>0 AND LENGTHN(TRIM(PROVIDER_MIDDLE_NAME ))>0 THEN PROVIDER_NAME =TRIM(PROVIDER_NAME) ||' '|| PROPCASE(TRIM(PROVIDER_MIDDLE_NAME));
	IF LENGTHN(TRIM(PROVIDER_NAME))=0 AND LENGTHN(TRIM(PROVIDER_MIDDLE_NAME ))>0 THEN PROVIDER_NAME =PROPCASE(TRIM(PROVIDER_MIDDLE_NAME));
	IF LENGTHN(TRIM(PROVIDER_NAME))>0 AND LENGTHN(TRIM(PROVIDER_LAST_NAME ))>0 THEN PROVIDER_NAME =TRIM(PROVIDER_NAME) ||' '|| PROPCASE(TRIM(PROVIDER_LAST_NAME));
	IF LENGTHN(TRIM(PROVIDER_NAME))=0 AND LENGTHN(TRIM(PROVIDER_LAST_NAME ))>0 THEN PROVIDER_NAME = PROPCASE(TRIM(PROVIDER_LAST_NAME));
	IF LENGTHN(TRIM(PROVIDER_NAME))>0 AND LENGTHN(TRIM(PROVIDER_NAME_SUFFIX ))>0 THEN PROVIDER_NAME =TRIM(PROVIDER_NAME) ||', '|| PROPCASE(TRIM(PROVIDER_NAME_SUFFIX));
	IF LENGTHN(TRIM(PROVIDER_NAME))=0 AND LENGTHN(TRIM(PROVIDER_NAME_SUFFIX ))>0 THEN PROVIDER_NAME = PROPCASE(TRIM(PROVIDER_NAME_SUFFIX));
	IF LENGTHN(TRIM(PROVIDER_NAME))>0 AND LENGTHN(TRIM(PROVIDER_NAME_DEGREE ))>0 THEN PROVIDER_NAME =TRIM(PROVIDER_NAME) ||', '|| TRIM(PROVIDER_NAME_DEGREE);
	IF LENGTHN(TRIM(PROVIDER_NAME))=0 AND LENGTHN(TRIM(PROVIDER_NAME_DEGREE ))>0  THEN PROVIDER_NAME = TRIM(PROVIDER_NAME_DEGREE);


	If LENGTHN(TRIM(PROVIDER_LOCAL_ID))>0 THEN &DETAIL ='<b></b>' ||TRIM(PROVIDER_LOCAL_ID);
	If LENGTHN(TRIM(PROVIDER_NAME))>0 THEN &DETAIL =TRIM(&DETAIL) ||'<br>' || PROVIDER_NAME;
	IF LENGTHN(TRIM(PROVIDER_STREET_ADDRESS_1))>0 THEN &DETAIL=  TRIM(&DETAIL) ||'<br>' ||PROPCASE(TRIM(PROVIDER_STREET_ADDRESS_1));
	IF LENGTHN(TRIM(PROVIDER_STREET_ADDRESS_2))>0 THEN &DETAIL=  TRIM(&DETAIL) || '<br>' || PROPCASE(TRIM(PROVIDER_STREET_ADDRESS_2)) ;
	IF LENGTHN(TRIM(CITY_STATE_ZIP))>0 THEN &DETAIL= TRIM(&DETAIL)|| '<br>' || TRIM(CITY_STATE_ZIP) ;
	IF LENGTHN(TRIM(PROVIDER_COUNTY))>0 THEN &DETAIL= TRIM(&DETAIL)|| '<br>' || PROPCASE(TRIM(PROVIDER_COUNTY)) ;
	IF LENGTHN(TRIM(PROVIDER_PHONE_WORK))>0 THEN &DETAIL= TRIM(&DETAIL)|| '<br>' || TRIM(PROVIDER_PHONE_WORK) ;
	IF LENGTHN(TRIM(PROVIDER_PHONE_WORK))>0 and LENGTHN(TRIM(PROVIDER_PHONE_EXT_WORK))>0 THEN &DETAIL= TRIM(&DETAIL)|| ', ext. ' || TRIM(PROVIDER_PHONE_EXT_WORK) ;
	IF LENGTHN(TRIM(PROVIDER_PHONE_WORK))=0 and LENGTHN(TRIM(PROVIDER_PHONE_EXT_WORK))>0 THEN &DETAIL= TRIM(&DETAIL)|| '<br> ext. ' || TRIM(PROVIDER_PHONE_EXT_WORK) ;
	IF LENGTHN(TRIM(&DETAIL))>0 then &DETAIL= TRIM(&DETAIL)|| '<br>'; 


	DROP PROVIDER_NAME PROVIDER_FIRST_NAME PROVIDER_MIDDLE_NAME PROVIDER_LAST_NAME PROVIDER_NAME_SUFFIX PROVIDER_NAME_DEGREE PROVIDER_EMAIL_WORK 
	 PROVIDER_STREET_ADDRESS_1 PROVIDER_STREET_ADDRESS_2 PROVIDER_COUNTY PROVIDER_PHONE_WORK PROVIDER_KEY 
	PROVIDER_PHONE_EXT_WORK CITY_STATE_ZIP PROVIDER_CITY PROVIDER_ZIP PROVIDER_STATE PROVIDER_QUICK_CODE &PART_TYPE_KEY;

RUN; 

 PROC SORT DATA=PROVPART_TABLE NODUPKEY; BY INVESTIGATION_KEY;RUN;

DATA PROVIDER;
MERGE PROVPART_TABLE PROVIDER;
BY INVESTIGATION_KEY;
RUN;

%MEND POPULATE_PROVIDER;

%MACRO PROVDATA();
PROC SQL;
CREATE TABLE PROVIDER_METADATA  AS SELECT DISTINCT RDB_COLUMN_NM, user_defined_column_nm, part_type_cd FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA 
ON NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID
WHERE INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND PART_TYPE_CD IS NOT NULL AND RDB_TABLE_NM ='D_PROVIDER' AND DATA_TYPE='PART';
QUIT;
%ASSIGN_KEY (PROVIDER_METADATA, SORT_KEY);
PROC SQL;
CREATE TABLE PROVIDER 
(INVESTIGATION_KEY NUM);
QUIT;

DATA PROVIDER_METADATA;
  SET PROVIDER_METADATA;
	BY SORT_KEY;
	LENGTH DETAIL $2000;
	IF FIRST.SORT_KEY THEN
	IF part_type_cd= 'CASupervisorOfPHC' THEN PART_TYPE_CD='SUPRVSR_OF_CASE_ASSGNMENT_KEY';
	IF part_type_cd= 'ClosureInvestgrOfPHC' THEN PART_TYPE_CD='CLOSED_BY_KEY';
	IF part_type_cd= 'DispoFldFupInvestgrOfPHC' THEN PART_TYPE_CD='DISPOSITIONED_BY_KEY';
	IF part_type_cd= 'FldFupInvestgrOfPHC' THEN PART_TYPE_CD='INVSTGTR_FLD_FOLLOW_UP_KEY';
	IF part_type_cd= 'FldFupProvOfPHC' THEN PART_TYPE_CD='PROVIDER_FLD_FOLLOW_UP_KEY';
	IF part_type_cd= 'FldFupSupervisorOfPHC' THEN PART_TYPE_CD='SUPRVSR_OF_FLD_FOLLOW_UP_KEY';
	IF part_type_cd= 'InitFldFupInvestgrOfPHC' THEN PART_TYPE_CD='INIT_ASGNED_FLD_FOLLOW_UP_KEY';
	IF part_type_cd= 'InitFupInvestgrOfPHC' THEN PART_TYPE_CD='INIT_FOLLOW_UP_INVSTGTR_KEY';
	IF part_type_cd= 'InitInterviewerOfPHC' THEN PART_TYPE_CD='INIT_ASGNED_INTERVIEWER_KEY';
	IF part_type_cd= 'InterviewerOfPHC' THEN PART_TYPE_CD='INTERVIEWER_ASSIGNED_KEY';
	IF part_type_cd= 'InvestgrOfPHC' THEN PART_TYPE_CD='INVESTIGATOR_KEY';
	IF part_type_cd= 'PerAsProviderOfDelivery' THEN PART_TYPE_CD='DELIVERING_MD_KEY';
	IF part_type_cd= 'PerAsProviderOfOBGYN' THEN PART_TYPE_CD='MOTHER_OB_GYN_KEY';
	IF part_type_cd= 'PerAsProvideroOfPediatrics' THEN PART_TYPE_CD='PEDIATRICIAN_KEY';
	IF part_type_cd= 'PerAsReporterOfPHC' THEN PART_TYPE_CD='PERSON_AS_REPORTER_KEY';
	IF part_type_cd= 'PhysicianOfPHC' THEN PART_TYPE_CD='PHYSICIAN_KEY';
	IF part_type_cd= 'SurvInvestgrOfPHC' THEN PART_TYPE_CD='SURVEILLANCE_INVESTIGATOR_KEY';
	IF part_type_cd= 'FldFupFacilityOfPHC' THEN PART_TYPE_CD='FACILITY_FLD_FOLLOW_UP_KEY';
	IF part_type_cd= 'HospOfADT' THEN PART_TYPE_CD='HOSPITAL_KEY';
	IF part_type_cd= 'OrgAsClinicOfPHC' THEN PART_TYPE_CD='ORDERING_FACILITY_KEY';
	IF part_type_cd= 'OrgAsHospitalOfDelivery' THEN PART_TYPE_CD='DELIVERING_HOSP_KEY';
	IF part_type_cd= 'OrgAsReporterOfPHC' THEN PART_TYPE_CD='ORG_AS_REPORTER_KEY';
KEY  = SUBSTR(USER_DEFINED_COLUMN_NM, 1, INDEX(USER_DEFINED_COLUMN_NM, "_UID"))||'KEY';
DETAIL  = SUBSTR(USER_DEFINED_COLUMN_NM, 1, INDEX(USER_DEFINED_COLUMN_NM, "_UID"))||'DETAIL';
QEC  = SUBSTR(USER_DEFINED_COLUMN_NM, 1, INDEX(USER_DEFINED_COLUMN_NM, "_UID"))||'QEC';
UID = USER_DEFINED_COLUMN_NM;
call execute('%POPULATE_PROVIDER('|| PART_TYPE_CD||','||  SUMM_DATAMART||','||  KEY||','||  DETAIL||','||  QEC||','||  UID||')');
OUTPUT;
RUN;
%MEND PROVDATA;

%MACRO REPEATNUMERICDATA();

PROC SQL;
CREATE TABLE METADATA_INIT AS 
 SELECT  INIT.DATAMART_NM, RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM, NBS_RDB_METADATA.BLOCK_PIVOT_NBR, BLOCK_NM FROM NBS_ODS.NBS_UI_METADATA 
INNER JOIN NBS_ODS.NBS_RDB_METADATA 
 ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
INNER JOIN NBS_RDB.INIT 
ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
WHERE INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
and (code_set_group_id >0 
OR data_type in ( 'Numeric','NUMERIC') )
ORDER BY RDB_COLUMN_NM;
QUIT;

PROC SQL;
CREATE TABLE METADATA_UNIT AS 
 SELECT  INIT.DATAMART_NM,RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM, NBS_RDB_METADATA.BLOCK_PIVOT_NBR,BLOCK_NM, MASK FROM NBS_ODS.NBS_UI_METADATA 
INNER JOIN NBS_ODS.NBS_RDB_METADATA 
 ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
INNER JOIN NBS_RDB.INIT 
ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
WHERE INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND UNIT_TYPE_CD='CODED'
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
AND DATA_TYPE IN ('Numeric','NUMERIC') AND CODE_SET_GROUP_ID IS NULL AND MASK IS NOT NULL 

ORDER BY RDB_COLUMN_NM;
QUIT;

DATA METADATA_UNIT;
SET METADATA_UNIT;
LENGTH RDB_COLUMN_NM3 $21;
LENGTH RDB_COLUMN_NM2 $30;
	RDB_COLUMN_NM3=RDB_COLUMN_NM;
	RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM3) || '_UNIT';
	USER_DEFINED_COLUMN_NM = TRIM(USER_DEFINED_COLUMN_NM)|| '_UNIT';
	RDB_COLUMN_NM= RDB_COLUMN_NM2;
DROP RDB_COLUMN_NM2 RDB_COLUMN_NM3;
RUN;

PROC SORT DATA=METADATA_UNIT; BY RDB_COLUMN_NM;RUN;

DATA METADATA; 
  MERGE METADATA_UNIT METADATA_INIT; 
  BY RDB_COLUMN_NM; 
RUN;

DATA METADATA;
SET METADATA;
LENGTH USER_DEFINED_COLUMN_NM_1 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_2 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_3 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_4 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_5 &MAX_COLUMN_CHARACTER_LIMIT; 
USER_DEFINED_COLUMN_NM_1=COMPRESS(USER_DEFINED_COLUMN_NM|| '_1');
USER_DEFINED_COLUMN_NM_2=COMPRESS(USER_DEFINED_COLUMN_NM|| '_2');
USER_DEFINED_COLUMN_NM_3=COMPRESS(USER_DEFINED_COLUMN_NM|| '_3');
USER_DEFINED_COLUMN_NM_4=COMPRESS(USER_DEFINED_COLUMN_NM|| '_4');
USER_DEFINED_COLUMN_NM_5=COMPRESS(USER_DEFINED_COLUMN_NM|| '_5');

IF BLOCK_PIVOT_NBR=. THEN BLOCK_PIVOT_NBR=1;

IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_1 = '';
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_2 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_2 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 3 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 3 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 4 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

RUN;


PROC SORT DATA=METADATA ; BY RDB_COLUMN_NM;RUN;
PROC TRANSPOSE DATA=METADATA OUT=METADATA_OUT;
	VAR USER_DEFINED_COLUMN_NM_1 USER_DEFINED_COLUMN_NM_2 USER_DEFINED_COLUMN_NM_3 USER_DEFINED_COLUMN_NM_4 
USER_DEFINED_COLUMN_NM_5;
COPY  BLOCK_NM;
    BY RDB_COLUMN_NM;
RUN;

DATA METADATA_OUT;
SET METADATA_OUT;
IF MISSING(COL1) THEN COL1=.;
RUN;

PROC SQL;
CREATE TABLE METADATA_OUT as select
RDB_COLUMN_NM,BLOCK_NM, _NAME_, COL1
FROM METADATA_OUT;
QUIT;


PROC SQL;
	DELETE * FROM METADATA_OUT WHERE COL1 IS NULL;
QUIT;

/*
DATA METADATA_OUT1;
SET METADATA_OUT;
WHERE BLOCK_NM IS NOT NULL;
RUN;
*/


PROC SQL;
CREATE TABLE METADATA_OUT1 AS SELECT * FROM METADATA_OUT WHERE BLOCK_NM IS NOT NULL;
QUIT;


PROC SQL;
	CREATE TABLE METADATA_OUT AS SELECT DISTINCT METADATA_OUT.*, METADATA_OUT1.BLOCK_NM AS BLOCK_NM1 
FROM METADATA_OUT INNER JOIN METADATA_OUT1 ON 
METADATA_OUT1.RDB_COLUMN_NM = METADATA_OUT.RDB_COLUMN_NM;
QUIT;

/*PROC SORT DATA=METADATA_OUT NODUPKEY ; BY rdb_column_nm _NAME_ COL1 COL2 COL3 COL4 COL5 COL6 COL7 ;RUN;
*/

DATA METADATA_OUT;
SET METADATA_OUT; 
	ANSWER_GROUP_SEQ_NBR = INPUT(substrn(COL1,max(1,length(COL1)),1), comma20.);
	DROP BLOCK_NM;
	RENAME BLOCK_NM1 = BLOCK_NM;
RUN;

PROC SQL;	
	CREATE TABLE STD_TESTER(COUNTSTD NUM);
	INSERT INTO STD_TESTER( COUNTSTD) VALUES(NULL);
	UPDATE STD_TESTER SET COUNTSTD= (select  count(*) from CASE_MANAGEMENT_METADATA);
QUIT;

DATA _NULL_;
SET STD_TESTER;

  IF COUNTSTD>1 then call symputx('FACT_CASE', 'F_STD_PAGE_CASE'); 
  IF COUNTSTD<2 then call symputx('FACT_CASE', 'F_PAGE_CASE'); 
  RUN;

/*
PROC SQL;
	CREATE TABLE D_INV_REPEAT_METADATA AS
	SELECT  DISTINCT INIT.FORM_CD, INIT.DATAMART_NM, NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM,  
	NBS_RDB_METADATA.BLOCK_PIVOT_NBR FROM NBS_RDB.INIT INNER JOIN NBS_ODS.NBS_UI_METADATA
	ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
	INNER JOIN NBS_ODS.NBS_RDB_METADATA
	ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
	WHERE RDB_TABLE_NM='D_INVESTIGATION_REPEAT'
	AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
	
	AND PART_TYPE_CD IS NULL
	AND QUESTION_GROUP_SEQ_NBR IS NOT NULL 
	AND NBS_RDB_METADATA.BLOCK_PIVOT_NBR IS NOT NULL
	and (code_set_group_id >0 
	OR data_type in ( 'Coded' ,'Text','text','TEXT','CODED') )
	ORDER BY INIT.FORM_CD,  NBS_RDB_METADATA.RDB_COLUMN_NM;
QUIT;
*/
PROC SQL;
	CREATE TABLE D_INV_REPEAT_METADATA AS SELECT DISTINCT DATAMART_NM, RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM,BLOCK_PIVOT_NBR
	FROM METADATA;
QUIT;
%ASSIGN_KEY (D_INV_REPEAT_METADATA, SORT_KEY);

                                                                                                                                                           
DATA DYNINVLISTING;                                                                                                                                        
  SET D_INV_REPEAT_METADATA;                                                                                                                               
      BY SORT_KEY;                                                                                                                                         
                                                                                                                                                           
      LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                  
      RETAIN RDB_COLUMN_NAME_LIST;                                                                                                                         
                                                                                                                                                           
      LENGTH RDB_COLUMN_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                       
      RETAIN RDB_COLUMN_LIST;                                                                                                                              
                                                                                                                                                           
      LENGTH RDB_COLUMN_COMMA_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                 
      RETAIN RDB_COLUMN_COMMA_LIST;                                                                                                                        
                                                                                                                                                           
      IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN                                                                                                  
            USER_DEFINED_COLUMN_NAME = COMPRESS( RDB_COLUMN_NM) || ' AS ' ||COMPRESS(USER_DEFINED_COLUMN_NM)|| " '"||COMPRESS(USER_DEFINED_COLUMN_NM)||"'";
      IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN                                                                                                  
            RDB_COLUMN_NAME = COMPRESS( RDB_COLUMN_NM);                                                                                                    
      IF (LENGTHN(USER_DEFINED_COLUMN_NAME))>0 THEN  RDB_COLUMN_NAME_LIST = (USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST);                    
                                                                                                                                                           
      IF (LENGTHN(RDB_COLUMN_NAME))>0 THEN  RDB_COLUMN_LIST = (RDB_COLUMN_NAME || ' ' ||  RDB_COLUMN_LIST);                                                
      IF (LENGTHN(RDB_COLUMN_NAME))>0 THEN  RDB_COLUMN_COMMA_LIST = (RDB_COLUMN_NAME || ', ' ||  RDB_COLUMN_COMMA_LIST);                                   
      OUTPUT;    
DROP datamart_nm USER_DEFINED_COLUMN_NAME form_cd; 
RUN;                                                                                                                                                       

PROC SQL;                                                                                                                                                  
DELETE FROM DYNINVLISTING WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM DYNINVLISTING);                                                                      
QUIT;
DATA _NULL_;
	CALL SYMPUTX('D_REPEAT_CASE', '');
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
RUN;
DATA _NULL_;
	CALL SYMPUTX('D_REPEAT_CASE', '');
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
RUN;

DATA DYNINVLISTING;
SET DYNINVLISTING;
	CALL SYMPUTX('D_REPEAT_CASE', '');
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
	LENGTH=LENGTHN(COMPRESS(RDB_COLUMN_NAME_LIST));
	RDB_COLUMN_NAME_LIST = TRIM(RDB_COLUMN_NAME_LIST);
	IF (LENGTH>1)  THEN TRIMMED_VALUE=SUBSTR((RDB_COLUMN_NAME_LIST), 1, LENGTHN(RDB_COLUMN_NAME_LIST)-1);
	CALL SYMPUTX('D_REPEAT_CASE', TRIMMED_VALUE);
	CALL SYMPUTX('D_REPEAT_CASE_NAME', RDB_COLUMN_LIST);
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', RDB_COLUMN_COMMA_LIST);
	
RUN;
%put _user_;
PROC SQL;
%IF %SYSFUNC(EXIST(NBS_RDB.D_INVESTIGATION_REPEAT)) %THEN %DO;
	CREATE TABLE REPEAT_BLOCK AS 
	SELECT  &D_REPEAT_COMMA_NAME ANSWER_GROUP_SEQ_NBR, D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY, SUMM_DATAMART.INVESTIGATION_KEY, D_INVESTIGATION_REPEAT.BLOCK_NM FROM NBS_RDB.SUMM_DATAMART
	INNER JOIN  NBS_RDB .&FACT_CASE ON
	SUMM_DATAMART.INVESTIGATION_KEY  =&FACT_CASE .INVESTIGATION_KEY
	INNER JOIN  NBS_RDB.D_INVESTIGATION_REPEAT ON
	&FACT_CASE .D_INVESTIGATION_REPEAT_KEY  =D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY
WHERE D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY>1;

   %END;

%ELSE %DO;     
	CREATE TABLE REPEAT_BLOCK AS 
	SELECT  SUMM_DATAMART.INVESTIGATION_KEY  FROM NBS_RDB.SUMM_DATAMART;
    %END;
;
QUIT;

 
PROC SQL;
DELETE FROM REPEAT_BLOCK WHERE (SELECT COUNT(*) FROM DYNINVLISTING) =0;
QUIT;
PROC SORT DATA=REPEAT_BLOCK ; BY INVESTIGATION_KEY BLOCK_NM ANSWER_GROUP_SEQ_NBR;RUN;

PROC TRANSPOSE DATA=REPEAT_BLOCK OUT=REPEAT_BLOCK_OUT;
	VAR &D_REPEAT_CASE_NAME;
    BY INVESTIGATION_KEY BLOCK_NM ANSWER_GROUP_SEQ_NBR;
RUN;


DATA REPEAT_BLOCK_OUT;
set REPEAT_BLOCK_OUT;
RDB_COLUMN_NM = _NAME_;
run;

PROC SQL;
CREATE TABLE BLOCK_DATA_PL AS	SELECT BLOCK_NM, 
RDB_COLUMN_NM  FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA
	 ON  NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID WHERE 
BLOCK_NM IS NOT NULL 
AND INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Numeric','NUMERIC') )
ORDER BY RDB_COLUMN_NM, BLOCK_NM;
QUIT;
PROC SQL;
CREATE TABLE BLOCK_DATA_UNIT AS	SELECT BLOCK_NM, 
COMPRESS(RDB_COLUMN_NM || '_UNIT') AS RDB_COLUMN_NM FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA
	 ON  NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID 
WHERE BLOCK_NM IS NOT NULL 
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Numeric','NUMERIC') )
ORDER BY RDB_COLUMN_NM, BLOCK_NM;
QUIT;

 
PROC SQL;
CREATE TABLE BLOCK_DATA_OTH AS	SELECT BLOCK_NM, 
TRIM(RDB_COLUMN_NM || '_OTH') AS RDB_COLUMN_NM FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA
	 ON  NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID 
WHERE BLOCK_NM IS NOT NULL 
AND INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Numeric','NUMERIC') )
ORDER BY RDB_COLUMN_NM, BLOCK_NM;
QUIT;

DATA BLOCK_DATA_OTH;
SET BLOCK_DATA_OTH;
LENGTH RDB_COLUMN_NM2 $22;
LENGTH RDB_COLUMN_NM $30;
RDB_COLUMN_NM2=RDB_COLUMN_NM;
RDB_COLUMN_NM = COMPRESS(RDB_COLUMN_NM2|| '_OTH');
DROP RDB_COLUMN_NM2;
RUN; 

PROC SQL;
CREATE TABLE BLOCK_DATA AS SELECT * FROM BLOCK_DATA_PL 
UNION SELECT * FROM BLOCK_DATA_UNIT
UNION SELECT * FROM BLOCK_DATA_OTH;
QUIT;
PROC SQL;
CREATE TABLE REPEAT_BLOCK_OUT_BASE AS SELECT DISTINCT * FROM REPEAT_BLOCK_OUT
	INNER JOIN BLOCK_DATA 
	ON 	REPEAT_BLOCK_OUT.BLOCK_NM =BLOCK_DATA.BLOCK_NM
	AND UPCASE(REPEAT_BLOCK_OUT.RDB_COLUMN_NM)= UPCASE(BLOCK_DATA.RDB_COLUMN_NM);
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST;
	DELETE 
	BLOCK_DATA_OTH BLOCK_DATA_PL BLOCK_DATA_UNIT BLOCK_DATA REPEAT_BLOCK_OUT RUN;
QUIT;

PROC SORT DATA=REPEAT_BLOCK_OUT_BASE NODUPKEY ; BY INVESTIGATION_KEY RDB_COLUMN_NM BLOCK_NM ANSWER_GROUP_SEQ_NBR ;RUN;




DATA REPEAT_BLOCK_OUT_ALL;
SET REPEAT_BLOCK_OUT_BASE;
	BY INVESTIGATION_KEY RDB_COLUMN_NM BLOCK_NM ANSWER_GROUP_SEQ_NBR;
	
	FORMAT ANSWER_DESC1-ANSWER_DESC20 $100.;
	LENGTH ANSWER_DESC21 $8000;
	FORMAT ANSWER_DESCCHECK $10.;	
	ARRAY ANSWER_DESC(20) ANSWER_DESC1-ANSWER_DESC20;
	ANSWER_DESCCHECK='';
	RETAIN  ANSWER_DESC1-ANSWER_DESC21 ' ' I 0;
	IF FIRST.RDB_COLUMN_NM  THEN DO;
		DO J=1 TO 20; ANSWER_DESC(J) = ' ';	
		END;
		I = 0; ANSWER_DESC21 = '';
	END;
	I+1;
	IF I <= 20 THEN DO;
		IF LENGTHN(COMPRESS(col1))>0 AND LENGTHN(ANSWER_DESCCHECK)<2 THEN ANSWER_DESCCHECK ='TRUE';
		IF I = 1 THEN ANSWER_DESC21 =  LEFT(TRIM(col1));
		ELSE  ANSWER_DESC21 =LEFT(TRIM(ANSWER_DESC21))||' ~ '|| LEFT(TRIM(col1)) ;
	END;
	IF LAST.RDB_COLUMN_NM THEN OUTPUT;
	DROP ANSWER_DESC1-ANSWER_DESC20  _NAME_ _LABEL_ col1 I J;
	
	
RUN;

DATA REPEAT_BLOCK_OUT_BASE ;
SET REPEAT_BLOCK_OUT_BASE ;
RDB_COLUMN_NM = _NAME_;
RUN;

DATA REPEAT_BLOCK_OUT_BASE;
SET REPEAT_BLOCK_OUT_BASE;
DATA_VALUE=col1;
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL4 =' ';  

RUN;


PROC SQL;
CREATE TABLE METADATA_OUT as select
RDB_COLUMN_NM, _NAME_, COL1, BLOCK_NM, ANSWER_GROUP_SEQ_NBR
FROM METADATA_OUT;
QUIT;

PROC SQL;
CREATE TABLE METADATA_MERGED_INIT AS SELECT distinct * FROM METADATA_OUT
LEFT OUTER JOIN REPEAT_BLOCK_OUT_BASE ON
UPCASE(METADATA_OUT.RDB_COLUMN_NM)  = UPCASE(REPEAT_BLOCK_OUT_BASE.RDB_COLUMN_NM)
AND METADATA_OUT.ANSWER_GROUP_SEQ_NBR =REPEAT_BLOCK_OUT_BASE.ANSWER_GROUP_SEQ_NBR
AND METADATA_OUT.BLOCK_NM = REPEAT_BLOCK_OUT_BASE.BLOCK_NM ;
QUIT;



PROC SORT DATA=METADATA_MERGED_INIT ; BY INVESTIGATION_KEY;RUN;

PROC TRANSPOSE DATA=METADATA_MERGED_INIT OUT=INVESTIGATION_REPEAT_NUMERIC;
	VAR DATA_VALUE;
	ID COL1;
    BY INVESTIGATION_KEY;
RUN;

DATA INVESTIGATION_REPEAT_NUMERIC;
SET INVESTIGATION_REPEAT_NUMERIC;
DROP _NAME_;
RUN;



PROC SQL;
CREATE TABLE REPEAT_ALL AS SELECT DISTINCT RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM  FROM D_INV_REPEAT_METADATA;
QUIT;

DATA REPEAT_ALL;
SET REPEAT_ALL;
LENGTH USER_DEFINED_COLUMN_NM_ALL $4000;
USER_DEFINED_COLUMN_NM_ALL = COMPRESS(USER_DEFINED_COLUMN_NM || '_ALL');
DROP USER_DEFINED_COLUMN_NM;
RUN;

PROC SQL;
CREATE TABLE REPEAT_BLOCK_METADATA_OUT AS SELECT
REPEAT_BLOCK_OUT_ALL.*, REPEAT_ALL.USER_DEFINED_COLUMN_NM_ALL FROM
REPEAT_ALL LEFT OUTER JOIN REPEAT_BLOCK_OUT_ALL 
ON UPCASE(REPEAT_ALL.RDB_COLUMN_NM) = UPCASE(REPEAT_BLOCK_OUT_ALL.RDB_COLUMN_NM);
QUIT;

PROC SQL;
DELETE FROM REPEAT_BLOCK_METADATA_OUT WHERE USER_DEFINED_COLUMN_NM_ALL= '_ALL';
QUIT;


 PROC SORT DATA=REPEAT_BLOCK_METADATA_OUT ; BY INVESTIGATION_KEY ;RUN;

PROC TRANSPOSE DATA=REPEAT_BLOCK_METADATA_OUT OUT=REPEAT_BLOCK_NUMERIC_ALL;
	VAR ANSWER_DESC21;
	ID USER_DEFINED_COLUMN_NM_ALL;
    BY INVESTIGATION_KEY ;
RUN;

DATA REPEAT_BLOCK_NUMERIC_ALL;
SET REPEAT_BLOCK_NUMERIC_ALL;
DROP _NAME_;
RUN;
%MEND REPEATNUMERICDATA;


%MACRO REPEATVARCHARDATA();
/*Creates a table with all the metadata: data mart nm, rdb_column_nm, user_defined_column_nm, block_pivot_nbr, block_nm
for text/coded values*/

PROC SQL;
CREATE TABLE METADATA_INIT AS 
 SELECT  INIT.DATAMART_NM, RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM, NBS_RDB_METADATA.BLOCK_PIVOT_NBR, BLOCK_NM FROM NBS_ODS.NBS_UI_METADATA 
INNER JOIN NBS_ODS.NBS_RDB_METADATA 
 ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
INNER JOIN NBS_RDB.INIT 
ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
WHERE INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Coded' ,'Text','text','TEXT','CODED') )
ORDER BY RDB_COLUMN_NM;
QUIT;

/*Similar to the previous one but with other value indicator as true*/
PROC SQL;
CREATE TABLE METADATA_UNIT AS 
 SELECT  INIT.DATAMART_NM, RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM, NBS_RDB_METADATA.BLOCK_PIVOT_NBR, BLOCK_NM, OTHER_VALUE_IND_CD FROM NBS_ODS.NBS_UI_METADATA 
INNER JOIN NBS_ODS.NBS_RDB_METADATA 
 ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
INNER JOIN NBS_RDB.INIT 
ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
WHERE INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Coded','CODED') )
AND OTHER_VALUE_IND_CD='T'
ORDER BY RDB_COLUMN_NM;
QUIT;

DATA METADATA_UNIT;
SET METADATA_UNIT;
LENGTH RDB_COLUMN_NM3 $22;
LENGTH RDB_COLUMN_NM2 $30;
	RDB_COLUMN_NM3=RDB_COLUMN_NM;
	RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM3) || '_OTH';
	USER_DEFINED_COLUMN_NM = TRIM(USER_DEFINED_COLUMN_NM)|| '_OTH';
	RDB_COLUMN_NM= RDB_COLUMN_NM2;
DROP RDB_COLUMN_NM2 RDB_COLUMN_NM3;
RUN;

PROC SORT DATA=METADATA_UNIT; BY RDB_COLUMN_NM;RUN;
/*Now there's a new table called metadata with the union from metadata_unit (other indicator) and metadata_init (no other indicator)*/
DATA METADATA; 
  MERGE METADATA_UNIT METADATA_INIT; 
  BY RDB_COLUMN_NM; 
RUN;

DATA METADATA;
SET METADATA;
LENGTH USER_DEFINED_COLUMN_NM_1 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_2 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_3 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_4 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_5 &MAX_COLUMN_CHARACTER_LIMIT; 
USER_DEFINED_COLUMN_NM_1=COMPRESS(USER_DEFINED_COLUMN_NM|| '_1');
USER_DEFINED_COLUMN_NM_2=COMPRESS(USER_DEFINED_COLUMN_NM|| '_2');
USER_DEFINED_COLUMN_NM_3=COMPRESS(USER_DEFINED_COLUMN_NM|| '_3');
USER_DEFINED_COLUMN_NM_4=COMPRESS(USER_DEFINED_COLUMN_NM|| '_4');
USER_DEFINED_COLUMN_NM_5=COMPRESS(USER_DEFINED_COLUMN_NM|| '_5');

IF BLOCK_PIVOT_NBR=. THEN BLOCK_PIVOT_NBR=1;

IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_1 = '';
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_2 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_2 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 3 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 3 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 4 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

RUN;

/*now we have extra columns, user_defined_column_nm_1, user_defined_column_nm_2, etc.*/
/*A new metadata_out is created, on the left column we have the new user_defined_column_nm1, user_defined_column_nm2,
and copying the values that were for the corresponding user_defined_column_nm for each of them*/
PROC SORT DATA=METADATA ; BY RDB_COLUMN_NM;RUN;
PROC TRANSPOSE DATA=METADATA OUT=METADATA_OUT;
	VAR USER_DEFINED_COLUMN_NM_1 USER_DEFINED_COLUMN_NM_2 USER_DEFINED_COLUMN_NM_3 USER_DEFINED_COLUMN_NM_4 
USER_DEFINED_COLUMN_NM_5;
COPY  BLOCK_NM;
    BY RDB_COLUMN_NM;
RUN;
/*
DATA METADATA_OUT;
 dsid=open('METADATA_OUT');
 check=varnum(dsid,'col1');
 if check=0 then col1='';
 check=varnum(dsid,'BLOCK_NM');
 if check=0 then BLOCK_NM='';
check=varnum(dsid,'RDB_COLUMN_NM');
 if check=0 then RDB_COLUMN_NM='';
RUN;
*/

DATA METADATA_OUT;
SET METADATA_OUT;
IF MISSING(COL1) THEN COL1=.;
RUN;

PROC SQL;
CREATE TABLE METADATA_OUT as select
RDB_COLUMN_NM,BLOCK_NM, _NAME_, COL1
FROM METADATA_OUT;
QUIT;


PROC SQL;
	DELETE * FROM METADATA_OUT WHERE COL1 IS NULL;
QUIT;

/*
DATA METADATA_OUT1;
SET METADATA_OUT;
WHERE BLOCK_NM IS NOT NULL;
RUN;
*/
PROC SQL;
CREATE TABLE METADATA_OUT1 AS SELECT * FROM METADATA_OUT WHERE BLOCK_NM IS NOT NULL;
QUIT;




PROC SQL;
	CREATE TABLE METADATA_OUT AS SELECT DISTINCT METADATA_OUT.*, METADATA_OUT1.BLOCK_NM AS BLOCK_NM1 
FROM METADATA_OUT INNER JOIN METADATA_OUT1 ON 
UPCASE(METADATA_OUT1.RDB_COLUMN_NM) = UPCASE(METADATA_OUT.RDB_COLUMN_NM);
QUIT;

/*PROC SORT DATA=METADATA_OUT NODUPKEY ; BY rdb_column_nm _NAME_ COL1 COL2 COL3 COL4 COL5 COL6 COL7 ;RUN;
*/

/*Block_NM1 is renamed to block_nm*/
DATA METADATA_OUT;
SET METADATA_OUT; 
	ANSWER_GROUP_SEQ_NBR = INPUT(substrn(COL1,max(1,length(COL1)),1), comma20.);
	DROP BLOCK_NM;
	RENAME BLOCK_NM1 = BLOCK_NM;
RUN;

PROC SQL;	
	CREATE TABLE STD_TESTER(COUNTSTD NUM);
	INSERT INTO STD_TESTER( COUNTSTD) VALUES(NULL);
	UPDATE STD_TESTER SET COUNTSTD= (select  count(*) from CASE_MANAGEMENT_METADATA);
QUIT;

DATA _NULL_;
SET STD_TESTER;

  IF COUNTSTD>1 then call symputx('FACT_CASE', 'F_STD_PAGE_CASE'); 
  IF COUNTSTD<2 then call symputx('FACT_CASE', 'F_PAGE_CASE'); 
  RUN;

/*
PROC SQL;
	CREATE TABLE D_INV_REPEAT_METADATA AS
	SELECT  DISTINCT INIT.FORM_CD, INIT.DATAMART_NM, NBS_RDB_METADATA.RDB_TABLE_NM, NBS_RDB_METADATA.RDB_COLUMN_NM,NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM,  
	NBS_RDB_METADATA.BLOCK_PIVOT_NBR FROM NBS_RDB.INIT INNER JOIN NBS_ODS.NBS_UI_METADATA
	ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
	INNER JOIN NBS_ODS.NBS_RDB_METADATA
	ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
	WHERE RDB_TABLE_NM='D_INVESTIGATION_REPEAT'
	AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
	
	AND PART_TYPE_CD IS NULL
	AND QUESTION_GROUP_SEQ_NBR IS NOT NULL 
	AND NBS_RDB_METADATA.BLOCK_PIVOT_NBR IS NOT NULL
	and (code_set_group_id >0 
	OR data_type in ( 'Coded' ,'Text','text','TEXT','CODED') )
	ORDER BY INIT.FORM_CD,  NBS_RDB_METADATA.RDB_COLUMN_NM;
QUIT;
*/
PROC SQL;
/*New table with 4 columns from metadata*/
	CREATE TABLE D_INV_REPEAT_METADATA AS SELECT DISTINCT DATAMART_NM, RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM,BLOCK_PIVOT_NBR
	FROM METADATA;
QUIT;
%ASSIGN_KEY (D_INV_REPEAT_METADATA, SORT_KEY);

                                                                                                                                                           
DATA DYNINVLISTING;                                                                                                                                        
  SET D_INV_REPEAT_METADATA;                                                                                                                               
      BY SORT_KEY;                                                                                                                                         
                                                                                                                                                           
      LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                  
      RETAIN RDB_COLUMN_NAME_LIST;                                                                                                                         
                                                                                                                                                           
      LENGTH RDB_COLUMN_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                       
      RETAIN RDB_COLUMN_LIST;                                                                                                                              
                                                                                                                                                           
      LENGTH RDB_COLUMN_COMMA_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                 
      RETAIN RDB_COLUMN_COMMA_LIST;                                                                                                                        
                                                                                                                                                           
      IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN                                                                                                  
            USER_DEFINED_COLUMN_NAME = COMPRESS( RDB_COLUMN_NM) || ' AS ' ||COMPRESS(USER_DEFINED_COLUMN_NM)|| " '"||COMPRESS(USER_DEFINED_COLUMN_NM)||"'";
      IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN                                                                                                  
            RDB_COLUMN_NAME = COMPRESS( RDB_COLUMN_NM);                                                                                                    
      IF (LENGTHN(USER_DEFINED_COLUMN_NAME))>0 THEN  RDB_COLUMN_NAME_LIST = (USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST);                    
      /*creates 2 lists of rdb_column_nm one with , and one without ,*/                                                                                                                                                  
      IF (LENGTHN(RDB_COLUMN_NAME))>0 THEN  RDB_COLUMN_LIST = (RDB_COLUMN_NAME || ' ' ||  RDB_COLUMN_LIST);                                                
      IF (LENGTHN(RDB_COLUMN_NAME))>0 THEN  RDB_COLUMN_COMMA_LIST = (RDB_COLUMN_NAME || ', ' ||  RDB_COLUMN_COMMA_LIST);                                   
      OUTPUT;    
DROP datamart_nm USER_DEFINED_COLUMN_NAME form_cd; 
RUN;                                                                                                                                                       

PROC SQL; 
                                                                                                                                               
DELETE FROM DYNINVLISTING WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM DYNINVLISTING);                                                                      
QUIT;
DATA _NULL_;
	CALL SYMPUTX('D_REPEAT_CASE', ''); /*set the value into the first parameter (variable) and trims*/
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
RUN;
DATA DYNINVLISTING;
SET DYNINVLISTING;
	CALL SYMPUTX('D_REPEAT_CASE', '');
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
	LENGTH=LENGTHN(COMPRESS(RDB_COLUMN_NAME_LIST));
	RDB_COLUMN_NAME_LIST = TRIM(RDB_COLUMN_NAME_LIST);
	IF (LENGTH>1)  THEN TRIMMED_VALUE=SUBSTR((RDB_COLUMN_NAME_LIST), 1, LENGTHN(RDB_COLUMN_NAME_LIST)-1);
	CALL SYMPUTX('D_REPEAT_CASE', TRIMMED_VALUE);
	CALL SYMPUTX('D_REPEAT_CASE_NAME', RDB_COLUMN_LIST);
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', RDB_COLUMN_COMMA_LIST);
	
RUN;
%put _user_;
PROC SQL;
%IF %SYSFUNC(EXIST(NBS_RDB.D_INVESTIGATION_REPEAT)) %THEN %DO;
	CREATE TABLE REPEAT_BLOCK AS 
	SELECT  &D_REPEAT_COMMA_NAME ANSWER_GROUP_SEQ_NBR, D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY, SUMM_DATAMART.INVESTIGATION_KEY, D_INVESTIGATION_REPEAT.BLOCK_NM FROM NBS_RDB.SUMM_DATAMART
	INNER JOIN  NBS_RDB .&FACT_CASE ON
	SUMM_DATAMART.INVESTIGATION_KEY  =&FACT_CASE .INVESTIGATION_KEY
	INNER JOIN  NBS_RDB.D_INVESTIGATION_REPEAT ON
	&FACT_CASE .D_INVESTIGATION_REPEAT_KEY  =D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY
WHERE D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY>1;

   %END;

%ELSE %DO;     
	CREATE TABLE REPEAT_BLOCK AS 
	SELECT  SUMM_DATAMART.INVESTIGATION_KEY  FROM NBS_RDB.SUMM_DATAMART;
    %END;
;
QUIT;

 
PROC SQL;
DELETE FROM REPEAT_BLOCK WHERE (SELECT COUNT(*) FROM DYNINVLISTING) =0;
QUIT;
PROC SORT DATA=REPEAT_BLOCK ; BY INVESTIGATION_KEY BLOCK_NM ANSWER_GROUP_SEQ_NBR;RUN;

PROC TRANSPOSE DATA=REPEAT_BLOCK OUT=REPEAT_BLOCK_OUT;
	VAR &D_REPEAT_CASE_NAME;
    BY INVESTIGATION_KEY BLOCK_NM ANSWER_GROUP_SEQ_NBR;
RUN;


DATA REPEAT_BLOCK_OUT;
set REPEAT_BLOCK_OUT;
RDB_COLUMN_NM = _NAME_;
RUN;

/*2 identical tables with different names*/
PROC SQL;
CREATE TABLE BLOCK_DATA_PL AS	SELECT BLOCK_NM, 
RDB_COLUMN_NM  FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA
	 ON  NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID WHERE 
BLOCK_NM IS NOT NULL 
AND INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Coded' ,'Text','text','TEXT','CODED') )
ORDER BY RDB_COLUMN_NM, BLOCK_NM;
QUIT;
PROC SQL;
CREATE TABLE BLOCK_DATA_UNIT AS	SELECT BLOCK_NM, 
RDB_COLUMN_NM FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA
	 ON  NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID 
WHERE BLOCK_NM IS NOT NULL 
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Coded' ,'Text','text','TEXT','CODED') )
ORDER BY RDB_COLUMN_NM, BLOCK_NM;
QUIT;



PROC SQL;
CREATE TABLE BLOCK_DATA_OTH AS	SELECT BLOCK_NM, 
RDB_COLUMN_NM FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA
	 ON  NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID 
WHERE BLOCK_NM IS NOT NULL 
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and (code_set_group_id >0 
OR data_type in ( 'Coded' ,'Text','text','TEXT','CODED') )
ORDER BY RDB_COLUMN_NM, BLOCK_NM;
QUIT;


DATA BLOCK_DATA_OTH;
SET BLOCK_DATA_OTH;
LENGTH RDB_COLUMN_NM $30;
LENGTH RDB_COLUMN_NM2 $22;
RDB_COLUMN_NM2= RDB_COLUMN_NM;
RDB_COLUMN_NM=COMPRESS(RDB_COLUMN_NM2 || '_OTH');
DROP RDB_COLUMN_NM2;
RUN;

PROC SQL;
CREATE TABLE BLOCK_DATA AS SELECT * FROM BLOCK_DATA_PL
UNION SELECT * FROM BLOCK_DATA_UNIT
UNION SELECT * FROM BLOCK_DATA_OTH;
QUIT;
PROC SQL;
CREATE TABLE REPEAT_BLOCK_OUT_BASE AS SELECT DISTINCT * FROM REPEAT_BLOCK_OUT
	INNER JOIN BLOCK_DATA 
	ON 	REPEAT_BLOCK_OUT.BLOCK_NM =BLOCK_DATA.BLOCK_NM
	AND UPCASE(REPEAT_BLOCK_OUT.RDB_COLUMN_NM)= UPCASE(BLOCK_DATA.RDB_COLUMN_NM);
QUIT;


PROC DATASETS LIBRARY = WORK NOLIST;
	DELETE 
	BLOCK_DATA_OTH BLOCK_DATA_PL BLOCK_DATA_UNIT BLOCK_DATA REPEAT_BLOCK_OUT RUN;
QUIT;

PROC SORT DATA=REPEAT_BLOCK_OUT_BASE NODUPKEY ; BY INVESTIGATION_KEY RDB_COLUMN_NM BLOCK_NM ANSWER_GROUP_SEQ_NBR ;RUN;

DATA REPEAT_BLOCK_OUT_ALL;
SET REPEAT_BLOCK_OUT_BASE;
	BY INVESTIGATION_KEY RDB_COLUMN_NM BLOCK_NM ANSWER_GROUP_SEQ_NBR;
	
	FORMAT ANSWER_DESC1-ANSWER_DESC20 $100.;
	FORMAT ANSWER_DESCCHECK $10.;
	LENGTH ANSWER_DESC21 $8000;
	
	ARRAY ANSWER_DESC(20) ANSWER_DESC1-ANSWER_DESC20;
	ANSWER_DESCCHECK='';
	RETAIN  ANSWER_DESC1-ANSWER_DESC21 ' ' I 0;
	IF FIRST.RDB_COLUMN_NM  THEN DO;
		DO J=1 TO 20; ANSWER_DESC(J) = ' ';	
		END;
		I = 0; ANSWER_DESC21 = '';
	END;
	I+1;
	IF I <= 20 THEN DO;
		IF LENGTHN(COMPRESS(col1))>0 AND LENGTHN(ANSWER_DESCCHECK)<2 THEN ANSWER_DESCCHECK ='TRUE';
		IF I = 1 THEN ANSWER_DESC21 =  LEFT(TRIM(col1));
		ELSE  ANSWER_DESC21 =LEFT(TRIM(ANSWER_DESC21))||' ~ '|| LEFT(TRIM(col1)) ;
	END;
	IF LAST.RDB_COLUMN_NM THEN OUTPUT;
	DROP ANSWER_DESC1-ANSWER_DESC20  _NAME_ _LABEL_ col1 I J;
RUN;

DATA REPEAT_BLOCK_OUT_BASE ;
SET REPEAT_BLOCK_OUT_BASE ;
RDB_COLUMN_NM = _NAME_;
RUN;

DATA REPEAT_BLOCK_OUT_BASE;
SET REPEAT_BLOCK_OUT_BASE;
DATA_VALUE=col1;
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL4 =' ';  

RUN;

PROC SQL;
CREATE TABLE METADATA_OUT as select
RDB_COLUMN_NM, _NAME_, COL1, BLOCK_NM, ANSWER_GROUP_SEQ_NBR
FROM METADATA_OUT;
QUIT;

PROC SQL;
CREATE TABLE METADATA_MERGED_INIT AS SELECT distinct * FROM METADATA_OUT
LEFT OUTER JOIN REPEAT_BLOCK_OUT_BASE ON
UPCASE(METADATA_OUT.RDB_COLUMN_NM)  = UPCASE(REPEAT_BLOCK_OUT_BASE.RDB_COLUMN_NM)
AND METADATA_OUT.ANSWER_GROUP_SEQ_NBR =REPEAT_BLOCK_OUT_BASE.ANSWER_GROUP_SEQ_NBR
AND METADATA_OUT.BLOCK_NM = REPEAT_BLOCK_OUT_BASE.BLOCK_NM ;
QUIT;



PROC SORT DATA=METADATA_MERGED_INIT ; BY INVESTIGATION_KEY;RUN;

PROC TRANSPOSE DATA=METADATA_MERGED_INIT OUT=INVESTIGATION_REPEAT_VARCHAR;
	VAR DATA_VALUE;
	ID COL1;
    BY INVESTIGATION_KEY;
RUN;

DATA INVESTIGATION_REPEAT_VARCHAR;
SET INVESTIGATION_REPEAT_VARCHAR;
DROP _NAME_;
RUN;



PROC SQL;
CREATE TABLE REPEAT_ALL AS SELECT DISTINCT RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM  FROM D_INV_REPEAT_METADATA;
QUIT;

DATA REPEAT_ALL;
SET REPEAT_ALL;
LENGTH USER_DEFINED_COLUMN_NM_ALL $4000;
USER_DEFINED_COLUMN_NM_ALL = COMPRESS(USER_DEFINED_COLUMN_NM || '_ALL');
DROP USER_DEFINED_COLUMN_NM;
RUN;

PROC SQL;
CREATE TABLE REPEAT_BLOCK_METADATA_OUT AS SELECT
REPEAT_BLOCK_OUT_ALL.*, REPEAT_ALL.USER_DEFINED_COLUMN_NM_ALL FROM
REPEAT_ALL LEFT OUTER JOIN REPEAT_BLOCK_OUT_ALL 
ON UPCASE(REPEAT_ALL.RDB_COLUMN_NM) = UPCASE(REPEAT_BLOCK_OUT_ALL.RDB_COLUMN_NM);
QUIT;


 PROC SORT DATA=REPEAT_BLOCK_METADATA_OUT ; BY INVESTIGATION_KEY ;RUN;

PROC TRANSPOSE DATA=REPEAT_BLOCK_METADATA_OUT OUT=REPEAT_BLOCK_VARCHAR_ALL;
	VAR ANSWER_DESC21;
	ID USER_DEFINED_COLUMN_NM_ALL;
    BY INVESTIGATION_KEY ;
RUN;

DATA REPEAT_BLOCK_VARCHAR_ALL;
SET REPEAT_BLOCK_VARCHAR_ALL;
DROP _NAME_;
RUN;
%MEND REPEATVARCHARDATA;
%MACRO REPEATDATEDATA();

PROC SQL;
CREATE TABLE METADATA AS 
 SELECT  INIT.DATAMART_NM, RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM, NBS_RDB_METADATA.BLOCK_PIVOT_NBR, BLOCK_NM FROM NBS_ODS.NBS_UI_METADATA 
INNER JOIN NBS_ODS.NBS_RDB_METADATA 
 ON NBS_UI_METADATA.NBS_UI_METADATA_UID = NBS_RDB_METADATA.NBS_UI_METADATA_UID
INNER JOIN NBS_RDB.INIT 
ON NBS_UI_METADATA.INVESTIGATION_FORM_CD = INIT.FORM_CD
WHERE INVESTIGATION_FORM_CD =(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
AND RDB_TABLE_NM ='D_INVESTIGATION_REPEAT' 
and data_type in ( 'DATETIME','DATE', 'Date','Date/Time')  and code_set_group_id is null ORDER BY RDB_COLUMN_NM;
QUIT;


DATA METADATA;
SET METADATA;
LENGTH USER_DEFINED_COLUMN_NM_1 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_2 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_3 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_4 &MAX_COLUMN_CHARACTER_LIMIT; 
LENGTH USER_DEFINED_COLUMN_NM_5 &MAX_COLUMN_CHARACTER_LIMIT; 
USER_DEFINED_COLUMN_NM_1=COMPRESS(USER_DEFINED_COLUMN_NM|| '_1');
USER_DEFINED_COLUMN_NM_2=COMPRESS(USER_DEFINED_COLUMN_NM|| '_2');
USER_DEFINED_COLUMN_NM_3=COMPRESS(USER_DEFINED_COLUMN_NM|| '_3');
USER_DEFINED_COLUMN_NM_4=COMPRESS(USER_DEFINED_COLUMN_NM|| '_4');
USER_DEFINED_COLUMN_NM_5=COMPRESS(USER_DEFINED_COLUMN_NM|| '_5');

IF BLOCK_PIVOT_NBR=. THEN BLOCK_PIVOT_NBR=1;

IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_1 = '';
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_2 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 0 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_2 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 1 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_3 = ''; 
IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 2 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 3 THEN USER_DEFINED_COLUMN_NM_4 = ''; 
IF BLOCK_PIVOT_NBR = 3 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

IF BLOCK_PIVOT_NBR = 4 THEN USER_DEFINED_COLUMN_NM_5 = ''; 

RUN;


PROC SORT DATA=METADATA ; BY RDB_COLUMN_NM;RUN;
PROC TRANSPOSE DATA=METADATA OUT=METADATA_OUT;
	VAR USER_DEFINED_COLUMN_NM_1 USER_DEFINED_COLUMN_NM_2 USER_DEFINED_COLUMN_NM_3 USER_DEFINED_COLUMN_NM_4 
USER_DEFINED_COLUMN_NM_5;
COPY  BLOCK_NM;
    BY RDB_COLUMN_NM;
RUN;

DATA METADATA_OUT;
SET METADATA_OUT;
IF MISSING(COL1) THEN COL1=.;
RUN;

PROC SQL;
CREATE TABLE METADATA_OUT as select
RDB_COLUMN_NM,BLOCK_NM, _NAME_, COL1
FROM METADATA_OUT;
QUIT;

PROC SQL;
	DELETE * FROM METADATA_OUT WHERE COL1 IS NULL;
QUIT;

PROC SQL;
CREATE TABLE METADATA_OUT1 AS SELECT * FROM METADATA_OUT WHERE BLOCK_NM IS NOT NULL;
QUIT;

PROC SQL;
	CREATE TABLE METADATA_OUT AS SELECT DISTINCT METADATA_OUT.*, METADATA_OUT1.BLOCK_NM AS BLOCK_NM1 
FROM METADATA_OUT INNER JOIN METADATA_OUT1 ON 
METADATA_OUT1.RDB_COLUMN_NM = METADATA_OUT.RDB_COLUMN_NM;
QUIT;


DATA METADATA_OUT;
SET METADATA_OUT; 
	ANSWER_GROUP_SEQ_NBR = INPUT(substrn(COL1,max(1,length(COL1)),1), comma20.);
	DROP BLOCK_NM;
	RENAME BLOCK_NM1 = BLOCK_NM;
RUN;

PROC SQL;	
	CREATE TABLE STD_TESTER(COUNTSTD NUM);
	INSERT INTO STD_TESTER( COUNTSTD) VALUES(NULL);
	UPDATE STD_TESTER SET COUNTSTD= (select  count(*) from CASE_MANAGEMENT_METADATA);
QUIT;

DATA _NULL_;
SET STD_TESTER;

  IF COUNTSTD>1 then call symputx('FACT_CASE', 'F_STD_PAGE_CASE'); 
  IF COUNTSTD<2 then call symputx('FACT_CASE', 'F_PAGE_CASE'); 
  RUN;

PROC SQL;
	CREATE TABLE D_INV_REPEAT_METADATA AS SELECT DISTINCT DATAMART_NM, RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM,BLOCK_PIVOT_NBR
	FROM METADATA;
QUIT;
%ASSIGN_KEY (D_INV_REPEAT_METADATA, SORT_KEY);

                                                                                                                                                           
DATA DYNINVLISTING;                                                                                                                                        
  SET D_INV_REPEAT_METADATA;                                                                                                                               
      BY SORT_KEY;                                                                                                                                         
                                                                                                                                                           
      LENGTH RDB_COLUMN_NAME_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                  
      RETAIN RDB_COLUMN_NAME_LIST;                                                                                                                         
                                                                                                                                                           
      LENGTH RDB_COLUMN_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                       
      RETAIN RDB_COLUMN_LIST;                                                                                                                              
                                                                                                                                                           
      LENGTH RDB_COLUMN_COMMA_LIST &MAX_COLUMN_CHARACTER_LIMIT;                                                                                                                 
      RETAIN RDB_COLUMN_COMMA_LIST;                                                                                                                        
                                                                                                                                                           
      IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN                                                                                                  
            USER_DEFINED_COLUMN_NAME = COMPRESS( RDB_COLUMN_NM) || ' AS ' ||COMPRESS(USER_DEFINED_COLUMN_NM)|| " '"||COMPRESS(USER_DEFINED_COLUMN_NM)||"'";
      IF FIRST.SORT_KEY AND NOT MISSING(DATAMART_NM) THEN                                                                                                  
            RDB_COLUMN_NAME = COMPRESS( RDB_COLUMN_NM);                                                                                                    
      IF (LENGTHN(USER_DEFINED_COLUMN_NAME))>0 THEN  RDB_COLUMN_NAME_LIST = (USER_DEFINED_COLUMN_NAME || ', ' || RDB_COLUMN_NAME_LIST);                    
                                                                                                                                                           
      IF (LENGTHN(RDB_COLUMN_NAME))>0 THEN  RDB_COLUMN_LIST = (RDB_COLUMN_NAME || ' ' ||  RDB_COLUMN_LIST);                                                
      IF (LENGTHN(RDB_COLUMN_NAME))>0 THEN  RDB_COLUMN_COMMA_LIST = (RDB_COLUMN_NAME || ', ' ||  RDB_COLUMN_COMMA_LIST);                                   
      OUTPUT;    
DROP datamart_nm USER_DEFINED_COLUMN_NAME form_cd; 
RUN;                                                                                                                                                       

PROC SQL;                                                                                                                                                  
DELETE FROM DYNINVLISTING WHERE SORT_KEY <(SELECT MAX (SORT_KEY) FROM DYNINVLISTING);                                                                      
QUIT;
DATA _NULL_;
	CALL SYMPUTX('D_REPEAT_CASE', '');
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
RUN;
DATA _NULL_;
	CALL SYMPUTX('D_REPEAT_CASE', '');
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
RUN;
DATA DYNINVLISTING;
SET DYNINVLISTING;
	CALL SYMPUTX('D_REPEAT_CASE', '');
	CALL SYMPUTX('D_REPEAT_CASE_NAME', '');
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', '');
	LENGTH=LENGTHN(COMPRESS(RDB_COLUMN_NAME_LIST));
	RDB_COLUMN_NAME_LIST = TRIM(RDB_COLUMN_NAME_LIST);
	IF (LENGTH>1)  THEN TRIMMED_VALUE=SUBSTR((RDB_COLUMN_NAME_LIST), 1, LENGTHN(RDB_COLUMN_NAME_LIST)-1);
	CALL SYMPUTX('D_REPEAT_CASE', TRIMMED_VALUE);
	CALL SYMPUTX('D_REPEAT_CASE_NAME', RDB_COLUMN_LIST);
	CALL SYMPUTX('D_REPEAT_COMMA_NAME', RDB_COLUMN_COMMA_LIST);
	
RUN;
%put _user_;
PROC SQL;
%IF %SYSFUNC(EXIST(NBS_RDB.D_INVESTIGATION_REPEAT)) %THEN %DO;
	CREATE TABLE REPEAT_BLOCK AS 
	SELECT  &D_REPEAT_COMMA_NAME ANSWER_GROUP_SEQ_NBR, D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY, SUMM_DATAMART.INVESTIGATION_KEY, D_INVESTIGATION_REPEAT.BLOCK_NM FROM NBS_RDB.SUMM_DATAMART
	INNER JOIN  NBS_RDB .&FACT_CASE ON
	SUMM_DATAMART.INVESTIGATION_KEY  =&FACT_CASE .INVESTIGATION_KEY
	INNER JOIN  NBS_RDB.D_INVESTIGATION_REPEAT ON
	&FACT_CASE .D_INVESTIGATION_REPEAT_KEY  =D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY
WHERE D_INVESTIGATION_REPEAT.D_INVESTIGATION_REPEAT_KEY>1;

   %END;

%ELSE %DO;     
	CREATE TABLE REPEAT_BLOCK AS 
	SELECT  SUMM_DATAMART.INVESTIGATION_KEY  FROM NBS_RDB.SUMM_DATAMART;
    %END;
;
QUIT;

 
PROC SQL;
DELETE FROM REPEAT_BLOCK WHERE (SELECT COUNT(*) FROM DYNINVLISTING) =0;
QUIT;
PROC SORT DATA=REPEAT_BLOCK ; BY INVESTIGATION_KEY BLOCK_NM ANSWER_GROUP_SEQ_NBR;RUN;

PROC TRANSPOSE DATA=REPEAT_BLOCK OUT=REPEAT_BLOCK_OUT;
	VAR &D_REPEAT_CASE_NAME;
    BY INVESTIGATION_KEY BLOCK_NM ANSWER_GROUP_SEQ_NBR;
RUN;


DATA REPEAT_BLOCK_OUT;
set REPEAT_BLOCK_OUT;
RDB_COLUMN_NM = _NAME_;
coloumnText=ANSWER_TXT; 
rename col1=dateColumn;
RUN;

PROC SQL;
CREATE TABLE BLOCK_DATA AS	SELECT BLOCK_NM, 
RDB_COLUMN_NM  FROM NBS_ODS.NBS_RDB_METADATA INNER JOIN NBS_ODS.NBS_UI_METADATA
	 ON  NBS_RDB_METADATA.NBS_UI_METADATA_UID =NBS_UI_METADATA.NBS_UI_METADATA_UID 
WHERE 
RDB_TABLE_NM='D_INVESTIGATION_REPEAT'
	AND NBS_UI_METADATA.INVESTIGATION_FORM_CD=(SELECT FORM_CD FROM NBS_RDB.NBS_PAGE WHERE DATAMART_NM=&DATAMART_NAME)
	AND PART_TYPE_CD IS NULL
	AND QUESTION_GROUP_SEQ_NBR IS NOT NULL 
	AND NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM NE '' and NBS_RDB_METADATA.USER_DEFINED_COLUMN_NM IS NOT NULL
	AND NBS_RDB_METADATA.BLOCK_PIVOT_NBR IS NOT NULL
	and data_type in ( 'DATETIME','DATE', 'Date','Date/Time') and code_set_group_id is null 
	ORDER BY RDB_COLUMN_NM, BLOCK_NM;
QUIT;

PROC SQL;
CREATE TABLE REPEAT_BLOCK_OUT_BASE AS SELECT DISTINCT * FROM REPEAT_BLOCK_OUT
	INNER JOIN BLOCK_DATA 
	ON 	REPEAT_BLOCK_OUT.BLOCK_NM =BLOCK_DATA.BLOCK_NM
	AND UPCASE(REPEAT_BLOCK_OUT.RDB_COLUMN_NM)= UPCASE(BLOCK_DATA.RDB_COLUMN_NM);
QUIT;

PROC DATASETS LIBRARY = WORK NOLIST;
	DELETE 
	BLOCK_DATA REPEAT_BLOCK_OUT RUN;
QUIT;

PROC SORT DATA=REPEAT_BLOCK_OUT_BASE NODUPKEY ; BY INVESTIGATION_KEY RDB_COLUMN_NM BLOCK_NM ANSWER_GROUP_SEQ_NBR ;RUN;

DATA REPEAT_BLOCK_OUT_ALL;
SET REPEAT_BLOCK_OUT_BASE;
	BY INVESTIGATION_KEY RDB_COLUMN_NM BLOCK_NM ANSWER_GROUP_SEQ_NBR;
	
	FORMAT ANSWER_DESCCHECK $10.;
	FORMAT ANSWER_DESC1-ANSWER_DESC20 $100.;
	LENGTH ANSWER_DESC21 $8000;
	
	ARRAY ANSWER_DESC(20) ANSWER_DESC1-ANSWER_DESC20;
	RETAIN  ANSWER_DESC1-ANSWER_DESC21 ' ' I 0;
	IF FIRST.RDB_COLUMN_NM  THEN DO;
		DO J=1 TO 20; ANSWER_DESC(J) = '';	
		END;
		I = 0; ANSWER_DESC21 = ''; 
		ANSWER_DESCCHECK='';
	END;
	I+1;
	X=LENGTHN(ANSWER_DESC21);
	IF I <= 20 THEN DO;
		TEXTDATE =  PUT(dateColumn, yymmddd10.); 
        ANSWER_DESC(I) = TEXTDATE;
		IF LENGTHN(TEXTDATE)< 5 THEN TEXTDATE='';
		IF LENGTHN(TEXTDATE)>4 AND LENGTHN(ANSWER_DESCCHECK)<2 THEN ANSWER_DESCCHECK ='TRUE';
		IF I = 1 THEN ANSWER_DESC21 =  LEFT(TRIM(TEXTDATE));
		ELSE ANSWER_DESC21 =LEFT(TRIM(ANSWER_DESC21))|| ' ~ '|| LEFT(TRIM(TEXTDATE));
	END;	
	IF LAST.RDB_COLUMN_NM THEN OUTPUT; 
	IF  LENGTHN(COMPRESS(ANSWER_DESCCHECK))<3 THEN ANSWER_DESC21='';
	DROP ANSWER_DESC1-ANSWER_DESC20  _NAME_ _LABEL_ ANSWER_DESCCHECK I J;
RUN;

DATA REPEAT_BLOCK_OUT_BASE ;
SET REPEAT_BLOCK_OUT_BASE ;
DATA_VALUE=dateColumn;
RDB_COLUMN_NM = _NAME_;
RUN;

DATA REPEAT_BLOCK_OUT_BASE;
SET REPEAT_BLOCK_OUT_BASE;
DATA_VALUE=col1;
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 1 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 2 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL4 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 3 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 4 THEN COL5 =' ';  

IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL1 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL2 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL3 =' ';  
IF ANSWER_GROUP_SEQ_NBR = 5 THEN COL4 =' ';  

RUN;

PROC SQL;
CREATE TABLE METADATA_OUT as select
RDB_COLUMN_NM, _NAME_, COL1, BLOCK_NM, ANSWER_GROUP_SEQ_NBR
FROM METADATA_OUT;
QUIT;

PROC SQL;
CREATE TABLE METADATA_MERGED_INIT AS SELECT distinct * FROM METADATA_OUT
LEFT OUTER JOIN REPEAT_BLOCK_OUT_BASE ON
UPCASE(METADATA_OUT.RDB_COLUMN_NM)  = UPCASE(REPEAT_BLOCK_OUT_BASE.RDB_COLUMN_NM)
AND METADATA_OUT.ANSWER_GROUP_SEQ_NBR =REPEAT_BLOCK_OUT_BASE.ANSWER_GROUP_SEQ_NBR
AND METADATA_OUT.BLOCK_NM = REPEAT_BLOCK_OUT_BASE.BLOCK_NM ;
QUIT;



PROC SORT DATA=METADATA_MERGED_INIT ; BY INVESTIGATION_KEY;RUN;

PROC TRANSPOSE DATA=METADATA_MERGED_INIT OUT=INVESTIGATION_REPEAT_DATE;
	VAR dateColumn;
	ID COL1;
    BY INVESTIGATION_KEY;
RUN;

DATA INVESTIGATION_REPEAT_DATE;
SET INVESTIGATION_REPEAT_DATE;
DROP _NAME_;
RUN;



PROC SQL;
CREATE TABLE REPEAT_ALL AS SELECT DISTINCT RDB_COLUMN_NM, USER_DEFINED_COLUMN_NM  FROM D_INV_REPEAT_METADATA;
QUIT;

DATA REPEAT_ALL;
SET REPEAT_ALL;
LENGTH USER_DEFINED_COLUMN_NM_ALL $4000;
USER_DEFINED_COLUMN_NM_ALL = COMPRESS(USER_DEFINED_COLUMN_NM || '_ALL');
DROP USER_DEFINED_COLUMN_NM;
RUN;

PROC SQL;
CREATE TABLE REPEAT_BLOCK_METADATA_OUT AS SELECT
REPEAT_BLOCK_OUT_ALL.*, REPEAT_ALL.USER_DEFINED_COLUMN_NM_ALL FROM
REPEAT_ALL LEFT OUTER JOIN REPEAT_BLOCK_OUT_ALL 
ON UPCASE(REPEAT_ALL.RDB_COLUMN_NM) = UPCASE(REPEAT_BLOCK_OUT_ALL.RDB_COLUMN_NM);
QUIT;


 PROC SORT DATA=REPEAT_BLOCK_METADATA_OUT ; BY INVESTIGATION_KEY ;RUN;

PROC TRANSPOSE DATA=REPEAT_BLOCK_METADATA_OUT OUT=REPEAT_BLOCK_DATE_ALL;
	VAR ANSWER_DESC21;
	ID USER_DEFINED_COLUMN_NM_ALL;
    BY INVESTIGATION_KEY ;
RUN;

DATA REPEAT_BLOCK_DATE_ALL;
SET REPEAT_BLOCK_DATE_ALL;
DROP _NAME_;
RUN;
%MEND REPEATDATEDATA;

