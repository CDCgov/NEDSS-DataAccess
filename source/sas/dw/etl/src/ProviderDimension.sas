PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();
CREATE TABLE S_PROVIDER_INIT AS 
SELECT 
PERSON.PERSON_UID AS PROVIDER_UID 'PROVIDER_UID',
PERSON.LOCAL_ID AS PROVIDER_LOCAL_ID 'PROVIDER_LOCAL_ID',              
PERSON.DESCRIPTION AS PROVIDER_GENERAL_COMMENTS 'PROVIDER_GENERAL_COMMENTS',      
PERSON.ELECTRONIC_IND AS PROVIDER_ENTRY_METHOD 'PROVIDER_ENTRY_METHOD',
PERSON.PERSON_PARENT_UID AS PROVIDER_MPR_UID 'PROVIDER_MPR_UID', 
PERSON.LAST_CHG_TIME AS PROVIDER_LAST_CHANGE_TIME 'PROVIDER_LAST_CHANGE_TIME',
PERSON.ADD_TIME AS PROVIDER_ADD_TIME 'PROVIDER_ADD_TIME',
PERSON.RECORD_STATUS_CD AS PROVIDER_RECORD_STATUS 'PROVIDER_RECORD_STATUS',
PERSON.ADD_USER_ID,
PERSON.LAST_CHG_USER_ID
FROM NBS_ODS.PERSON WHERE PERSON.CD='PRV'
	AND PERSON.LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER_LAST.START_DATE) FROM  ACTIVITY_LOG_MASTER_LAST);
CREATE TABLE PROVIDER_UID_COLL AS SELECT PROVIDER_UID  FROM S_PROVIDER_INIT;

CREATE TABLE  S_INITPROVIDER AS SELECT A.*, 
B.FIRST_NM AS ADD_USER_FIRST_NAME 'ADD_USER_FIRST_NAME', B.LAST_NM AS ADD_USER_LAST_NAME 'ADD_USER_LAST_NAME', 
C.FIRST_NM AS CHG_USER_FIRST_NAME 'CHG_USER_FIRST_NAME', C.LAST_NM AS CHG_USER_LAST_NAME 'CHG_USER_LAST_NAME' 
FROM
S_PROVIDER_INIT A LEFT OUTER JOIN NBS_RDB.USER_PROFILE B
ON A.ADD_USER_ID=B.NEDSS_ENTRY_ID
LEFT OUTER JOIN NBS_RDB.USER_PROFILE C
ON A.ADD_USER_ID=C.NEDSS_ENTRY_ID;
QUIT;
DATA S_INITPROVIDER;
SET S_INITPROVIDER;
  	IF PROVIDER_RECORD_STATUS = '' THEN PROVIDER_RECORD_STATUS = 'ACTIVE';
  	IF PROVIDER_RECORD_STATUS = 'SUPERCEDED' THEN PROVIDER_RECORD_STATUS = 'INACTIVE' ;
  	IF PROVIDER_RECORD_STATUS = 'LOG_DEL' THEN PROVIDER_RECORD_STATUS = 'INACTIVE' ;
  	IF LENGTH(COMPRESS(ADD_USER_FIRST_NAME))> 0 AND LENGTHN(COMPRESS(ADD_USER_LAST_NAME))>0 THEN PROVIDER_ADDED_BY= TRIM(ADD_USER_LAST_NAME)|| ', ' ||TRIM(ADD_USER_FIRST_NAME);
	ELSE IF LENGTHN(COMPRESS(ADD_USER_FIRST_NAME))> 0 THEN PROVIDER_ADDED_BY= TRIM(ADD_USER_FIRST_NAME);
	ELSE IF LENGTHN(COMPRESS(ADD_USER_LAST_NAME))> 0 THEN PROVIDER_ADDED_BY= TRIM(ADD_USER_LAST_NAME);
	IF LENGTH(COMPRESS(CHG_USER_FIRST_NAME))> 0 AND LENGTHN(COMPRESS(CHG_USER_LAST_NAME))>0 THEN PROVIDER_LAST_UPDATED_BY= TRIM(CHG_USER_LAST_NAME)|| ', ' ||TRIM(CHG_USER_FIRST_NAME);
	ELSE IF LENGTHN(COMPRESS(CHG_USER_FIRST_NAME))> 0 THEN PROVIDER_LAST_UPDATED_BY= TRIM(CHG_USER_FIRST_NAME);
	ELSE IF LENGTHN(COMPRESS(CHG_USER_LAST_NAME))> 0 THEN PROVIDER_LAST_UPDATED_BY= TRIM(CHG_USER_LAST_NAME);
RUN;
PROC SQL;
CREATE TABLE S_PROVIDER_NAME AS SELECT FIRST_NM,LAST_NM,MIDDLE_NM,NM_SUFFIX,NM_PREFIX,NM_DEGREE, NM_USE_CD,PERSON_NAME.PERSON_UID AS  PROVIDER_UID ' PROVIDER_UID' FROM  PROVIDER_UID_COLL INNER JOIN NBS_ODS.PERSON_NAME
ON PROVIDER_UID_COLL.PROVIDER_UID=PERSON_NAME.PERSON_UID
WHERE NM_USE_CD ='L' ORDER BY PERSON_NAME.PERSON_UID, NM_USE_CD;
QUIT;
DATA S_PROVIDER_NAME; 
SET S_PROVIDER_NAME;
LENGTH PROVIDER_FIRST_NAME $50;
LENGTH PROVIDER_LAST_NAME $50;
LENGTH PROVIDER_MIDDLE_NAME $50;
LENGTH PROVIDER_ALIAS_NICKNAME $50;
LENGTH PROVIDER_NAME_DEGREE $50;
SET S_PROVIDER_NAME; BY PROVIDER_UID; 
RETAIN PROVIDER_FIRST_NAME;
RETAIN PROVIDER_LAST_NAME;
RETAIN PROVIDER_MIDDLE_NAME;
RETAIN PROVIDER_ALIAS_NICKNAME;
RETAIN PROVIDER_NAME_SUFFIX;
RETAIN PROVIDER_NAME_PREFIX;
RETAIN PROVIDER_NAME_DEGREE;
IF FIRST.PROVIDER_UID THEN IF NM_USE_CD= 'L' THEN PROVIDER_FIRST_NAME=FIRST_NM;
IF NM_USE_CD= 'L' THEN PROVIDER_LAST_NAME=LAST_NM;
IF NM_USE_CD= 'L' THEN PROVIDER_MIDDLE_NAME=MIDDLE_NM;
IF NM_USE_CD= 'L' THEN NM_SUFFIX=NM_SUFFIX;
IF NM_USE_CD= 'L' THEN NM_PREFIX=NM_PREFIX;
IF NM_USE_CD= 'L' THEN NM_DEGREE=NM_DEGREE;	
IF LAST.PROVIDER_UID;
PROVIDER_NAME_SUFFIX=PUT(NM_SUFFIX, $DEM107F.);
PROVIDER_NAME_PREFIX=PUT(NM_PREFIX, $DEM101F.);
PROVIDER_NAME_DEGREE=PUT(NM_DEGREE, $DEM108F.);
DROP 
FIRST_NM LAST_NM MIDDLE_NM NM_SUFFIX NM_USE_CD NM_DEGREE;
RUN; 
PROC SQL;
CREATE TABLE S_PROVIDER_WITH_NM AS SELECT S_INITPROVIDER.*, S_PROVIDER_NAME.*
FROM S_INITPROVIDER LEFT OUTER JOIN S_PROVIDER_NAME
ON S_INITPROVIDER.PROVIDER_UID= S_PROVIDER_NAME.PROVIDER_UID;
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST; DELETE S_INITPROVIDER S_PROVIDER_NAME; RUN; QUIT;
PROC SQL;
CREATE TABLE S_POSTAL_LOCATOR AS
SELECT 
POSTAL_LOCATOR.CITY_DESC_TXT AS PROVIDER_CITY 'PROVIDER_CITY',             
POSTAL_LOCATOR.CNTRY_CD	AS PROVIDER_COUNTRY 'PROVIDER_COUNTRY',            
POSTAL_LOCATOR.CNTY_CD	AS PROVIDER_COUNTY_CODE 'PROVIDER_COUNTY_CODE',              
POSTAL_LOCATOR.STATE_CD	AS PROVIDER_STATE_CODE 'PROVIDER_STATE_CODE',               
POSTAL_LOCATOR.STREET_ADDR1 AS PROVIDER_STREET_ADDRESS_1 'PROVIDER_STREET_ADDRESS_1',
POSTAL_LOCATOR.STREET_ADDR2	AS PROVIDER_STREET_ADDRESS_2 'PROVIDER_STREET_ADDRESS_2',
POSTAL_LOCATOR.ZIP_CD AS PROVIDER_ZIP 'PROVIDER_ZIP',
STATE_CODE.CODE_DESC_TXT AS PROVIDER_STATE_DESC 'PROVIDER_STATE_DESC',
STATE_COUNTY_CODE_VALUE.CODE_DESC_TXT AS PROVIDER_COUNTY_DESC 'PROVIDER_COUNTY_DESC',
COUNTRY_CODE.CODE_SHORT_DESC_TXT AS PROVIDER_COUNTRY_DESC 'PROVIDER_COUNTRY_DESC',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS PROVIDER_ADDRESS_COMMENTS 'PROVIDER_ADDRESS_COMMENTS',
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
FROM PROVIDER_UID_COLL LEFT OUTER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON PROVIDER_UID_COLL.PROVIDER_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
LEFT OUTER JOIN NBS_ODS.POSTAL_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=POSTAL_LOCATOR.POSTAL_LOCATOR_UID
LEFT OUTER JOIN NBS_SRT.STATE_CODE
ON STATE_CODE.STATE_CD=POSTAL_LOCATOR.STATE_CD
LEFT OUTER JOIN NBS_SRT.COUNTRY_CODE
ON COUNTRY_CODE.CODE=POSTAL_LOCATOR.CNTRY_CD
LEFT OUTER JOIN NBS_SRT.STATE_COUNTY_CODE_VALUE
ON STATE_COUNTY_CODE_VALUE.CODE=POSTAL_LOCATOR.CNTY_CD	
WHERE ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='O'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='PST';
QUIT;
DATA S_POSTAL_LOCATOR;
SET S_POSTAL_LOCATOR;
IF LENGTHN(TRIM(PROVIDER_STATE_DESC))>1 THEN PROVIDER_STATE=PROVIDER_STATE_DESC;
IF LENGTHN(TRIM(PROVIDER_COUNTY_DESC))>1 THEN PROVIDER_COUNTY=PROVIDER_COUNTY_DESC;
IF LENGTHN(TRIM(PROVIDER_COUNTRY_DESC))>1 THEN PROVIDER_COUNTRY=PROVIDER_COUNTRY_DESC;
RUN;
PROC SORT DATA=S_POSTAL_LOCATOR NODUPKEY; BY ENTITY_UID; RUN;
PROC SQL;
CREATE TABLE S_TELE_LOCATOR_OFFICE AS
SELECT DISTINCT
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID,
TELE_LOCATOR.EXTENSION_TXT AS PROVIDER_PHONE_EXT_WORK 'PROVIDER_PHONE_EXT_WORK',        
TELE_LOCATOR.PHONE_NBR_TXT AS PROVIDER_PHONE_WORK 'PROVIDER_PHONE_WORK', 
TELE_LOCATOR.EMAIL_ADDRESS AS PROVIDER_EMAIL_WORK 'PROVIDER_EMAIL_WORK',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS PROVIDER_PHONE_COMMENTS 'PROVIDER_PHONE_COMMENTS'
FROM PROVIDER_UID_COLL INNER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON PROVIDER_UID_COLL.PROVIDER_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID
WHERE ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='O'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE';
QUIT;
PROC SORT DATA=S_TELE_LOCATOR_OFFICE NODUPKEY; BY ENTITY_UID; RUN;
PROC SQL;
CREATE TABLE S_TELE_LOCATOR_CELL AS
SELECT DISTINCT
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID,
TELE_LOCATOR.PHONE_NBR_TXT AS PROVIDER_PHONE_CELL 'PROVIDER_PHONE_CELL'
FROM PROVIDER_UID_COLL INNER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON PROVIDER_UID_COLL.PROVIDER_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID
WHERE ENTITY_LOCATOR_PARTICIPATION.CD='CP'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE';
QUIT;
PROC SORT DATA=S_TELE_LOCATOR_CELL NODUPKEY; BY ENTITY_UID; RUN;
PROC SQL;
CREATE TABLE S_LOCATOR AS SELECT S_POSTAL_LOCATOR.*,S_TELE_LOCATOR_OFFICE.*, S_TELE_LOCATOR_CELL.*, PROVIDER_UID_COLL.PROVIDER_UID
FROM PROVIDER_UID_COLL LEFT OUTER JOIN  S_TELE_LOCATOR_OFFICE ON
PROVIDER_UID_COLL.PROVIDER_UID=S_TELE_LOCATOR_OFFICE.ENTITY_UID
LEFT OUTER JOIN S_TELE_LOCATOR_CELL ON
PROVIDER_UID_COLL.PROVIDER_UID=S_TELE_LOCATOR_CELL.ENTITY_UID
LEFT OUTER JOIN  S_POSTAL_LOCATOR ON
PROVIDER_UID_COLL.PROVIDER_UID=S_POSTAL_LOCATOR.ENTITY_UID;
QUIT;
PROC SORT DATA=S_LOCATOR NODUPKEY; BY PROVIDER_UID; RUN;
PROC DATASETS LIBRARY = WORK NOLIST;DELETE S_POSTAL_LOCATOR S_TELE_LOCATOR_OFFICE S_TELE_LOCATOR_CELL;RUN;QUIT;
PROC SQL;
CREATE TABLE QEC_ENTITY_ID AS SELECT DISTINCT PROVIDER_UID, ROOT_EXTENSION_TXT, ASSIGNING_AUTHORITY_CD  
FROM PROVIDER_UID_COLL LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON PROVIDER_UID_COLL.PROVIDER_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'QEC';
QUIT;
PROC SORT DATA=QEC_ENTITY_ID NODUPKEY; BY PROVIDER_UID; RUN;
PROC SQL;
CREATE TABLE PRN_ENTITY_ID AS SELECT DISTINCT PROVIDER_UID, ROOT_EXTENSION_TXT, ASSIGNING_AUTHORITY_CD  
FROM PROVIDER_UID_COLL LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON PROVIDER_UID_COLL.PROVIDER_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'PRN';
QUIT;
PROC SORT DATA=PRN_ENTITY_ID NODUPKEY; BY PROVIDER_UID; RUN;
PROC SQL;
CREATE TABLE S_PROVIDER_FINAL AS SELECT S_PROVIDER_WITH_NM.*, S_LOCATOR.*, QEC_ENTITY_ID.ROOT_EXTENSION_TXT AS PROVIDER_QUICK_CODE 'PROVIDER_QUICK_CODE', 
PRN_ENTITY_ID.ROOT_EXTENSION_TXT AS PROVIDER_REGISTRATION_NUM 'PROVIDER_REGISTRATION_NUM', PRN_ENTITY_ID.ASSIGNING_AUTHORITY_CD AS PROVIDER_REGISRATION_NUM_AUTH 'PROVIDER_REGISRATION_NUM_AUTH'
FROM S_PROVIDER_WITH_NM LEFT OUTER JOIN  S_LOCATOR 
ON S_PROVIDER_WITH_NM.PROVIDER_UID=S_LOCATOR.PROVIDER_UID
LEFT OUTER JOIN QEC_ENTITY_ID
ON  S_PROVIDER_WITH_NM.PROVIDER_UID= QEC_ENTITY_ID.PROVIDER_UID
LEFT OUTER JOIN PRN_ENTITY_ID
ON  S_PROVIDER_WITH_NM.PROVIDER_UID= PRN_ENTITY_ID.PROVIDER_UID;
QUIT;
PROC SORT DATA=S_PROVIDER_FINAL NODUPKEY; BY PROVIDER_UID; RUN;
%DBLOAD (S_PROVIDER, S_PROVIDER_FINAL);
PROC DATASETS LIBRARY = WORK NOLIST;DELETE S_PROVIDER_WITH_NM S_LOCATOR QEC_ENTITY_ID PROVIDER_UID_COLL PRN_ENTITY_ID;RUN;QUIT;
PROC SQL;
CREATE TABLE L_PROVIDER_N AS
	SELECT DISTINCT S_PROVIDER.PROVIDER_UID  FROM NBS_RDB.S_PROVIDER
	EXCEPT SELECT L_PROVIDER.PROVIDER_UID FROM  NBS_RDB.L_PROVIDER;
CREATE TABLE L_PROVIDER_E AS
	SELECT S_PROVIDER.PROVIDER_UID, L_PROVIDER.PROVIDER_KEY
		FROM NBS_RDB.S_PROVIDER, NBS_RDB.L_PROVIDER
WHERE S_PROVIDER.PROVIDER_UID= L_PROVIDER.PROVIDER_UID;
ALTER TABLE L_PROVIDER_N ADD PROVIDER_KEY_MAX_VAL NUMERIC;
UPDATE L_PROVIDER_N SET PROVIDER_KEY_MAX_VAL=(SELECT MAX(PROVIDER_KEY) FROM NBS_RDB.L_PROVIDER);
QUIT;
%ASSIGN_ADDITIONAL_KEY (L_PROVIDER_N, PROVIDER_KEY);
PROC SORT DATA=L_PROVIDER_N NODUPKEY; BY PROVIDER_KEY; RUN;
DATA L_PROVIDER_N;
SET L_PROVIDER_N;
IF PROVIDER_KEY_MAX_VAL  ~=. THEN PROVIDER_KEY= PROVIDER_KEY+PROVIDER_KEY_MAX_VAL;
IF PROVIDER_KEY_MAX_VAL  =. THEN PROVIDER_KEY= PROVIDER_KEY+1;
DROP PROVIDER_KEY_MAX_VAL;
RUN;
%DBLOAD (L_PROVIDER, L_PROVIDER_N);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_PROVIDER_FINAL),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.S_PROVIDER),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=(SELECT COUNT(*) FROM L_PROVIDER_N),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM L_PROVIDER_E),
PROCESS_UID= (SELECT PROCESS_UID FROM NBS_RDB.ETL_PROCESS WHERE PROCESS_NAME='S_PROVIDER');
QUIT;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ROW_COUNT_UPDATE<0 THEN ROW_COUNT_UPDATE=0;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' ROWS UPDATED IN S_PROVIDER TABLE.'||
' THERE IS(ARE) NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_PROVIDER TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
PROC SQL;
CREATE TABLE D_PROVIDER_N AS 
	SELECT * FROM NBS_RDB.S_PROVIDER , L_PROVIDER_N
WHERE S_PROVIDER.PROVIDER_UID=L_PROVIDER_N.PROVIDER_UID;
CREATE TABLE D_PROVIDER_E AS 
	SELECT * FROM NBS_RDB.S_PROVIDER , L_PROVIDER_E
WHERE S_PROVIDER.PROVIDER_UID=L_PROVIDER_E.PROVIDER_UID;
QUIT;
PROC SORT DATA=D_PROVIDER_N NODUPKEY; BY PROVIDER_KEY;RUN;
DATA NBS_RDB.D_PROVIDER;
 MODIFY NBS_RDB.D_PROVIDER D_PROVIDER_E;
 BY PROVIDER_KEY;
RUN;
%DBLOAD (D_PROVIDER, D_PROVIDER_N);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.S_PROVIDER),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.D_PROVIDER),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=(SELECT COUNT(*) FROM D_PROVIDER_N),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM D_PROVIDER_E),
PROCESS_UID= (SELECT PROCESS_UID FROM NBS_RDB.ETL_PROCESS WHERE PROCESS_NAME='D_PROVIDER');
QUIT;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ACTIVITY_LOG_DETAIL_UID= ACTIVITY_LOG_DETAIL_UID +1;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN D_PROVIDER TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_PROVIDER TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
PROC DATASETS LIBRARY = WORK NOLIST;DELETE L_PROVIDER_E L_PROVIDER_N D_PROVIDER_E D_PROVIDER_N S_PROVIDER_FINAL;RUN;QUIT;

