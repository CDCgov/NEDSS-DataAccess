%macro assign_additional_key (ds, key);
 data &ds;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_key;
PROC SQL;
CREATE TABLE 
	RDBDATA.PHC_UIDS AS 
SELECT 
	PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID LENGTH =8 AS PAGE_CASE_UID 'PAGE_CASE_UID', 
	CASE_MANAGEMENT_UID, 
	INVESTIGATION_FORM_CD, 
	CD, 
	LAST_CHG_TIME 
FROM 
	NBS_ODS.PUBLIC_HEALTH_CASE  
LEFT OUTER JOIN 
	NBS_ODS.CASE_MANAGEMENT
ON
	PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID= CASE_MANAGEMENT.PUBLIC_HEALTH_CASE_UID
LEFT OUTER JOIN 
	NBS_SRT.CONDITION_CODE
ON 
	CONDITION_CODE.CONDITION_CD= PUBLIC_HEALTH_CASE.CD
AND 
	INVESTIGATION_FORM_CD 
NOT IN 
	( 'INV_FORM_BMDGAS','INV_FORM_BMDGBS','INV_FORM_BMDGEN','INV_FORM_BMDNM','INV_FORM_BMDSP','INV_FORM_GEN','INV_FORM_HEPA','INV_FORM_HEPBV','INV_FORM_HEPCV','INV_FORM_HEPGEN','INV_FORM_MEA','INV_FORM_PER','INV_FORM_RUB','INV_FORM_RVCT','INV_FORM_VAR');
QUIT;
PROC SQL;
CREATE TABLE 
	PHC_UIDS 
AS SELECT 
	PAGE_CASE_UID,
	INVESTIGATION_FORM_CD,
	CD,
	LAST_CHG_TIME
FROM 
	RDBDATA.PHC_UIDS;
QUIT;
PROC SQL;
CREATE TABLE 
	PHC_CASE_UIDS 
AS SELECT 
	PAGE_CASE_UID,
	INVESTIGATION_FORM_CD,
	CD,
	LAST_CHG_TIME
FROM 
	RDBDATA.PHC_UIDS
WHERE 
	CASE_MANAGEMENT_UID IS NULL;
QUIT;
%include etlpgm (Page_Case_Staging.sas);
%include etlpgm (Page_Case_Lookup.sas);
%include etlpgm (Page_Case_Dimensional.sas);
%include etlpgm (Page_Case_Entity.sas);

PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTORE AS
SELECT 
	F_S_INV_CASE.ADD_TIME,F_S_INV_CASE.LAST_CHG_TIME, F_S_INV_CASE.PATIENT_UID, PATIENT.PATIENT_KEY AS PATIENT_KEY 'PATIENT_KEY',
	F_S_INV_CASE.PAGE_CASE_UID, F_S_INV_CASE.HOSPITAL_UID, HOSPITAL.ORGANIZATION_KEY AS HOSPITAL_KEY 'HOSPITAL_KEY',
	F_S_INV_CASE.ORG_AS_REPORTER_UID, REPORTERORG.ORGANIZATION_KEY AS ORG_AS_REPORTER_KEY 'ORG_AS_REPORTER_KEY',
	F_S_INV_CASE.PERSON_AS_REPORTER_UID, PERSONREPORTER.PROVIDER_KEY AS PERSON_AS_REPORTER_KEY 'PERSON_AS_REPORTER_KEY',
	F_S_INV_CASE.PHYSICIAN_UID, PHYSICIAN.PROVIDER_KEY AS PHYSICIAN_KEY 'PHYSICIAN_KEY',
	F_S_INV_CASE.INVESTIGATOR_UID, PROVIDER.PROVIDER_KEY AS INVESTIGATOR_KEY 'INVESTIGATOR_KEY',
	INVESTIGATION.INVESTIGATION_KEY, CONDITION.CONDITION_KEY,
	COALESCE(LOC.GEOCODING_LOCATION_KEY,1)	AS GEOCODING_LOCATION_KEY

FROM 
	F_S_INV_CASE LEFT OUTER JOIN NBS_RDB.D_PATIENT PATIENT	
ON 
	F_S_INV_CASE.PATIENT_UID= PATIENT.PATIENT_UID
	LEFT OUTER JOIN NBS_RDB.D_ORGANIZATION  HOSPITAL
ON 
	F_S_INV_CASE.HOSPITAL_UID= HOSPITAL.ORGANIZATION_UID
	LEFT OUTER JOIN NBS_RDB.D_ORGANIZATION REPORTERORG
ON 
	F_S_INV_CASE.ORG_AS_REPORTER_UID= REPORTERORG.ORGANIZATION_UID
	LEFT OUTER JOIN NBS_RDB.D_PROVIDER PERSONREPORTER
ON 
	F_S_INV_CASE.PERSON_AS_REPORTER_UID= PERSONREPORTER.PROVIDER_UID
	LEFT OUTER JOIN NBS_RDB.D_PROVIDER PROVIDER
ON 
	F_S_INV_CASE.INVESTIGATOR_UID= PROVIDER.PROVIDER_UID
	LEFT OUTER JOIN NBS_RDB.D_PROVIDER PHYSICIAN
ON 
	F_S_INV_CASE.PHYSICIAN_UID= PHYSICIAN.PROVIDER_UID
	LEFT OUTER JOIN NBS_RDB.INVESTIGATION  INVESTIGATION
ON 
	F_S_INV_CASE.PAGE_CASE_UID= INVESTIGATION.CASE_UID
	LEFT OUTER JOIN PHC_CASE_UIDS  CASE_UID
ON 
	F_S_INV_CASE.PAGE_CASE_UID= CASE_UID.PAGE_CASE_UID
	LEFT OUTER JOIN NBS_RDB.CONDITION CONDITION
ON 
	PHC_CASE_UIDS.CD= CONDITION.CONDITION_CD
	LEFT JOIN NBS_RDB.GEOCODING_LOCATION AS LOC
ON LOC.ENTITY_UID = PATIENT.PATIENT_UID;
QUIT;
DATA ENTITY_KEYSTORE;
SET ENTITY_KEYSTORE;
	IF HOSPITAL_KEY =. THEN HOSPITAL_KEY=1;
	IF ORG_AS_REPORTER_KEY =. THEN ORG_AS_REPORTER_KEY=1;
	IF PERSON_AS_REPORTER_KEY =. THEN PERSON_AS_REPORTER_KEY=1;
	IF PHYSICIAN_KEY =. THEN PHYSICIAN_KEY=1;
	IF INVESTIGATOR_KEY =. THEN INVESTIGATOR_KEY=1;
	IF INV_ADMINISTRATIVE_KEY  =. THEN INV_ADMINISTRATIVE_KEY=1;
	IF INV_CLINICAL_KEY  =. THEN INV_CLINICAL_KEY=1;
	IF INV_COMPLICATION_KEY =. THEN INV_COMPLICATION_KEY=1;
	IF INV_CONTACT_KEY =. THEN INV_CONTACT_KEY=1;
	IF INV_DEATH_KEY =. THEN INV_DEATH_KEY=1;
	IF INV_EPIDEMIOLOGY_KEY =. THEN INV_EPIDEMIOLOGY_KEY=1;
	IF INV_HIV_KEY =. THEN INV_HIV_KEY=1;
	IF INV_PATIENT_OBS_KEY =. THEN INV_PATIENT_OBS_KEY=1;
	IF INV_ISOLATE_TRACKING_KEY =. THEN INV_ISOLATE_TRACKING_KEY=1;
	IF INV_LAB_FINDING_KEY =. THEN INV_LAB_FINDING_KEY=1;
	IF INV_MEDICAL_HISTORY_KEY =. THEN INV_MEDICAL_HISTORY_KEY=1;
	IF INV_MOTHER_KEY =. THEN INV_MOTHER_KEY=1;
	IF INV_OTHER_KEY =. THEN INV_OTHER_KEY=1;
	IF INV_PREGNANCY_BIRTH_KEY =. THEN INV_PREGNANCY_BIRTH_KEY=1;
	IF INV_RESIDENCY_KEY =. THEN INV_RESIDENCY_KEY=1;
	IF INV_RISK_FACTOR_KEY =. THEN INV_RISK_FACTOR_KEY=1;
	IF INV_SOCIAL_HISTORY_KEY =. THEN INV_SOCIAL_HISTORY_KEY=1;
	IF INV_SYMPTOM_KEY =. THEN INV_SYMPTOM_KEY=1;
	IF INV_TREATMENT_KEY =. THEN INV_TREATMENT_KEY=1;
	IF INV_TRAVEL_KEY =. THEN INV_TRAVEL_KEY=1;
	IF INV_UNDER_CONDITION_KEY =. THEN INV_UNDER_CONDITION_KEY=1;
	IF INV_VACCINATION_KEY =. THEN INV_VACCINATION_KEY=1;

RUN;
 PROC SORT DATA=ENTITY_KEYSTORE NODUPKEY; BY PAGE_CASE_UID; RUN;
PROC SQL;
create table L_INV_ADMINISTRATIVE as select L_INV_ADMINISTRATIVE.PAGE_CASE_UID , L_INV_ADMINISTRATIVE.D_INV_ADMINISTRATIVE_KEY FROM NBS_RDB.L_INV_ADMINISTRATIVE ORDER BY PAGE_CASE_UID;
create table L_INV_CLINICAL as select L_INV_CLINICAL.PAGE_CASE_UID , L_INV_CLINICAL.D_INV_CLINICAL_KEY FROM NBS_RDB.L_INV_CLINICAL ORDER BY PAGE_CASE_UID;
create table L_INV_COMPLICATION as select L_INV_COMPLICATION.PAGE_CASE_UID , L_INV_COMPLICATION.D_INV_COMPLICATION_KEY FROM NBS_RDB.L_INV_COMPLICATION ORDER BY PAGE_CASE_UID;
create table L_INV_CONTACT as select L_INV_CONTACT.PAGE_CASE_UID , L_INV_CONTACT.D_INV_CONTACT_KEY FROM NBS_RDB.L_INV_CONTACT ORDER BY PAGE_CASE_UID;
create table L_INV_DEATH as select L_INV_DEATH.PAGE_CASE_UID , L_INV_DEATH.D_INV_DEATH_KEY FROM NBS_RDB.L_INV_DEATH ORDER BY PAGE_CASE_UID;
create table L_INV_EPIDEMIOLOGY as select L_INV_EPIDEMIOLOGY.PAGE_CASE_UID , L_INV_EPIDEMIOLOGY.D_INV_EPIDEMIOLOGY_KEY FROM NBS_RDB.L_INV_EPIDEMIOLOGY ORDER BY PAGE_CASE_UID;
create table L_INV_HIV as select L_INV_HIV.PAGE_CASE_UID , L_INV_HIV.D_INV_HIV_KEY FROM NBS_RDB.L_INV_HIV ORDER BY PAGE_CASE_UID;
create table L_INV_PATIENT_OBS as select L_INV_PATIENT_OBS.PAGE_CASE_UID , L_INV_PATIENT_OBS.D_INV_PATIENT_OBS_KEY FROM NBS_RDB.L_INV_PATIENT_OBS ORDER BY PAGE_CASE_UID;
create table L_INV_ISOLATE_TRACKING as select L_INV_ISOLATE_TRACKING.PAGE_CASE_UID , L_INV_ISOLATE_TRACKING.D_INV_ISOLATE_TRACKING_KEY FROM NBS_RDB.L_INV_ISOLATE_TRACKING ORDER BY PAGE_CASE_UID;
create table L_INV_LAB_FINDING as select L_INV_LAB_FINDING.PAGE_CASE_UID , L_INV_LAB_FINDING.D_INV_LAB_FINDING_KEY FROM NBS_RDB.L_INV_LAB_FINDING ORDER BY PAGE_CASE_UID;
create table L_INV_MEDICAL_HISTORY as select L_INV_MEDICAL_HISTORY.PAGE_CASE_UID , L_INV_MEDICAL_HISTORY.D_INV_MEDICAL_HISTORY_KEY FROM NBS_RDB.L_INV_MEDICAL_HISTORY ORDER BY PAGE_CASE_UID;
create table L_INV_MOTHER as select L_INV_MOTHER.PAGE_CASE_UID , L_INV_MOTHER.D_INV_MOTHER_KEY FROM NBS_RDB.L_INV_MOTHER ORDER BY PAGE_CASE_UID;
create table L_INV_OTHER as select L_INV_OTHER.PAGE_CASE_UID , L_INV_OTHER.D_INV_OTHER_KEY FROM NBS_RDB.L_INV_OTHER ORDER BY PAGE_CASE_UID;
create table L_INV_PREGNANCY_BIRTH as select L_INV_PREGNANCY_BIRTH.PAGE_CASE_UID , L_INV_PREGNANCY_BIRTH.D_INV_PREGNANCY_BIRTH_KEY FROM NBS_RDB.L_INV_PREGNANCY_BIRTH ORDER BY PAGE_CASE_UID;
create table L_INV_RESIDENCY as select L_INV_RESIDENCY.PAGE_CASE_UID , L_INV_RESIDENCY.D_INV_RESIDENCY_KEY FROM NBS_RDB.L_INV_RESIDENCY ORDER BY PAGE_CASE_UID;
create table L_INV_RISK_FACTOR as select L_INV_RISK_FACTOR.PAGE_CASE_UID , L_INV_RISK_FACTOR.D_INV_RISK_FACTOR_KEY FROM NBS_RDB.L_INV_RISK_FACTOR ORDER BY PAGE_CASE_UID;
create table L_INV_SOCIAL_HISTORY as select L_INV_SOCIAL_HISTORY.PAGE_CASE_UID , L_INV_SOCIAL_HISTORY.D_INV_SOCIAL_HISTORY_KEY FROM NBS_RDB.L_INV_SOCIAL_HISTORY ORDER BY PAGE_CASE_UID;
create table L_INV_SYMPTOM as select L_INV_SYMPTOM.PAGE_CASE_UID , L_INV_SYMPTOM.D_INV_SYMPTOM_KEY FROM NBS_RDB.L_INV_SYMPTOM ORDER BY PAGE_CASE_UID;
create table L_INV_TREATMENT as select L_INV_TREATMENT.PAGE_CASE_UID , L_INV_TREATMENT.D_INV_TREATMENT_KEY FROM NBS_RDB.L_INV_TREATMENT ORDER BY PAGE_CASE_UID;
create table L_INV_TRAVEL as select L_INV_TRAVEL.PAGE_CASE_UID , L_INV_TRAVEL.D_INV_TRAVEL_KEY FROM NBS_RDB.L_INV_TRAVEL ORDER BY PAGE_CASE_UID;
create table L_INV_UNDER_CONDITION as select L_INV_UNDER_CONDITION.PAGE_CASE_UID , L_INV_UNDER_CONDITION.D_INV_UNDER_CONDITION_KEY FROM NBS_RDB.L_INV_UNDER_CONDITION ORDER BY PAGE_CASE_UID;
create table L_INV_VACCINATION as select L_INV_VACCINATION.PAGE_CASE_UID , L_INV_VACCINATION.D_INV_VACCINATION_KEY FROM NBS_RDB.L_INV_VACCINATION ORDER BY PAGE_CASE_UID;
/*
commented out code after discussing with Christi: no dimension exists with this this value
create table L_INV_STD as select L_INV_STD.PAGE_CASE_UID , L_INV_STD.D_INV_STD_KEY FROM NBS_RDB.L_INV_STD ORDER BY PAGE_CASE_UID;
*/
quit;
PROC SORT DATA=L_INV_ADMINISTRATIVE ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_CLINICAL ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_COMPLICATION ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_CONTACT ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_DEATH ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_EPIDEMIOLOGY ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_HIV ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_PATIENT_OBS ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_ISOLATE_TRACKING ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_LAB_FINDING ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_MEDICAL_HISTORY ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_MOTHER ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_OTHER ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_PREGNANCY_BIRTH ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_RESIDENCY ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_RISK_FACTOR ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_SOCIAL_HISTORY ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_SYMPTOM ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_TREATMENT ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_TRAVEL ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_UNDER_CONDITION ; BY PAGE_CASE_UID ;RUN;
PROC SORT DATA=L_INV_VACCINATION ; BY PAGE_CASE_UID ;RUN;
/*
commented out code after discussing with Christi: no dimension exists with this this value
PROC SORT DATA=L_INV_STD; BY PAGE_CASE_UID ;RUN;
*/
%include etlpgm (Repeated_Question_dimension.sas);
%include etlpgm (Repeated_Place_Dimension.sas);
Data RDBDATA.DIMENSIONAL_KEYS; 
MERGE 
L_INV_ADMINISTRATIVE
L_INV_CLINICAL
L_INV_COMPLICATION
L_INV_CONTACT L_INV_DEATH
L_INV_EPIDEMIOLOGY
L_INV_HIV
L_INV_PATIENT_OBS
L_INV_ISOLATE_TRACKING
L_INV_LAB_FINDING
L_INV_MEDICAL_HISTORY
L_INV_MOTHER
L_INV_OTHER
L_INV_PREGNANCY_BIRTH
L_INV_RESIDENCY
L_INV_RISK_FACTOR
L_INV_SOCIAL_HISTORY
L_INV_SYMPTOM
L_INV_TREATMENT
L_INV_TRAVEL
L_INV_UNDER_CONDITION
L_INV_VACCINATION
l_INVESTIGATION_REPEAT
/*
commented out code after discussing with Christi: no dimension exists with this this value
L_INV_STD
*/
L_INV_PLACE_REPEAT;
BY 
 PAGE_CASE_UID;
RUN;

PROC SQL;
DROP TABLE nbs_rdb.F_PAGE_CASE;
CREATE TABLE 
	F_PAGE_CASE AS 
SELECT     
	DIMENSIONAL_KEYS.*, 
	ENTITY_KEYSTORE.CONDITION_KEY,
	ENTITY_KEYSTORE.INVESTIGATION_KEY,
	ENTITY_KEYSTORE.PHYSICIAN_KEY,
	ENTITY_KEYSTORE.INVESTIGATOR_KEY,
	ENTITY_KEYSTORE.HOSPITAL_KEY,
	ENTITY_KEYSTORE.PATIENT_KEY,
	ENTITY_KEYSTORE.PERSON_AS_REPORTER_KEY AS PERSON_AS_REPORTER_KEY,
	ENTITY_KEYSTORE.ORG_AS_REPORTER_KEY AS ORG_AS_REPORTER_KEY,
	ENTITY_KEYSTORE.HOSPITAL_KEY AS HOSPITAL_KEY,
	ENTITY_KEYSTORE.GEOCODING_LOCATION_KEY,
	DATE.DATE_KEY AS ADD_DATE_KEY, DATE2.DATE_KEY AS LAST_CHG_DATE_KEY

FROM   
	RDBDATA.DIMENSIONAL_KEYS INNER JOIN ENTITY_KEYSTORE AS KEYSTORE 
ON DIMENSIONAL_KEYS.PAGE_CASE_UID = KEYSTORE.PAGE_CASE_UID 
LEFT OUTER JOIN NBS_RDB.RDB_DATE DATE 	
ON DATEPART(DATE.DATE_MM_DD_YYYY)=DATEPART(KEYSTORE.ADD_TIME)
LEFT OUTER JOIN NBS_RDB.RDB_DATE DATE2 
ON DATEPART(DATE2.DATE_MM_DD_YYYY)=DATEPART(KEYSTORE.LAST_CHG_TIME);
QUIT;
DATA F_PAGE_CASE;
SET F_PAGE_CASE;
IF D_INVESTIGATION_REPEAT_KEY= . THEN D_INVESTIGATION_REPEAT_KEY=1;
IF D_INV_PLACE_REPEAT_KEY=. THEN D_INV_PLACE_REPEAT_KEY=1;
DROP PAGE_CASE_UID;
RUN;
PROC SORT DATA=F_PAGE_CASE NODUPKEY; BY PATIENT_KEY; RUN;
%DBLOAD (F_PAGE_CASE, F_PAGE_CASE);

