%macro VAR_DATAMART;
PROC SQL;
	delete from nbs_rdb.VAR_DATAMART;
quit;
PROC SQL;
CREATE TABLE PATIENT AS 
	SELECT  f_VAR_pam.PERSON_key, PATIENT_PHONE_HOME AS PATIENT_PHONE_NUMBER_HOME 'PATIENT_PHONE_NUMBER_HOME' ,
	PATIENT_PHONE_EXT_HOME AS  PATIENT_PHONE_EXT_HOME 'PATIENT_PHONE_EXT_HOME', PATIENT_PHONE_WORK AS PATIENT_PHONE_NUMBER_WORK 'PATIENT_PHONE_NUMBER_WORK' ,
	PATIENT_PHONE_EXT_WORK AS  PATIENT_PHONE_EXT_WORK 'PATIENT_PHONE_EXT_WORK',
	PATIENT.PATIENT_LOCAL_ID AS PATIENT_LOCAL_ID 'PATIENT_LOCAL_ID',
	PATIENT.PATIENT_GENERAL_COMMENTS AS PATIENT_GENERAL_COMMENTS 'PATIENT_GENERAL_COMMENTS',
	PATIENT.PATIENT_LAST_NAME AS PATIENT_LAST_NAME 'PATIENT_LAST_NAME',
	PATIENT.PATIENT_FIRST_NAME AS  PATIENT_FIRST_NAME 'PATIENT_FIRST_NAME',
	PATIENT.PATIENT_MIDDLE_NAME AS PATIENT_MIDDLE_NAME 'PATIENT_MIDDLE_NAME',
	PATIENT.PATIENT_NAME_SUFFIX AS PATIENT_NAME_SUFFIX 'PATIENT_NAME_SUFFIX',
	PATIENT.PATIENT_DOB AS PATIENT_DOB 'PATIENT_DOB',
	PATIENT.PATIENT_AGE_REPORTED AS AGE_REPORTED 'AGE_REPORTED',
	PATIENT.PATIENT_AGE_REPORTED_UNIT AS AGE_REPORTED_UNIT 'AGE_REPORTED_UNIT',
	PATIENT.PATIENT_CURRENT_SEX AS PATIENT_CURRENT_SEX 'PATIENT_CURRENT_SEX',
	PATIENT.PATIENT_DECEASED_INDICATOR AS PATIENT_DECEASED_INDICATOR 'PATIENT_DECEASED_INDICATOR',
	PATIENT.PATIENT_DECEASED_DATE AS PATIENT_DECEASED_DATE 'PATIENT_DECEASED_DATE',
	PATIENT.PATIENT_MARITAL_STATUS AS PATIENT_MARITAL_STATUS 'PATIENT_MARITAL_STATUS',
	PATIENT.PATIENT_SSN,
	PATIENT.PATIENT_ETHNICITY as PATIENT_ETHNICITY 'PATIENT_ETHNICITY',
	PATIENT.PATIENT_DOB as PATIENT_DOB 'PATIENT_DOB',
	PATIENT.PATIENT_STREET_ADDRESS_1 AS PATIENT_STREET_ADDRESS_1 'PATIENT_STREET_ADDRESS_1',
	PATIENT.PATIENT_STREET_ADDRESS_2 AS PATIENT_STREET_ADDRESS_2 'PATIENT_STREET_ADDRESS_2',
	PATIENT.PATIENT_CITY AS PATIENT_CITY 'PATIENT_CITY',
	PATIENT.PATIENT_STATE AS PATIENT_STATE 'PATIENT_STATE',
	PATIENT.PATIENT_ZIP AS PATIENT_ZIP 'PATIENT_ZIP',
	PATIENT.PATIENT_COUNTY AS PATIENT_COUNTY 'PATIENT_COUNTY',
	PATIENT.PATIENT_COUNTRY AS PATIENT_COUNTRY 'PATIENT_COUNTRY',
	PATIENT.PATIENT_WITHIN_CITY_LIMITS AS WITHIN_CITY_LIMITS 'WITHIN_CITY_LIMITS',
	PATIENT.PATIENT_RACE_CALC_DETAILS as RACE_CALC_DETAILS 'RACE_CALC_DETAILS', 
	PATIENT.PATIENT_RACE_CALCULATED as RACE_CALCULATED 'RACE_CALCULATED' 
from nbs_rdb.f_VAR_pam left
outer join nbs_rdb.d_patient PATIENT on 
	PATIENT.patient_key= f_VAR_pam.person_key;

CREATE TABLE provider AS 
SELECT   f_VAR_pam.PERSON_key,PROVIDER.PROVIDER_LAST_NAME AS INVESTIGATOR_LAST_NAME 'INVESTIGATOR_LAST_NAME', 
PROVIDER.PROVIDER_FIRST_NAME AS INVESTIGATOR_FIRST_NAME 'INVESTIGATOR_FIRST_NAME',  PROVIDER_PHONE_WORK AS INVESTIGATOR_PHONE_NUMBER 'INVESTIGATOR_PHONE_NUMBER',
f_var_pam.provider_key
from nbs_rdb.f_var_pam left
outer join nbs_rdb.D_PROVIDER PROVIDER on 
	PROVIDER.PROVIDER_key= f_var_pam.provider_key
ORDER by PROVIDER_KEY;

CREATE TABLE PHYSICIAN AS 
SELECT   f_VAR_pam.PERSON_key,PHYSICIAN.PROVIDER_LAST_NAME AS PHYSICIAN_LAST_NAME 'PHYSICIAN_LAST_NAME', 
PHYSICIAN.PROVIDER_FIRST_NAME AS PHYSICIAN_FIRST_NAME 'PHYSICIAN_FIRST_NAME',PROVIDER_PHONE_WORK AS PHYSICIAN_PHONE_NUMBER 'PHYSICIAN_PHONE_NUMBER',
F_VAR_PAM.PHYSICIAN_KEY
FROM NBS_RDB.F_VAR_PAM LEFT
OUTER JOIN NBS_RDB.D_PROVIDER PHYSICIAN ON 
	PHYSICIAN.PROVIDER_KEY= F_VAR_PAM.PHYSICIAN_KEY
ORDER BY PHYSICIAN_KEY;

CREATE TABLE REPORTER AS 
SELECT   f_VAR_pam.PERSON_key,REPORTER.PROVIDER_LAST_NAME AS REPORTER_LAST_NAME 'REPORTER_LAST_NAME', 
REPORTER.PROVIDER_FIRST_NAME AS REPORTER_FIRST_NAME 'REPORTER_FIRST_NAME',  F_VAR_PAM.PERSON_AS_REPORTER_KEY, 
PROVIDER_PHONE_WORK AS REPORTER_PHONE_NUMBER 'REPORTER_PHONE_NUMBER',F_VAR_PAM.PERSON_AS_REPORTER_KEY
FROM NBS_RDB.F_VAR_PAM LEFT
OUTER JOIN NBS_RDB.D_PROVIDER REPORTER ON 
	REPORTER.PROVIDER_KEY= F_VAR_PAM.PERSON_AS_REPORTER_KEY
ORDER BY PERSON_AS_REPORTER_KEY;

CREATE TABLE org_reporter as
SELECT   f_VAR_pam.PERSON_key,ORGANIZATION.ORGANIZATION_NAME  AS REPORTING_SOURCE_NAME 'REPORTING_SOURCE_NAME',ORG_AS_REPORTER_key,
F_VAR_PAM.ORG_AS_REPORTER_KEY
from nbs_rdb.F_VAR_PAM LEFT OUTER join nbs_rdb.D_ORGANIZATION ORGANIZATION
ON ORGANIZATION.ORGANIZATION_KEY=F_VAR_PAM.ORG_AS_REPORTER_KEY;

CREATE TABLE hospital  as
SELECT   f_VAR_pam.PERSON_key,ORGANIZATION.ORGANIZATION_NAME  AS HOSPITAL_NAME 'HOSPITAL_NAME', hospital_key,F_VAR_PAM.person_key
from nbs_rdb.F_VAR_PAM LEFT OUTER join nbs_rdb.D_ORGANIZATION ORGANIZATION
on ORGANIZATION.ORGANIZATION_KEY=F_VAR_PAM.hospital_key;

QUIT;
PROC SQL;
CREATE TABLE entity_location AS 
	SELECT AGE_REPORTED,
	HOSPITAL_KEY,
	HOSPITAL_NAME,
	INVESTIGATOR_FIRST_NAME,
	INVESTIGATOR_LAST_NAME,
	INVESTIGATOR_PHONE_NUMBER,
	REPORTING_SOURCE_NAME,
	AGE_REPORTED_UNIT,
	PATIENT_CITY,
	PATIENT_COUNTRY,
	PATIENT_COUNTY,
	PATIENT_DECEASED_DATE,
	PATIENT_DECEASED_INDICATOR,
	PATIENT_DOB,
	PATIENT_ETHNICITY,
	PATIENT_FIRST_NAME,
	PATIENT_GENERAL_COMMENTS,
	PATIENT_LAST_NAME,
	PATIENT_LOCAL_ID,
	PATIENT_MARITAL_STATUS,
	PATIENT_MIDDLE_NAME,
	PATIENT_NAME_SUFFIX,
	PATIENT_PHONE_EXT_HOME,
	PATIENT_PHONE_EXT_WORK,
	PATIENT_PHONE_NUMBER_HOME,
	PATIENT_PHONE_NUMBER_WORK,
	PATIENT_SSN,
	PATIENT_STATE,
	PATIENT_STREET_ADDRESS_1,
	PATIENT_STREET_ADDRESS_2,
	PATIENT_ZIP,
	PERSON_AS_REPORTER_KEY,
	PATIENT_CURRENT_SEX,
	PATIENT.PERSON_KEY,
	PHYSICIAN_FIRST_NAME,
	PHYSICIAN_KEY,
	PHYSICIAN_LAST_NAME,
	PHYSICIAN_PHONE_NUMBER,
	PROVIDER_KEY,
	RACE_CALCULATED,
	RACE_CALC_DETAILS,
	REPORTER_FIRST_NAME,
	REPORTER_LAST_NAME,
	REPORTER_PHONE_NUMBER,
	WITHIN_CITY_LIMITS
 from PATIENT PATIENT
INNER  JOIN provider provider
	on PROVIDER.PERSON_key= PATIENT.PERSON_key
INNER JOIN PHYSICIAN ON 
	PHYSICIAN.PERSON_KEY= PATIENT.PERSON_KEY
INNER JOIN REPORTER ON
	REPORTER.PERSON_KEY=PATIENT.PERSON_KEY
INNER  JOIN org_reporter 
	on PATIENT.PERSON_KEY=org_reporter.PERSON_KEY
INNER  JOIN hospital 
	on PATIENT.PERSON_KEY=hospital.PERSON_key;
QUIT;
proc sql;
create table investigation as 
select 
INVESTIGATION.CASE_OID as PROGRAM_JURISDICTION_OID 'PROGRAM_JURISDICTION_OID',
INVESTIGATION.CASE_RPT_MMWR_WK AS MMWR_WEEK 'MMWR_WEEK',
INVESTIGATION.CASE_RPT_MMWR_YR AS MMWR_YEAR 'MMWR_YEAR',
INVESTIGATION.INV_COMMENTS AS GENERAL_COMMENTS 'GENERAL_COMMENTS',  
/*INVESTIGATION.INV_LOCAL_ID  AS INVESTIGATION_LOCAL_ID 'INVESTIGATION_LOCAL_ID',*/
INVESTIGATION.INV_STATE_CASE_ID  AS STATE_CASE_NUMBER 'STATE_CASE_NUMBER',
INVESTIGATION.CITY_COUNTY_CASE_NBR AS city_county_case_number 'city_county_case_number',
INVESTIGATION.INV_START_DT AS INVESTIGATION_START_DATE 'INVESTIGATION_START_DATE',
INVESTIGATION.INVESTIGATION_key as INVESTIGATION_key 'INVESTIGATION_KEY',
INVESTIGATION.INVESTIGATION_STATUS AS INVESTIGATION_STATUS 'INVESTIGATION_STATUS',
/*INVESTIGATION.INV_CASE_STATUS AS CASE_STATUS 'CASE_STATUS',*/
INVESTIGATION.JURISDICTION_NM AS JURISDICTION_NAME 'JURISDICTION_NAME',
INVESTIGATION.CITY_COUNTY_CASE_NBR as CITY_COUNTY_CASE_NBR 'CITY_COUNTY_CASE_NBR',
INVESTIGATION.Inv_Rpt_Dt AS DATE_REPORTED 'DATE_REPORTED',
INVESTIGATION.Earliest_Rpt_To_State_Dt AS DATE_SUBMITTED 'DATE_SUBMITTED',
INVESTIGATION.HSPTLIZD_IND AS HOSPITALIZED 'HOSPITALIZED',
INVESTIGATION.HSPTL_ADMISSION_DT AS HOSPITALIZED_ADMISSION_DATE  'HOSPITALIZED_ADMISSION_DATE',
INVESTIGATION.HSPTL_DISCHARGE_DT AS HOSPITALIZED_DISCHARGE_DATE 'HOSPITALIZED_DISCHARGE_DATE',
INVESTIGATION.HSPTL_DURATION_DAYS   AS HOSPITALIZED_DURATION_DAYS 'HOSPITALIZED_DURATION_DAYS',
INVESTIGATION.ILLNESS_ONSET_DT   AS ILLNESS_ONSET_DATE 'ILLNESS_ONSET_DATE',
INVESTIGATION.DIAGNOSIS_DT   AS DIAGNOSIS_DATE 'DIAGNOSIS_DATE',
INVESTIGATION.EARLIEST_RPT_TO_STATE_DT   AS DATE_REPORTED_TO_STATE 'DATE_REPORTED_TO_STATE',
INVESTIGATION.EARLIEST_RPT_TO_CNTY_DT AS DATE_REPORTED_TO_COUNTY 'DATE_REPORTED_TO_COUNTY',
INVESTIGATION.INV_CASE_STATUS AS  CASE_STATUS 'CASE_STATUS',
INVESTIGATION.OUTBREAK_IND AS  OUTBREAK 'OUTBREAK',
INVESTIGATION.OUTBREAK_NAME AS  OUTBREAK_CD 'OUTBREAK_CD',
INVESTIGATION.INV_ASSIGNED_DT AS INVESTIGATOR_ASSIGN_DATE 'INVESTIGATOR_ASSIGN_DATE',
INVESTIGATION.PATIENT_AGE_AT_ONSET_UNIT AS ILLNESS_ONSET_AGE_UNIT 'ILLNESS_ONSET_AGE_UNIT',
INVESTIGATION.PATIENT_AGE_AT_ONSET AS ILLNESS_ONSET_AGE 'ILLNESS_ONSET_AGE',
INVESTIGATION.PATIENT_PREGNANT_IND AS PREGNANT 'PREGNANT',
INVESTIGATION.INVESTIGATION_DEATH_DATE as INVESTIGATION_DEATH_DATE 'INVESTIGATION_DEATH_DATE',
INVESTIGATION.DIE_FRM_THIS_ILLNESS_IND AS DIE_FRM_THIS_ILLNESS_IND 'DIE_FRM_THIS_ILLNESS_IND',
INVESTIGATION.ILLNESS_END_DT AS ILLNESS_END_DATE 'ILLNESS_END_DATE',
INVESTIGATION.ILLNESS_DURATION AS ILLNESS_DURATION 'ILLNESS_DURATION',
INVESTIGATION.ILLNESS_DURATION_UNIT AS ILLNESS_DURATION_UNIT 'ILLNESS_DURATION_UNIT',
INVESTIGATION.DAYCARE_ASSOCIATION_IND AS DAYCARE 'DAYCARE',
INVESTIGATION.FOOD_HANDLR_IND AS FOOD_HANDLER 'FOOD_HANDLER',
INVESTIGATION.DISEASE_IMPORTED_IND AS DISEASE_ACQUIRED_WHERE 'DISEASE_ACQUIRED_WHERE',
INVESTIGATION.IMPORT_FRM_CNTRY AS DISEASE_ACQUIRED_COUNTRY 'DISEASE_ACQUIRED_COUNTRY',
INVESTIGATION.IMPORT_FRM_STATE AS DISEASE_ACQUIRED_STATE 'DISEASE_ACQUIRED_STATE',
INVESTIGATION.IMPORT_FRM_CITY AS DISEASE_ACQUIRED_CITY 'DISEASE_ACQUIRED_CITY',
INVESTIGATION.IMPORT_FRM_CNTY AS DISEASE_ACQUIRED_COUNTY 'DISEASE_ACQUIRED_COUNTY',
INVESTIGATION.TRANSMISSION_MODE AS TRANSMISSION_MODE 'TRANSMISSION_MODE',
INVESTIGATION.DETECTION_METHOD_DESC_TXT AS DETECTION_METHOD 'DETECTION_METHOD',
INVESTIGATION.RPT_SRC_CD_DESC AS REPORTING_SOURCE_TYPE 'REPORTING_SOURCE_TYPE',
INVESTIGATION.INVESTIGATION_KEY,
CASE_UID
from nbs_rdb.investigation 
INNER JOIN NBS_RDB.F_VAR_PAM ON investigation.INVESTIGATION_KEY = F_VAR_PAM.INVESTIGATION_KEY
WHERE Investigation.RECORD_STATUS_CD ='ACTIVE';
quit;


proc sql;
create table BASE as
select  
EVENT_METRIC.ADD_TIME AS INVESTIGATION_CREATE_DATE 'INVESTIGATION_CREATE_DATE',
EVENT_METRIC.ADD_USER_ID AS INVESTIGATION_CREATED_BY 'INVESTIGATION_CREATED_BY',
EVENT_METRIC.LAST_CHG_USER_ID AS INVESTIGATION_LAST_UPDTD_BY 'INVESTIGATION_LAST_UPDTD_BY',
EVENT_METRIC.LAST_CHG_TIME AS INVESTIGATION_LAST_UPDTD_DATE 'INVESTIGATION_LAST_UPDTD_DATE',
EVENT_METRIC.PROG_AREA_DESC_TXT AS PROGRAM_AREA_DESCRIPTION 'PROGRAM_AREA_DESCRIPTION',
EVENT_METRIC.LOCAL_ID AS INVESTIGATION_LOCAL_ID 'INVESTIGATION_LOCAL_ID',
Investigation.*,
D_VAR_PAM.VAR_PAM_UID,
D_VAR_PAM.COMPLICATIONS,
D_VAR_PAM.COMPLICATIONS_CEREB_ATAXIA ,
D_VAR_PAM.COMPLICATIONS_DEHYDRATION,
D_VAR_PAM.COMPLICATIONS_ENCEPHALITIS ,
D_VAR_PAM.COMPLICATIONS_HEMORRHAGIC,
D_VAR_PAM.COMPLICATIONS_OTHER  ,
D_VAR_PAM.COMPLICATIONS_OTHER_SPECIFY,
D_VAR_PAM.COMPLICATIONS_PNEU_DIAG_BY ,
D_VAR_PAM.COMPLICATIONS_PNEUMONIA  ,
D_VAR_PAM.COMPLICATIONS_SKIN_INFECTION  ,
D_VAR_PAM.CROPS_WAVES  ,
D_VAR_PAM.CULTURE_TEST ,
D_VAR_PAM.CULTURE_TEST_DATE ,
D_VAR_PAM.CULTURE_TEST_RESULT  ,
D_VAR_PAM.DEATH_AUTOPSY,
D_VAR_PAM.DEATH_CAUSE  ,
D_VAR_PAM.DFA_TEST,
D_VAR_PAM.DFA_TEST_DATE,
D_VAR_PAM.DFA_TEST_RESULT ,
D_VAR_PAM.EPI_LINKED,
D_VAR_PAM.EPI_LINKED_CASE_TYPE ,
D_VAR_PAM.FEVER,
D_VAR_PAM.FEVER_DURATION_DAYS  ,
D_VAR_PAM.FEVER_ONSET_DATE AS FEVER_ONSET_DATE 'FEVER_ONSET_DATE' ,
D_VAR_PAM.FEVER_TEMPERATURE ,
D_VAR_PAM.FEVER_TEMPERATURE_UNIT,
D_VAR_PAM.GENOTYPING_SENT_TO_CDC,
D_VAR_PAM.GENOTYPING_SENT_TO_CDC_DATE,
D_VAR_PAM.HEALTHCARE_WORKER ,
D_VAR_PAM.HEMORRHAGIC  ,
D_VAR_PAM.IGG_TEST,
D_VAR_PAM.IGG_TEST_ACUTE_DATE  ,
D_VAR_PAM.IGG_TEST_ACUTE_RESULT,
D_VAR_PAM.IGG_TEST_ACUTE_VALUE ,
D_VAR_PAM.IGG_TEST_CONVALESCENT_DATE ,
D_VAR_PAM.IGG_TEST_CONVALESCENT_RESULT  ,
D_VAR_PAM.IGG_TEST_CONVALESCENT_VALUE,
D_VAR_PAM.IGG_TEST_GP_ELISA_MFGR,
D_VAR_PAM.IGG_TEST_OTHER  ,
D_VAR_PAM.IGG_TEST_TYPE,
D_VAR_PAM.IGG_TEST_WHOLE_CELL_MFGR ,
D_VAR_PAM.IGM_TEST,
D_VAR_PAM.IGM_TEST_DATE,
D_VAR_PAM.IGM_TEST_RESULT ,
D_VAR_PAM.IGM_TEST_RESULT_VALUE,
D_VAR_PAM.IGM_TEST_TYPE,
D_VAR_PAM.IGM_TEST_TYPE_OTHER  ,
D_VAR_PAM.IMMUNOCOMPROMISED ,
D_VAR_PAM.IMMUNOCOMPROMISED_CONDITION,
D_VAR_PAM.ITCHY,
D_VAR_PAM.LAB_TESTING  ,
D_VAR_PAM.LAB_TESTING_OTHER ,
D_VAR_PAM.LAB_TESTING_OTHER_DATE,
D_VAR_PAM.LAB_TESTING_OTHER_RESULT ,
D_VAR_PAM.LAB_TESTING_OTHER_RESULT_VALUE,
D_VAR_PAM.LAB_TESTING_OTHER_SPECIFY,
D_VAR_PAM.LESIONS_TOTAL,
D_VAR_PAM.LESIONS_TOTAL_LT50,
D_VAR_PAM.MACULAR_PAPULAR ,
D_VAR_PAM.MACULES ,
D_VAR_PAM.MACULES_NUMBER  ,
D_VAR_PAM.MEDICATION_NAME ,
D_VAR_PAM.MEDICATION_NAME_OTHER,
D_VAR_PAM.MEDICATION_START_DATE,
D_VAR_PAM.MEDICATION_STOP_DATE ,
D_VAR_PAM.PAPULES ,
D_VAR_PAM.PAPULES_NUMBER  ,
D_VAR_PAM.PATIENT_BIRTH_COUNTRY,
D_VAR_PAM.PATIENT_VISIT_HC_PROVIDER,
D_VAR_PAM.PCR_TEST,
D_VAR_PAM.PCR_TEST_DATE,
D_VAR_PAM.PCR_TEST_RESULT ,
D_VAR_PAM.PCR_TEST_RESULT_OTHER,
D_VAR_PAM.PCR_TEST_SOURCE_OTHER,
D_VAR_PAM.PREGNANT_TRIMESTER,
D_VAR_PAM.PREGNANT_WEEKS  ,
D_VAR_PAM.PREVIOUS_DIAGNOSIS,
D_VAR_PAM.PREVIOUS_DIAGNOSIS_AGE,
D_VAR_PAM.PREVIOUS_DIAGNOSIS_AGE_UNIT,
D_VAR_PAM.PREVIOUS_DIAGNOSIS_BY,
D_VAR_PAM.PREVIOUS_DIAGNOSIS_BY_OTHER,
D_VAR_PAM.RASH_CRUST,
D_VAR_PAM.RASH_CRUSTED_DAYS ,
D_VAR_PAM.RASH_DURATION_DAYS,
D_VAR_PAM.RASH_LOCATION,
D_VAR_PAM.RASH_LOCATION_DERMATOME  ,
D_VAR_PAM.RASH_LOCATION_OTHER  ,
D_VAR_PAM.RASH_ONSET_DATE ,
D_VAR_PAM.SCABS,
D_VAR_PAM.SEROLOGY_TEST,
D_VAR_PAM.STRAIN_IDENTIFICATION_SENT ,
D_VAR_PAM.STRAIN_TYPE  ,
D_VAR_PAM.TRANSMISSION_SETTING ,
D_VAR_PAM.TRANSMISSION_SETTING_OTHER ,
D_VAR_PAM.TREATED ,
D_VAR_PAM.VACCINE_DATE_1  ,
D_VAR_PAM.VACCINE_DATE_2  ,
D_VAR_PAM.VACCINE_DATE_3  ,
D_VAR_PAM.VACCINE_DATE_4  ,
D_VAR_PAM.VACCINE_DATE_5  ,
D_VAR_PAM.VACCINE_LOT_1,
D_VAR_PAM.VACCINE_LOT_2,
D_VAR_PAM.VACCINE_LOT_3,
D_VAR_PAM.VACCINE_LOT_4,
D_VAR_PAM.VACCINE_LOT_5,
D_VAR_PAM.VACCINE_MANUFACTURER_1,
D_VAR_PAM.VACCINE_MANUFACTURER_2,
D_VAR_PAM.VACCINE_MANUFACTURER_3,
D_VAR_PAM.VACCINE_MANUFACTURER_4,
D_VAR_PAM.VACCINE_MANUFACTURER_5,
D_VAR_PAM.VACCINE_TYPE_1  ,
D_VAR_PAM.VACCINE_TYPE_2  ,
D_VAR_PAM.VACCINE_TYPE_3  ,
D_VAR_PAM.VACCINE_TYPE_4  ,
D_VAR_PAM.VACCINE_TYPE_5  ,
D_VAR_PAM.VARICELLA_NO_2NDVACCINE_OTHER ,
D_VAR_PAM.VARICELLA_NO_2NDVACCINE_REASON,
D_VAR_PAM.VARICELLA_NO_VACCINE_OTHER ,
D_VAR_PAM.VARICELLA_NO_VACCINE_REASON,
D_VAR_PAM.VARICELLA_VACCINE ,
D_VAR_PAM.VARICELLA_VACCINE_DOSES_NUMBER,
D_VAR_PAM.VESICLES,
D_VAR_PAM.VESICLES_NUMBER ,
D_VAR_PAM.VESICULAR ,
/*f_VAR_pam.provider_key,*/
F_VAR_PAM.D_PCR_SOURCE_GROUP_KEY, 
F_VAR_PAM.D_RASH_LOC_GEN_GROUP_KEY,
f_VAR_pam.person_key,
f_VAR_pam.provider_key
from  
nbs_rdb.f_VAR_pam INNER join nbs_rdb.D_VAR_PAM on
	f_VAR_pam.d_VAR_pam_key=D_VAR_PAM.d_VAR_pam_key
inner join Investigation on 
	 f_VAR_pam.INVESTIGATION_KEY=INVESTIGATION.INVESTIGATION_KEY
inner JOIN nbs_rdb.EVENT_METRIC
	on EVENT_METRIC.EVENT_UID=D_VAR_PAM.VAR_PAM_UID
	
ORDER BY f_VAR_pam.person_key;
quit;
PROC SQL;
CREATE TABLE BASE_TRANSLATED AS 
	SELECT BASE.*,
			CODE,CODE_SHORT_DESC_TXT AS OUTBREAK_NAME 'OUTBREAK_NAME'
	FROM	BASE base
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE=base.OUTBREAK_CD
			AND CVG.CODE_SET_NM='OUTBREAK_NM';
QUIT;
proc sql;
create table init as select * from 
BASE_TRANSLATED left outer join entity_location 
on entity_location.PERSON_KEY=BASE_TRANSLATED.PERSON_KEY;
quit;
proc sort data=init; by VAR_PAM_UID; run;
proc sql;
create table D_PCR_SOURCE as select * from nbs_rdb.D_PCR_SOURCE order by D_PCR_SOURCE_GROUP_KEY, value;
quit;
DATA D_PCR_SOURCE_OUT; 
LENGTH PCR_TEST_SOURCE_ALL $2000;
LENGTH PCR_TEST_SOURCE_1 $50;
LENGTH PCR_TEST_SOURCE_2 $50;
LENGTH PCR_TEST_SOURCE_3 $50;
LENGTH PCR_TEST_SOURCE_4 $50;
LENGTH PCR_TEST_SOURCE_GT3_IND $10;
SET D_PCR_SOURCE; BY  D_PCR_SOURCE_GROUP_KEY; 
RETAIN PCR_TEST_SOURCE_ALL;
RETAIN PCR_TEST_SOURCE_1;
RETAIN PCR_TEST_SOURCE_2;
RETAIN PCR_TEST_SOURCE_3;
IF FIRST.D_PCR_SOURCE_GROUP_KEY THEN PCR_TEST_SOURCE_ALL=' ';
IF FIRST.D_PCR_SOURCE_GROUP_KEY THEN PCR_TEST_SOURCE_1=' ';
IF FIRST.D_PCR_SOURCE_GROUP_KEY THEN PCR_TEST_SOURCE_2=' ';
IF FIRST.D_PCR_SOURCE_GROUP_KEY THEN PCR_TEST_SOURCE_3=' ';
IF FIRST.D_PCR_SOURCE_GROUP_KEY THEN PCR_TEST_SOURCE_4=' ';
PCR_TEST_SOURCE_ALL=CATX(' | ',PCR_TEST_SOURCE_ALL,VALUE); 
IF LENGTHN(TRIM(PCR_TEST_SOURCE_1))=0 THEN  PCR_TEST_SOURCE_1=VALUE;
ELSE IF LENGTHN(TRIM(PCR_TEST_SOURCE_2))=0 THEN  PCR_TEST_SOURCE_2=VALUE;
ELSE IF LENGTHN(TRIM(PCR_TEST_SOURCE_3))=0 THEN  PCR_TEST_SOURCE_3=VALUE;
ELSE IF LENGTHN(TRIM(PCR_TEST_SOURCE_4))=0 THEN  PCR_TEST_SOURCE_4=VALUE;
IF LAST.D_PCR_SOURCE_GROUP_KEY; 
IF LENGTHN(COMPRESS(PCR_TEST_SOURCE_4))>0  THEN PCR_TEST_SOURCE_GT3_IND='TRUE';
ELSE PCR_TEST_SOURCE_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_RASH_LOC_GEN as select * from nbs_rdb.D_RASH_LOC_GEN order by D_RASH_LOC_GEN_GROUP_KEY, value;
quit;
DATA D_RASH_LOC_GEN_OUT; 
LENGTH RASH_LOCATION_GENERAL_ALL $2000;
LENGTH RASH_LOCATION_GENERAL_1 $50;
LENGTH RASH_LOCATION_GENERAL_2 $50;
LENGTH RASH_LOCATION_GENERAL_3 $50;
LENGTH RASH_LOCATION_GENERAL_4 $50;
LENGTH RASH_LOCATION_GENERAL_GT3_IND $10;
SET D_RASH_LOC_GEN; BY D_RASH_LOC_GEN_GROUP_KEY; 
RETAIN RASH_LOCATION_GENERAL_ALL;
RETAIN RASH_LOCATION_GENERAL_1;
RETAIN RASH_LOCATION_GENERAL_2;
RETAIN RASH_LOCATION_GENERAL_3;
IF FIRST.D_RASH_LOC_GEN_GROUP_KEY THEN RASH_LOCATION_GENERAL_ALL=' ';
IF FIRST.D_RASH_LOC_GEN_GROUP_KEY THEN RASH_LOCATION_GENERAL_1=' ';
IF FIRST.D_RASH_LOC_GEN_GROUP_KEY THEN RASH_LOCATION_GENERAL_2=' ';
IF FIRST.D_RASH_LOC_GEN_GROUP_KEY THEN RASH_LOCATION_GENERAL_3=' ';
IF FIRST.D_RASH_LOC_GEN_GROUP_KEY THEN RASH_LOCATION_GENERAL_4=' ';
RASH_LOCATION_GENERAL_ALL=CATX(' | ',RASH_LOCATION_GENERAL_ALL,VALUE); 
IF LENGTHN(TRIM(RASH_LOCATION_GENERAL_1))=0 THEN  RASH_LOCATION_GENERAL_1=VALUE;
ELSE IF LENGTHN(TRIM(RASH_LOCATION_GENERAL_2))=0 THEN  RASH_LOCATION_GENERAL_2=VALUE;
ELSE IF LENGTHN(TRIM(RASH_LOCATION_GENERAL_3))=0 THEN  RASH_LOCATION_GENERAL_3=VALUE;
ELSE IF LENGTHN(TRIM(RASH_LOCATION_GENERAL_4))=0 THEN  RASH_LOCATION_GENERAL_4=VALUE;
IF LAST.D_RASH_LOC_GEN_GROUP_KEY; 
IF LENGTHN(COMPRESS(RASH_LOCATION_GENERAL_4))>0  THEN RASH_LOCATION_GENERAL_GT3_IND='TRUE';
ELSE RASH_LOCATION_GENERAL_GT3_IND='FALSE';
RUN; 
proc sql;
create table CONFIRMATION_METHOD as 
select 
confirmation_method.*, confirmation_method_group.investigation_key, confirmation_method_group.confirmation_dt from 
nbs_rdb.confirmation_method, nbs_rdb.confirmation_method_group, nbs_rdb.investigation, nbs_rdb.f_var_pam
where 
confirmation_method_group.confirmation_method_key= confirmation_method.confirmation_method_key
and confirmation_method_group.investigation_key =investigation.investigation_key
and f_var_pam.investigation_key=investigation.investigation_key 
and investigation.record_status_cd='ACTIVE'
order by confirmation_method_group.investigation_key;
quit;
PROC TRANSPOSE DATA=CONFIRMATION_METHOD OUT=CONFIRMATION_METHOD_BASE;
    BY investigation_key;
	COPY investigation_key confirmation_dt;
	VAR CONFIRMATION_METHOD_DESC;
RUN;
data CONFIRMATION_METHOD_BASE;
set CONFIRMATION_METHOD_BASE;
LENGTH CONFIRMATION_METHOD_ALL $3000;
CONFIRMATION_METHOD_ALL = catx(" | ", of COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,COL10,COL11,COL12,COL13);
x = index(CONFIRMATION_METHOD_ALL, ' | .');
if x > 0 then CONFIRMATION_METHOD_ALL = substr(CONFIRMATION_METHOD_ALL, 1, x);
if lengthn(CONFIRMATION_METHOD_ALL)>0 then x1 = lengthn(CONFIRMATION_METHOD_ALL);
else x1= -1;
if x= x1 then CONFIRMATION_METHOD_ALL = substr(CONFIRMATION_METHOD_ALL, 1, (x-1));
run;
DATA CONFIRMATION_METHOD_BASE;
SET CONFIRMATION_METHOD_BASE;
LENGTH CONFIRMATION_METHOD_1 $50;
LENGTH CONFIRMATION_METHOD_2 $50;
LENGTH CONFIRMATION_METHOD_3 $50;
LENGTH CONFIRMATION_METHOD_4 $50;
LENGTH CONFIRMATION_METHOD_GT3_IND $50;
if lengthn(COL1) gt 2 then CONFIRMATION_METHOD_1=COL1;
if lengthn(COL2) gt 2 then CONFIRMATION_METHOD_2=COL2;
if lengthn(COL3) gt 2 then CONFIRMATION_METHOD_3=COL3;
if lengthn(COL4) gt 2 then CONFIRMATION_METHOD_4=COL4;
if(lengthn(compress(CONFIRMATION_METHOD_4))>3) then CONFIRMATION_METHOD_GT3_IND='True';
else CONFIRMATION_METHOD_GT3_IND='False';
run;
PROC SQL;
CREATE TABLE CONFIRMATION_METHOD_OUT AS 
SELECT CONFIRMATION_METHOD_1,
CONFIRMATION_METHOD_2,
CONFIRMATION_METHOD_3,
CONFIRMATION_METHOD_GT3_IND,
CONFIRMATION_METHOD_ALL, 
CONFIRMATION_DT,
INVESTIGATION_KEY
FROM CONFIRMATION_METHOD_BASE
WHERE LENGTHN(_LABEL_)>0;
QUIT;
PROC SQL;
CREATE TABLE VAR_DATAMART_init AS 
SELECT init.*,
RASH_LOCATION_GENERAL_1, RASH_LOCATION_GENERAL_2, RASH_LOCATION_GENERAL_3, 
PCR_TEST_SOURCE_1,PCR_TEST_SOURCE_2,PCR_TEST_SOURCE_3,
RASH_LOCATION_GENERAL_GT3_IND,
PCR_TEST_SOURCE_GT3_IND,
PCR_TEST_SOURCE_ALL, 
RASH_LOCATION_GENERAL_ALL,
CONFIRMATION_METHOD_1,
CONFIRMATION_METHOD_2,
CONFIRMATION_METHOD_3,
CONFIRMATION_METHOD_GT3_IND,
CONFIRMATION_METHOD_ALL,
CONFIRMATION_DT as CONFIRMATION_DATE 'CONFIRMATION_DATE'
FROM INIT 
left JOIN D_RASH_LOC_GEN_OUT
ON INIT.D_RASH_LOC_GEN_GROUP_KEY=D_RASH_LOC_GEN_OUT.D_RASH_LOC_GEN_GROUP_KEY 
left JOIN D_PCR_SOURCE_OUT
ON INIT.D_PCR_SOURCE_GROUP_KEY=D_PCR_SOURCE_OUT.D_PCR_SOURCE_GROUP_KEY
left JOIN CONFIRMATION_METHOD_OUT
ON INIT.INVESTIGATION_KEY=CONFIRMATION_METHOD_OUT.INVESTIGATION_KEY;
QUIT;
proc sql;
create table VAR_DATAMART_not_event as 
select *,RDB_DATE.date_mm_dd_yyyy  as notification_sent_date,notifUser.first_nm as notif_first_nm, notifUser.last_nm as notif_last_nm,
createUser.first_nm as createUser_first_nm, createUser.last_nm as createUser_last_nm,
editUser.first_nm as editUser_first_nm, editUser.last_nm as editUser_last_nm
from VAR_DATAMART_init  left outer join nbs_rdb.notification_event
on VAR_DATAMART_init.person_key= notification_event.patient_key
left outer join nbs_rdb.notification
on notification_event.notification_key= notification.notification_key
left outer join nbs_rdb.RDB_DATE
on notification_event.NOTIFICATION_SENT_DT_KEY= RDB_DATE.DATE_key
left outer join nbs_rdb.user_profile notifUser
on notification.notification_submitted_by=notifUser.NEDSS_ENTRY_ID
left outer join nbs_rdb.user_profile createUser
on VAR_DATAMART_init.INVESTIGATION_CREATED_BY=createUser.NEDSS_ENTRY_ID
left outer join nbs_rdb.user_profile editUser
on VAR_DATAMART_init.INVESTIGATION_LAST_UPDTD_BY=editUser.NEDSS_ENTRY_ID;
quit;
data VAR_DATAMART_not_event;
set VAR_DATAMART_not_event;
drop  INVESTIGATION_CREATED_BY;
drop INVESTIGATION_LAST_UPDTD_BY;
run;
data VAR_DATAMART_not_event;
set VAR_DATAMART_not_event;
if lengthn(trim(notif_first_nm))> 0 and lengthn(trim(notif_last_nm))>0  then Notification_Submitter = trim(notif_last_nm)|| ',' ||trim(notif_first_nm);
else if lengthn(trim(notif_last_nm))>0 then Notification_Submitter = trim(notif_last_nm);
else if lengthn(trim(notif_first_nm))>0 then Notification_Submitter = trim(notif_first_nm);
if lengthn(trim(createUser_first_nm))> 0 and lengthn(trim(createUser_last_nm))>0  then INVESTIGATION_CREATED_BY = trim(createUser_last_nm)|| ',' ||trim(createUser_first_nm);
else if lengthn(trim(createUser_last_nm))>0 then INVESTIGATION_CREATED_BY = trim(createUser_last_nm);
else if lengthn(trim(createUser_first_nm))>0 then INVESTIGATION_CREATED_BY= trim(createUser_first_nm);
if lengthn(trim(editUser_first_nm))> 0 and lengthn(trim(editUser_last_nm))>0  then INVESTIGATION_LAST_UPDTD_BY = trim(editUser_last_nm)|| ',' ||trim(editUser_first_nm);
else if lengthn(trim(editUser_last_nm))>0 then INVESTIGATION_LAST_UPDTD_BY = trim(editUser_last_nm);
else if lengthn(trim(editUser_first_nm))>0 then INVESTIGATION_LAST_UPDTD_BY = trim(editUser_first_nm);

IF ILLNESS_ONSET_DATE ~= .  THEN EVENT_DATE = ILLNESS_ONSET_DATE;
ELSE IF DIAGNOSIS_DATE ~= . THEN EVENT_DATE = DIAGNOSIS_DATE;
ELSE IF DATE_REPORTED_TO_COUNTY ~=. THEN EVENT_DATE =DATE_REPORTED_TO_COUNTY;
ELSE IF DATE_REPORTED_TO_STATE ~=. THEN EVENT_DATE =DATE_REPORTED_TO_STATE;
ELSE 	EVENT_DATE =INVESTIGATION_CREATE_DATE;
IF ILLNESS_ONSET_DATE ~= .  THEN EVENT_DATE_TYPE='O';
ELSE IF DIAGNOSIS_DATE ~= . THEN EVENT_DATE_TYPE='D';
ELSE IF DATE_REPORTED_TO_COUNTY ~=. THEN EVENT_DATE_TYPE='C';
ELSE IF DATE_REPORTED_TO_STATE ~=. THEN EVENT_DATE_TYPE='S';
ELSE 	EVENT_DATE_TYPE='P';

run;
proc sql;
create table VAR_DATAMART AS
select 	* 	from VAR_DATAMART_not_event where investigation_key >0;
quit;
%dbload (VAR_DATAMART, VAR_DATAMART);
%mend VAR_DATAMART;
PROC SQL;
CREATE TABLE VAR_PORT_IND 
AS
select PORT_REQ_IND_CD from nbs_srt.condition_code where condition_cd ='10030';
QUIT;
DATA _null_;
  set VAR_PORT_IND;
  if PORT_REQ_IND_CD='T' then call execute('%VAR_DATAMART');
RUN;


