PROC SQL;
CREATE TABLE ACTIVITY_LOG_MASTER_LAST 
(ACTIVITY_LOG_MASTER_UID NUM,
START_DATE DATE, 
START_DATE2 DATE,
START_DATEINIT DATE,
COUNT NUM);
INSERT INTO ACTIVITY_LOG_MASTER_LAST( ACTIVITY_LOG_MASTER_UID, START_DATE,START_DATEINIT, START_DATE2) VALUES 
(1 , '01JUN1900'D,'01JUN1900'D, NULL);

UPDATE ACTIVITY_LOG_MASTER_LAST SET START_DATE2= (SELECT START_DATE FROM NBS_RDB.ACTIVITY_LOG_MASTER 
WHERE ACTIVITY_LOG_MASTER_UID= SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM NBS_RDB.ACTIVITY_LOG_MASTER);

CREATE TABLE ACTIVITY_LOG_MASTER  (ACTIVITY_LOG_MASTER_UID NUM,START_DATE DATE, END_DATE DATE);

CREATE TABLE ACTIVITY_LOG_DETAIL  (ACTIVITY_LOG_DETAIL_UID NUMERIC,	PROCESS_UID NUMERIC ,	
	SOURCE_ROW_COUNT NUMERIC , ROW_COUNT_INSERT NUMERIC, ROW_COUNT_UPDATE NUMERIC,
	SOURCE_ROW_COUNT_EXISTING NUMERIC ,	SOURCE_ROW_COUNT_NEW NUMERIC ,
	DESTINATION_ROW_COUNT NUMERIC ,
	START_DATE DATE, END_DATE DATE,
	START_DATE2 DATE,
	ADMIN_COMMENT VARCHAR(200), ACTIVITY_LOG_MASTER_UID NUMERIC);
INSERT INTO ACTIVITY_LOG_DETAIL( ACTIVITY_LOG_DETAIL_UID, PROCESS_UID,SOURCE_ROW_COUNT, DESTINATION_ROW_COUNT,
START_DATE,END_DATE, ACTIVITY_LOG_MASTER_UID) VALUES (1 , 1, NULL, NULL, NULL, NULL, NULL);
UPDATE ACTIVITY_LOG_DETAIL SET PROCESS_UID= (select process_uid from nbs_rdb.etl_process where process_name='LAB_TEST');
UPDATE ACTIVITY_LOG_DETAIL SET ACTIVITY_LOG_MASTER_UID=  (SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM NBS_RDB.ACTIVITY_LOG_MASTER);
UPDATE ACTIVITY_LOG_DETAIL SET ACTIVITY_LOG_DETAIL_UID= (SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1 ;
UPDATE ACTIVITY_LOG_DETAIL SET START_DATE2= (SELECT max(START_DATE)  FROM NBS_RDB.ACTIVITY_LOG_DETAIL WHERE 
PROCESS_UID= (select process_uid from nbs_rdb.etl_process where process_name='LAB101')
having ACTIVITY_LOG_DETAIL_UID=MAX(ACTIVITY_LOG_DETAIL_UID) 
);
QUIT;
DATA ACTIVITY_LOG_DETAIL; 
SET ACTIVITY_LOG_DETAIL;
START_DATE=datetime() ;
RUN;
OPTIONS COMPRESS=YES;
PROC SQL;
create table  UPDATED_LAB101 AS SELECT RESULTED_LAB_TEST_KEY FROM NBS_RDB.LAB101 WHERE RESULTED_LAB_TEST_KEY IN (SELECT LAB_TEST_KEY FROM nbs_rdb.updated_lab_test_list); 

delete from nbs_rdb.lab101 where RESULTED_LAB_TEST_KEY in (select RESULTED_LAB_TEST_KEY from UPDATED_LAB101);
CREATE TABLE ISOLATE_TRACKING_INIT AS
SELECT     LAB_TEST.LAB_TEST_KEY, LAB_RESULT_VAL.TEST_RESULT_GRP_KEY, LAB_TEST.LAB_TEST_CD, LAB_RESULT_VAL.TEST_RESULT_VAL_CD, 
                      LAB_RESULT_VAL.TEST_RESULT_VAL_CD_DESC, LAB_RESULT_VAL.FROM_TIME, 
                      LAB_RESULT_VAL.LAB_RESULT_TXT_VAL, LAB_TEST.PARENT_TEST_PNTR,  LAB_TEST.PARENT_TEST_PNTR,
					  LAB_TEST.RECORD_STATUS_CD, LAB_TEST.OID, LAB_TEST.LAB_RPT_LOCAL_ID, LAB_TEST.LAB_RPT_UID
FROM         NBS_RDB.LAB_RESULT_VAL,NBS_RDB.TEST_RESULT_GROUPING,NBS_RDB.LAB_TEST,NBS_RDB.LAB_TEST_RESULT    
WHERE     
                      LAB_RESULT_VAL.TEST_RESULT_GRP_KEY = TEST_RESULT_GROUPING.TEST_RESULT_GRP_KEY 
and                      LAB_TEST.LAB_TEST_KEY = LAB_TEST_RESULT.LAB_TEST_KEY 
and                      TEST_RESULT_GROUPING.TEST_RESULT_GRP_KEY = LAB_TEST_RESULT.TEST_RESULT_GRP_KEY

and 				LAB_RESULT_VAL.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				LAB_RESULT_VAL.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  

and 				LAB_TEST_RESULT.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				LAB_TEST_RESULT.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  

and 				LAB_TEST.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				LAB_TEST.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  

and 				TEST_RESULT_GROUPING.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				TEST_RESULT_GROUPING.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  


and lab_test_type = 'I_Result'
order by LAB_RPT_UID;
QUIT;

/*TO GET RESULTED TEST DETAILS(ORGANISM NAME)
*/
PROC SQL;
CREATE TABLE RESULTED_TEST_DETAIL1 AS
select LAB_TEST_I_RESULT.LAB_RPT_UID, 
resulted_test.lab_test_cd_desc, 
resulted_test.SPECIMEN_SRC as SPECIMEN_SRC_CD,
resulted_test.SPECIMEN_DESC as SPECIMEN_SRC_DESC,
resulted_test.SPECIMEN_COLLECTION_DT as SPECIMEN_COLLECTION_DT,
resulted_test.LAB_TEST_DT as LAB_TEST_DT, 
resulted_test.LAB_RPT_RECEIVED_BY_PH_DT as LAB_RPT_RECEIVED_BY_PH_DT,
resulted_test.LAB_RPT_CREATED_DT as LAB_RPT_CREATED_DT, 
resulted_test.record_status_cd as record_status_cd_resulted_test,
resulted_test.LAB_TEST_KEY as RESULTED_LAB_TEST_KEY, 
LAB_TEST_I_result.LAB_RPT_UID, LAB_TEST_I_result.LAB_RPT_LOCAL_ID
from NBS_RDB.lab_test resulted_test 
left join NBS_RDB.LAB_TEST AS LAB_TEST_I_ORDER
ON  resulted_test.LAB_RPT_UID=LAB_TEST_I_ORDER.PARENT_TEST_PNTR
left  join NBS_RDB.LAB_TEST AS LAB_TEST_I_RESULT
ON LAB_TEST_I_ORDER.LAB_RPT_UID=LAB_TEST_I_RESULT.PARENT_TEST_PNTR
WHERE LAB_TEST_I_RESULT.LAB_TEST_TYPE = 'I_Result'
AND  LAB_TEST_I_ORDER.LAB_TEST_TYPE = 'I_Order'
and resulted_test.LAB_TEST_TYPE = 'Result'
and resulted_test.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and resulted_test.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  
ORDER BY LAB_RPT_UID;
QUIT;
PROC SQL;
CREATE TABLE RESULTED_TEST_DETAILS AS
	SELECT TRACK.*,
		   RESULTED_TEST_DETAIL1.lab_test_cd_desc,
		   RESULTED_TEST_DETAIL1.RESULTED_LAB_TEST_KEY,
		   RESULTED_TEST_DETAIL1.SPECIMEN_COLLECTION_DT,
			RESULTED_TEST_DETAIL1.LAB_TEST_DT, 
			RESULTED_TEST_DETAIL1.LAB_RPT_RECEIVED_BY_PH_DT,
			RESULTED_TEST_DETAIL1.LAB_RPT_CREATED_DT, 
			RESULTED_TEST_DETAIL1.SPECIMEN_SRC_CD, 
			RESULTED_TEST_DETAIL1.SPECIMEN_SRC_DESC, 
		   RESULTED_TEST_DETAIL1.record_status_cd_resulted_test
	FROM WORK.ISOLATE_TRACKING_INIT AS TRACK
	LEFT JOIN WORK.RESULTED_TEST_DETAIL1 AS RESULTED_TEST_DETAIL1
	ON TRACK.LAB_RPT_UID=RESULTED_TEST_DETAIL1.LAB_RPT_UID;
QUIT;
PROC SORT DATA=RESULTED_TEST_DETAILS;
BY PARENT_TEST_PNTR;
RUN;
PROC SQL;
CREATE TABLE ISOLATE_TRACKING_LAB330_INIT AS
SELECT       LAB_RESULT_VAL.TEST_RESULT_VAL_CD_DESC AS LAB330,  LAB_TEST.LAB_RPT_LOCAL_ID
FROM         NBS_RDB.LAB_RESULT_VAL,NBS_RDB.TEST_RESULT_GROUPING,NBS_RDB.LAB_TEST,NBS_RDB.LAB_TEST_RESULT    
WHERE     
                      LAB_RESULT_VAL.TEST_RESULT_GRP_KEY = TEST_RESULT_GROUPING.TEST_RESULT_GRP_KEY 
and                      LAB_TEST.LAB_TEST_KEY = LAB_TEST_RESULT.LAB_TEST_KEY 
and                      TEST_RESULT_GROUPING.TEST_RESULT_GRP_KEY = LAB_TEST_RESULT.TEST_RESULT_GRP_KEY

and 				LAB_RESULT_VAL.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				LAB_RESULT_VAL.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  

and 				TEST_RESULT_GROUPING.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				TEST_RESULT_GROUPING.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  

and 				LAB_TEST.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				LAB_TEST.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  

and 				LAB_TEST_RESULT.RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  				LAB_TEST_RESULT.RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  


and LAB_TEST.LAB_TEST_CD ='LAB330'
order by LAB_RPT_LOCAL_ID;
QUIT;

DATA RESULTED_TEST_DETAILS;
SET RESULTED_TEST_DETAILS;
by PARENT_TEST_PNTR;
format LAB1-LAB34 $50.;
array LAB(35) LAB1-LAB35;
retain LAB1-LAB35 ' ' i 0;

if first.PARENT_TEST_PNTR then do;
do j=1 to 35; LAB(j) = ''; end;
i = 0; 
end;
i+1;
if i <= 35 then do; 
if LAB_TEST_CD = 'LAB329a' then LAB(1) = TEST_RESULT_VAL_CD_DESC;
if LAB_TEST_CD = 'LAB330' then LAB(2) = TEST_RESULT_VAL_CD_DESC;
if LAB_TEST_CD = 'LAB331'  then LAB(3) = TEST_RESULT_VAL_CD_DESC;
if LAB_TEST_CD = 'LAB332'  then LAB(4) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB333'  then LAB(5) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB334'  then LAB(6) = FROM_TIME; 
if LAB_TEST_CD = 'LAB335'  then LAB(7) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB336'  then LAB(8) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB337'  then LAB(9) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB338'  then LAB(10) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB339'  then LAB(11) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB340'  then LAB(12) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB341'  then LAB(13) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB342'  then LAB(14) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB343'  then LAB(15) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB344'  then LAB(16) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB345'  then LAB(17) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB346'  then LAB(18) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB347'  then LAB(19) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB348'  then LAB(20) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB349'  then LAB(21) = FROM_TIME; 
if LAB_TEST_CD = 'LAB350'  then LAB(22) = FROM_TIME; 
if LAB_TEST_CD = 'LAB351'  then LAB(23) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB352'  then LAB(24) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB353'  then LAB(25) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB354'  then LAB(26) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB355'  then LAB(27) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB356'  then LAB(28) = FROM_TIME;  
if LAB_TEST_CD = 'LAB357'  then LAB(29) = FROM_TIME;  
if LAB_TEST_CD = 'LAB358'  then LAB(30) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB359'  then LAB(31) = TEST_RESULT_VAL_CD_DESC; 
if LAB_TEST_CD = 'LAB360'  then LAB(32) = LAB_RESULT_TXT_VAL; 
if LAB_TEST_CD = 'LAB361'  then LAB(33) = FROM_TIME; 
if LAB_TEST_CD = 'LAB362'  then LAB(34) = FROM_TIME; 
if LAB_TEST_CD = 'LAB363'  then LAB(35) = TEST_RESULT_VAL_CD_DESC;
end;
if last.PARENT_TEST_PNTR then output;
run;

PROC SORT DATA=RESULTED_TEST_DETAILS;
BY LAB_RPT_LOCAL_ID;
RUN;
PROC SQL;
CREATE TABLE ISOLATE_TRACKING_WITH_LAB330 AS
	SELECT TRACK_INFO.*,
		   LAB330.LAB330
	FROM WORK.RESULTED_TEST_DETAILS AS TRACK_INFO
	LEFT outer JOIN WORK.ISOLATE_TRACKING_LAB330_INIT AS LAB330
	ON TRACK_INFO.LAB_RPT_LOCAL_ID=LAB330.LAB_RPT_LOCAL_ID;
QUIT;
PROC SQL;
CREATE TABLE LAB101_INIT AS
	SELECT 	OID as PROGRAM_JURISDICTION_OID 'PROGRAM_JURISDICTION_OID',
			lab_test_cd_desc as RESULTED_LAB_TEST_CD_DESC 'RESULTED_LAB_TEST_CD_DESC',
			SPECIMEN_SRC_DESC,
			PARENT_TEST_PNTR,
			SPECIMEN_SRC_CD,
			RECORD_STATUS_CD,
			LAB_RPT_LOCAL_ID,
			RESULTED_LAB_TEST_KEY as RESULTED_LAB_TEST_KEY 'RESULTED_LAB_TEST_KEY',
			LAB_RPT_CREATED_DT,
			SPECIMEN_COLLECTION_DT as SPECIMEN_COLLECTION_DT 'SPECIMEN_COLLECTION_DT',
			LAB_RPT_RECEIVED_BY_PH_DT,
			LAB_TEST_DT,
			LAB_RPT_CREATED_DT,
			LAB.LAB330 AS PATIENT_STATUS 'PATIENT_STATUS',
			LAB.LAB1 AS TRACK_ISO_IND  'TRACK_ISO_IND',
			/*LAB.LAB2 AS ISO_RECEIVED_IND 'ISO_RECEIVED_IND',*/
			LAB.LAB3 AS ISO_RECEIVED_IND 'ISO_RECEIVED_IND',
			LAB.LAB4  AS ISO_NO_RECEIVED_REASON 'ISO_NO_RECEIVED_REASON',
			LAB.LAB5  AS ISO_NO_RECEIVED_REASON_OTH 'ISO_NO_RECEIVED_REASON_OTH',
			LAB.LAB6 as ISO_RECEIVED_DT 'ISO_RECEIVED_DT',
			LAB.LAB7  AS ISO_STATEID_NUM 'ISO_STATEID_NUM',
			LAB.LAB8  AS CASE_LAB_CONFIRMED_IND 'CASE_LAB_CONFIRMED_IND',
			LAB.LAB9  AS PULSENET_ISO_IND 'PULSENET_ISO_IND',
			LAB.LAB10  AS PFGE_PULSENET_SENT 'PFGE_PULSENET_SENT',
			LAB.LAB11 AS  PFGE_PULSENET_ENZYME1 'PFGE_PULSENET_ENZYME1',
			LAB.LAB12 AS  PFGE_STATELAB_ENZYME1 'PFGE_STATELAB_ENZYME1',
			LAB.LAB13 AS  PFGE_PULSENET_ENZYME2 'PFGE_PULSENET_ENZYME2',
			LAB.LAB14 AS  PFGE_STATELAB_ENZYME2 'PFGE_STATELAB_ENZYME2',
			LAB.LAB15 AS  PFGE_PULSENET_ENZYME3 'PFGE_PULSENET_ENZYME3',
			LAB.LAB16 AS  PFGE_STATELAB_ENZYME3 'PFGE_STATELAB_ENZYME3',
			LAB.LAB17 AS  NARMS_ISO_IND 'NARMS_ISO_IND',
			LAB.LAB18 AS  NARMS_ISO_SENT_IND 'NARMS_ISO_SENT_IND',
			LAB.LAB19 AS  NARMS_NO_SENT_REASON 'NARMS_NO_SENT_REASON',
			LAB.LAB20 AS  NARMS_STATEID_NUM 'NARMS_STATEID_NUM',
			LAB.LAB21 AS  NARMS_EXPECTED_SHIP_DT 'NARMS_EXPECTED_SHIP_DT',
			LAB.LAB22 AS  NARMS_ACTUAL_SHIP_DT 'NARMS_ACTUAL_SHIP_DT',
			LAB.LAB23 AS  EIP_ISO_IND 'EIP_ISO_IND',
			LAB.LAB24 AS  EIP_SPEC_AVAIL_IND 'EIP_SPEC_AVAIL_IND',
			LAB.LAB25 AS  EIP_SPEC_NO_REASON 'EIP_SPEC_NO_REASON',
			LAB.LAB26 AS  EIP_SPEC_NO_REASON_OTH 'EIP_SPEC_NO_REASON_OTH',
			LAB.LAB27 AS  EIP_SHIP_LOCATION 'EIP_SHIP_LOCATION',
			LAB.LAB28 AS  EIP_EXPECTED_SHIP_DT 'EIP_EXPECTED_SHIP_DT',
			LAB.LAB29 AS  EIP_ACTUAL_SHIP_DT 'EIP_ACTUAL_SHIP_DT',
			LAB.LAB30 AS  EIP_SPEC_RESHIP_IND 'EIP_SPEC_RESHIP_IND',
			LAB.LAB31 AS  EIP_SPEC_RESHIP_REASON 'EIP_SPEC_RESHIP_REASON',
			LAB.LAB32 AS  EIP_SPEC_RESHIP_REASON_OTH 'EIP_SPEC_RESHIP_REASON_OTH',
			LAB.LAB33 AS  EIP_SPEC_EXPECTED_RESHIP_DT 'EIP_SPEC_EXPECTED_RESHIP_DT',
			LAB.LAB34 AS  EIP_SPEC_ACTUAL_RESHIP_DT 'EIP_SPEC_ACTUAL_RESHIP_DT',
			LAB.LAB35 AS  ISO_SENT_CDC_IND 'ISO_SENT_CDC_IND'			
FROM WORK.ISOLATE_TRACKING_WITH_LAB330 AS LAB
	ORDER BY LAB_RPT_LOCAL_ID;
QUIT;
data LAB101_INIT;
  set LAB101_INIT;
  TRACK_ISO_IND = 'Yes';
  ISO_RECEIVED_DATE= input(put(trim(ISO_RECEIVED_DT),8.), mmddyy8.);
  NARMS_EXPECTED_SHIP_DATE= input(put(trim(NARMS_EXPECTED_SHIP_DT),8.), mmddyy8.);
  NARMS_ACTUAL_SHIP_DATE= input(put(trim(NARMS_ACTUAL_SHIP_DT),8.), mmddyy8.);
  EIP_EXPECTED_SHIP_DATE= input(put(trim(EIP_EXPECTED_SHIP_DT),8.), mmddyy8.);
  EIP_ACTUAL_SHIP_DATE= input(put(trim(EIP_ACTUAL_SHIP_DT),8.), mmddyy8.);
  EIP_SPEC_EXPECTED_RESHIP_DATE= input(put(trim(EIP_SPEC_EXPECTED_RESHIP_DT),8.), mmddyy8.);
  EIP_SPEC_ACTUAL_RESHIP_DATE= input(put(trim(EIP_SPEC_ACTUAL_RESHIP_DT),8.), mmddyy8.);
  run;

data LAB101_INIT;
  set LAB101_INIT;
ISO_RECEIVED_DATE = ISO_RECEIVED_DT;
NARMS_EXPECTED_SHIP_DATE=NARMS_EXPECTED_SHIP_DT;
NARMS_ACTUAL_SHIP_DATE=NARMS_ACTUAL_SHIP_DT;
EIP_EXPECTED_SHIP_DATE=EIP_EXPECTED_SHIP_DT;
EIP_ACTUAL_SHIP_DATE= EIP_ACTUAL_SHIP_DT;
EIP_SPEC_EXPECTED_RESHIP_DATE=EIP_SPEC_EXPECTED_RESHIP_DT;
EIP_SPEC_ACTUAL_RESHIP_DATE=EIP_SPEC_ACTUAL_RESHIP_DT;
run;
DATA LAB101_INIT; 
SET LAB101_INIT;
EVENT_DATE = SPECIMEN_COLLECTION_DT;
IF SPECIMEN_COLLECTION_DT ~= .  THEN 
		EVENT_DATE = SPECIMEN_COLLECTION_DT;
ELSE IF LAB_TEST_DT ~= . THEN 
		EVENT_DATE = LAB_TEST_DT;
ELSE IF LAB_RPT_RECEIVED_BY_PH_DT ~=. THEN 
		EVENT_DATE =LAB_RPT_RECEIVED_BY_PH_DT;
ELSE IF LAB_RPT_CREATED_DT ~=. THEN 
		EVENT_DATE =LAB_RPT_CREATED_DT;
RUN;
Data LAB101_INIT;
SET LAB101_INIT;
IF  EVENT_DATE~= .
then output LAB101_INIT;
run; 
/* Populate REPORTING_FACILITY_UID by joining with LAB100 on RESULTED_LAB_TEST_KEY */
PROC SQL ; 
CREATE TABLE LAB101_INIT2 AS 
  SELECT L101.*, L100.REPORTING_FACILITY_UID  
  FROM WORK.LAB101_INIT AS L101, NBS_RDB.LAB100 AS L100
  WHERE L101.RESULTED_LAB_TEST_KEY = L100.RESULTED_LAB_TEST_KEY;
run;

PROC SQL ; 
CREATE TABLE RDBDATA.LAB101 AS 
  SELECT LAB101_INIT2.*,
  EVENT_DATE 
 FROM WORK.LAB101_INIT2 AS LAB101_INIT2
      ORDER BY EVENT_DATE;
run;
DATA RDBDATA.LAB101;
SET RDBDATA.LAB101;
RDB_LAST_REFRESH_TIME=DATETIME();
RUN;
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM RDBDATA.LAB101),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.LAB101) + (SELECT COUNT(*) FROM RDBDATA.LAB101),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=((SELECT COUNT(*) FROM RDBDATA.LAB101) -(SELECT COUNT(*) FROM UPDATED_LAB101)),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM UPDATED_LAB101),
PROCESS_UID= (SELECT PROCESS_UID FROM NBS_RDB.ETL_PROCESS WHERE PROCESS_NAME='LAB101');
QUIT;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID=. THEN ACTIVITY_LOG_DETAIL_UID=1;
ELSE ACTIVITY_LOG_DETAIL_UID= ACTIVITY_LOG_DETAIL_UID +1;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN LAB101 TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE LAB101 TABLE.';
RUN;
%DBLOAD (LAB101, RDBDATA.LAB101);
%dbload(ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);

/*DELETES ALL REMAINING TEMPORARY FILES FROM THE WORK FOLDER*/ 

PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;
QUIT;

