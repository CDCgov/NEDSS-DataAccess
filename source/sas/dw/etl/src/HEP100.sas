%MACRO DBLOAD (DBTABLE, DSNAME);
 PROC APPEND FORCE BASE=NBS_RDB.&DBTABLE DATA=&DSNAME;
 RUN;
 QUIT;
%MEND DBLOAD;
OPTIONS SORTPGM=BEST;
options compress=yes;

proc sql;
CREATE TABLE HEP100_LAST 
(date_last_ran DATE, 
START_DATE DATE
);
INSERT INTO HEP100_LAST( date_last_ran , START_DATE) VALUES 
('01jun1900'd,'01jun1900'd,);
update HEP100_LAST set date_last_ran = (select max(refresh_datetime) from nbs_rdb.hep100),
  START_DATE =DATETIME();
quit;

data HEP100_LAST;
set HEP100_LAST;
if date_last_ran =. THEN date_last_ran ='01jun1900'd;
run;

proc sql;
create table updated_hep_PATIENT as select 
 			P.PATIENT_UID
from nbs_rdb.D_PATIENT p, NBS_RDB.HEP100
where P.PATIENT_UID=HEP100.PATIENT_UID
AND PATIENT_LAST_CHANGE_TIME>select date_last_ran from HEP100_LAST;

create table updated_hep_PHYSICIAN as select 
 			P.PROVIDER_UID AS PHYSICIAN_UID 'PHYSICIAN_UID'
from nbs_rdb.D_PROVIDER p, NBS_RDB.HEP100
where P.PROVIDER_UID=HEP100.PHYSICIAN_UID
AND PROVIDER_LAST_CHANGE_TIME>select date_last_ran from HEP100_LAST;


create table updated_hep_INVESTIGATOR as select 
 			P.PROVIDER_UID AS INVESTIGATOR_UID 'INVESTIGATOR_UID'
from nbs_rdb.D_PROVIDER p, NBS_RDB.HEP100
where P.PROVIDER_UID=HEP100.INVESTIGATOR_UID
AND PROVIDER_LAST_CHANGE_TIME>select date_last_ran from HEP100_LAST;


create table updated_hep_REPORTING as select 
 			P.ORGANIZATION_UID AS REPORTING_UID 'REPORTING_UID'
from nbs_rdb.D_ORGANIZATION p, NBS_RDB.HEP100
where  P.ORGANIZATION_UID=HEP100.REPORTING_SOURCE_UID
AND ORGANIZATION_LAST_CHANGE_TIME>select date_last_ran from HEP100_LAST;

delete from nbs_rdb.hep100 where PATIENT_UID in (select distinct PATIENT_UID from updated_hep_PATIENT);
delete from nbs_rdb.hep100 where PHYSICIAN_UID in (select distinct PHYSICIAN_UID from updated_hep_PHYSICIAN);
delete from nbs_rdb.hep100 where INVESTIGATOR_UID in (select distinct INVESTIGATOR_UID from updated_hep_INVESTIGATOR);
delete from nbs_rdb.hep100 where REPORTING_SOURCE_UID in (select distinct REPORTING_SOURCE_UID from updated_hep_REPORTING);

create table existing_hep100_case as select distinct hep100.investigation_key from nbs_rdb.hep100, nbs_rdb.investigation
where hep100.case_uid=investigation.case_uid;

create table new_hep100_case as select distinct hepatitis_case.investigation_key from nbs_rdb.hepatitis_case, nbs_rdb.investigation
where hepatitis_case.investigation_key=investigation.investigation_key
and hepatitis_case.investigation_key
except select investigation_key from existing_hep100_case;
quit;

proc sql;
create table CHANGED_HEP_RECORD as select 
			case.*,
			P.PATIENT_local_id AS PATIENT_LOCAL_ID 'PATIENT_LOCAL_ID',
			P.PATIENT_FIRST_NAME AS PATIENT_FIRST_NM 'PATIENT_FIRST_NM',
			P.PATIENT_MIDDLE_NAME AS PATIENT_MIDDLE_NM 'PATIENT_MIDDLE_NM',
			P.PATIENT_LAST_NAME AS PATIENT_LAST_NM 'PATIENT_LAST_NM',         
		 	P.PATIENT_DOB AS PATIENT_DOB 'PATIENT_DOB',   
			P.PATIENT_AGE_REPORTED AS PATIENT_REPORTED_AGE'PATIENT_REPORTED_AGE', 
			P.PATIENT_AGE_REPORTED_UNIT AS PATIENT_REPORTED_AGE_UNITS 'PATIENT_REPORTED_AGE_UNITS', 
			P.PATIENT_CURRENT_SEX AS PATIENT_CURR_GENDER 'PATIENT_CURR_GENDER',      
 			P.PATIENT_ENTRY_METHOD AS PATIENT_ELECTRONIC_IND'PATIENT_ELECTRONIC_IND',
 			P.PATIENT_UID AS PATIENT_UID 'PATIENT_UID',
			P.PATIENT_STREET_ADDRESS_1,
			P.PATIENT_STREET_ADDRESS_2,
			P.PATIENT_CITY,
			P.PATIENT_STATE,
			P.PATIENT_ZIP,
			P.PATIENT_COUNTY,
			P.PATIENT_COUNTRY,
			P.PATIENT_key,
			P.PATIENT_ADD_TIME,
			p.PATIENT_RACE_CALC_DETAILS AS RACE 'RACE',
			P.PATIENT_LAST_CHANGE_TIME from nbs_rdb.D_PATIENT p, nbs_rdb.hepatitis_case case,
			new_hep100_case new_case
			where case.patient_key = p.patient_key
			and  new_case.investigation_key= case.investigation_key;
QUIT;
data CHANGED_HEP_RECORD;
set CHANGED_HEP_RECORD;
	LENGTH PATIENT_ADDRESS $200;

    STREET_ADDR=trim(PATIENT_STREET_ADDRESS_1)||' '||trim(PATIENT_STREET_ADDRESS_2);
	PATIENT_ADDRESS=TRIM(PATIENT_STREET_ADDRESS_1);

	IF lengthn(TRIM(PATIENT_STREET_ADDRESS_2))>0 then PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_STREET_ADDRESS_2);
	IF lengthn(TRIM(PATIENT_CITY))>0 then PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_CITY);
	IF lengthn(TRIM(PATIENT_COUNTY))>0 then PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_COUNTY);
	IF lengthn(TRIM(PATIENT_ZIP))>0 then PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_ZIP);
	IF lengthn(TRIM(PATIENT_STATE))>0 then PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_STATE);
	PATIENT_CITY=propcase(PATIENT_CITY);
	PATIENT_ZIP_CODE=PATIENT_ZIP;
	PATIENT_COUNTY=PATIENT_COUNTY;
	state_short_desc=PATIENT_STATE;
	PATIENT_ZIP_CODE=PATIENT_ZIP;
	X = LENGTHN(TRIM(PATIENT_ADDRESS));
	IF X>0 THEN ADDR_USE_CD_DESC= 'Home';
	ELSE  ADDR_USE_CD_DESC= '';
	IF X>0 THEN ADDR_CD_DESC='House';
	ELSE ADDR_CD_DESC='';
	DROP PATIENT_STREET_ADDRESS_1 PATIENT_STREET_ADDRESS_2 X;
run;

proc sql;
create table investigation as select HC.*, I.INV_LOCAL_ID 'INV_LOCAL_ID',	
			I.INVESTIGATION_STATUS 'INVESTIGATION_STATUS',	
			I.INV_CASE_STATUS 'INV_CASE_STATUS',	
			I.JURISDICTION_NM AS INV_JURISDICTION_NM 'INV_JURISDICTION_NM',	
			I.ILLNESS_ONSET_DT 'ILLNESS_ONSET_DT',	
			I.INV_START_DT 'INV_START_DT',
			I.INV_RPT_DT 'INV_RPT_DT',	
			I.RPT_SRC_CD_DESC 'RPT_SRC_CD_DESC',	
			I.EARLIEST_RPT_TO_CNTY_DT 'EARLIEST_RPT_TO_CNTY_DT',	
			I.EARLIEST_RPT_TO_STATE_DT 'EARLIEST_RPT_TO_STATE_DT',	
			I.DIE_FRM_THIS_ILLNESS_IND 'DIE_FRM_THIS_ILLNESS_IND',	
			I.OUTBREAK_IND 'OUTBREAK_IND',
    		I.DISEASE_IMPORTED_IND,
			I.IMPORT_FRM_CNTRY AS IMPORT_FROM_COUNTRY 'IMPORT_FROM_COUNTRY',
			I.IMPORT_FRM_STATE AS IMPORT_FROM_STATE 'IMPORT_FROM_STATE',
			I.IMPORT_FRM_CNTY AS IMPORT_FROM_COUNTY 'IMPORT_FROM_COUNTY',
			I.IMPORT_FRM_CITY AS IMPORT_FROM_CITY 'IMPORT_FROM_CITY',
			I.CASE_RPT_MMWR_WK 'CASE_RPT_MMWR_WK',	
			I.CASE_RPT_MMWR_YR 'CASE_RPT_MMWR_YR',	
			I.DIAGNOSIS_DT 'DIAGNOSIS_DT',	
			I.HSPTLIZD_IND 'HSPTLIZD_IND',
			I.HSPTL_ADMISSION_DT 'HSPTL_ADMISSION_DT',
			I.HSPTL_DISCHARGE_DT,
			I.HSPTL_DURATION_DAYS,
			I.TRANSMISSION_MODE,
			I.CASE_OID AS PROGRAM_JURISDICTION_OID 'PROGRAM_JURISDICTION_OID',
			I.INV_COMMENTS 'INV_COMMENTS',
			I.RECORD_STATUS_CD,
			I.CASE_UID,
			HC.PATIENT_ADD_TIME AS INV_ADD_TIME 'INV_ADD_TIME'
			
			from CHANGED_HEP_RECORD HC
			inner join nbs_rdb.investigation I 
			on HC.investigation_key=I.investigation_key
			where I.RECORD_STATUS_CD = 'ACTIVE';
QUIT;

proc sql;
create table HEP_PATIENT as 
	select  I.*,
			C.CONDITION_SHORT_NM AS CONDITION 'CONDITION',
			C.PROGRAM_AREA_DESC,
			C.CONDITION_CD
	from investigation I	
	inner join NBS_RDB.CONDITION C
	on C.CONDITION_KEY = I.CONDITION_KEY;
QUIT;

proc datasets memtype=DATA;
   delete HEP_PATIENT_ADD;
run;

/* DELETE ALL CASES WHICH ARE "NOT A CASE". THIS IS BECAUSE SOME CASES HAVE BEEN ENTERED INTO THE SYSTEM ERRONEOUSLY MAYBE
FOR TEST PURPOSES. 

DATA HEP_PATIENTCOMPL_INV;
SET HEP_PAT_ADD_INV;
IF INV_CASE_STATUS NE 'Not a Case' THEN OUTPUT;
RUN;
*/

/* GET THE PHYSICIAN INFORMATION. 
THIS IS DIFFERENT FROM THE PROVIDER INFORMATION IN THE LABORATORY DATABASE. IN THE MAIN APPLICATION, 
ONLY THE PROVIDER NAME AND CONTACT NUMBER IS ENTERED. NO PROVIDER ADDRESS.  INVESTIGATOR_NAME*/
PROC SQL;
CREATE TABLE HEP_PAT_PROV AS SELECT 
			CASE.*,
			P.PROVIDER_LOCAL_ID,
			P.PROVIDER_FIRST_NAME AS PHYSICIAN_FIRST_NM 'PHYSICIAN_FIRST_NM' ,
			P.PROVIDER_MIDDLE_NAME AS PHYSICIAN_MIDDLE_NM 'PHYSICIAN_MIDDLE_NM',
			P.PROVIDER_LAST_NAME AS PHYSICIAN_LAST_NM 'PHYSICIAN_LAST_NM',         
		 	P.PROVIDER_CITY AS PHYSICIAN_CITY 'PHYSICIAN_CITY',
			P.PROVIDER_STATE AS PHYSICIAN_STATE 'PHYSICIAN_STATE',
			P.PROVIDER_COUNTY AS PHYSICIAN_COUNTY 'PHYSICIAN_COUNTY',
			P.PROVIDER_ADD_TIME,
			P.PROVIDER_LAST_CHANGE_TIME, 
			P.PROVIDER_UID AS PHYSICIAN_UID 'PHYSICIAN_UID',
			INVGTR.PROVIDER_FIRST_NAME AS INVESTIGATOR_FIRST_NM 'INVESTIGATOR_FIRST_NM' ,
			INVGTR.PROVIDER_MIDDLE_NAME AS INVESTIGATOR_MIDDLE_NM 'INVESTIGATOR_MIDDLE_NM',
			INVGTR.PROVIDER_LAST_NAME AS INVESTIGATOR_LAST_NM 'INVESTIGATOR_LAST_NM',         
			INVGTR.PROVIDER_UID AS INVESTIGATOR_UID,
			REPTORG.ORGANIZATION_NAME AS REPORTING_FACILITY 'REPORTING_FACILITY',
			REPTORG.ORGANIZATION_COUNTY AS REPORTING_FACILITY_COUNTY 'REPORTING_FACILITY_COUNTY',
			REPTORG.ORGANIZATION_STATE AS REPORTING_FACILITY_STATE 'REPORTING_FACILITY_STATE',
			REPTORG.ORGANIZATION_CITY AS  REPORTING_FACILITY_CITY 'REPORTING_FACILITY_CITY',
			REPTORG.ORGANIZATION_UID AS REPORTING_SOURCE_UID 'REPORTING_SOURCE_UID'
FROM HEP_PATIENT CASE LEFT OUTER JOIN NBS_RDB.D_PROVIDER P
			ON CASE.physician_key = P.PROVIDER_KEY
			LEFT OUTER JOIN NBS_RDB.D_PROVIDER INVGTR
			ON CASE.INVESTIGATOR_KEY = INVGTR.PROVIDER_KEY
			LEFT OUTER JOIN NBS_RDB.D_ORGANIZATION REPTORG
			ON CASE.RPT_SRC_ORG_KEY=REPTORG.ORGANIZATION_KEY
;
QUIT;
DATA HEP_PAT_PROV;
SET HEP_PAT_PROV;
PHYSICIAN_NAME=trim(PHYSICIAN_first_nm)||','||trim(PHYSICIAN_middle_nm)||','||trim(PHYSICIAN_last_nm);
INVESTIGATOR_NAME=trim(INVESTIGATOR_first_nm)||','||trim(INVESTIGATOR_middle_nm)||','||trim(INVESTIGATOR_last_nm);
LENGTHP=LENGTHN(TRIM(PHYSICIAN_CITY) ||''||TRIM(PHYSICIAN_STATE) ||''||TRIM(PHYSICIAN_COUNTY));
LENGTHO= LENGTHN(TRIM(REPORTING_FACILITY_COUNTY) ||''|| TRIM(REPORTING_FACILITY_STATE) ||''|| TRIM(REPORTING_FACILITY_CITY));
IF 	LENGTHP > 0 THEN PHYSICIAN_ADDRESS_USE_DESC='Primary Work Place';
IF 	LENGTHP > 0 THEN PHYSICIAN_ADDRESS_TYPE_DESC='Office';
IF 	LENGTHO > 0 THEN REPORTING_SOURCE_ADDRESS_USE='Primary Work Place';
IF 	LENGTHO > 0 THEN REPORTING_SOURCE_ADDRESS_TYPE='Office';
DROP PHYSICIAN_first_nm PHYSICIAN_middle_nm PHYSICIAN_last_nm INVESTIGATOR_first_nm INVESTIGATOR_middle_nm INVESTIGATOR_last_nm
LENGTHO LENGTHP;
RUN;
/*
Derive the event date using following algorithm
1. Illness_onset_dt
2. Diagnosis_Dt
3. The earliest of the following dates:
	Earliest_rpt_to_cnty_dt,
	Earliest_rpt_to_state_dt,
	Inv_rpt_dt. Inv_rpt_dt,
	Inv_start_dt,
	ALT_Result_dt,
	AST_result_dt,
	HSPTL_Admission_dt,
	Hsptl_discharge_dt
*/
data HEPATITIS_DBASE_WITH_EVENT_DATE;
REFRESH_DATETIME=datetime();
set HEP_PAT_PROV;
if ILLNESS_ONSET_DT ~= . then 
		EVENT_DATE = ILLNESS_ONSET_DT;
else if DIAGNOSIS_DT ~= . then 
		EVENT_DATE = DIAGNOSIS_DT;
if EVENT_DATE = . then
	do; 
		EVENT_DATE = EARLIEST_RPT_TO_CNTY_DT;
		if EVENT_DATE ~= . then
		    do; 
				if EARLIEST_RPT_TO_STATE_DT ~= . AND EARLIEST_RPT_TO_STATE_DT < EVENT_DATE then
				EVENT_DATE=EARLIEST_RPT_TO_STATE_DT;
			end;
		else EVENT_DATE = EARLIEST_RPT_TO_STATE_DT;

		if EVENT_DATE ~= . then
		    do; 
				if INV_RPT_DT ~= . AND INV_RPT_DT < EVENT_DATE then
				EVENT_DATE=INV_RPT_DT;
			end;
		else EVENT_DATE = INV_RPT_DT;

		if EVENT_DATE ~= . then
		    do; 
				if INV_START_DT ~= . AND INV_START_DT < EVENT_DATE then
				EVENT_DATE=INV_START_DT;
			end;
		else EVENT_DATE = INV_START_DT;

		if EVENT_DATE ~= . then
		    do; 
				if ALT_RESULT_DT ~= . AND ALT_RESULT_DT < EVENT_DATE then
				EVENT_DATE=ALT_RESULT_DT;
			end;
		else EVENT_DATE = ALT_RESULT_DT;

		if EVENT_DATE ~= . then
		    do; 
				if AST_RESULT_DT ~= . AND AST_RESULT_DT < EVENT_DATE then
				EVENT_DATE=AST_RESULT_DT;
			end;
		else EVENT_DATE = AST_RESULT_DT;

		if EVENT_DATE ~= . then
		    do; 
				if HSPTL_ADMISSION_DT ~= . AND HSPTL_ADMISSION_DT < EVENT_DATE then
				EVENT_DATE=HSPTL_ADMISSION_DT;
			end;
		else EVENT_DATE = HSPTL_ADMISSION_DT;

		if EVENT_DATE ~= . then
		    do; 
				if HSPTL_DISCHARGE_DT ~= . AND HSPTL_DISCHARGE_DT < EVENT_DATE then
				EVENT_DATE=HSPTL_DISCHARGE_DT;
			end;
		else EVENT_DATE = HSPTL_DISCHARGE_DT;

		if EVENT_DATE ~= . then
		    do; 
				if INV_ADD_TIME ~= . AND INV_ADD_TIME < EVENT_DATE then
				EVENT_DATE=INV_ADD_TIME;
			end;
		else EVENT_DATE = INV_ADD_TIME;

end;
run; 

DATA HEPATITIS_DBASE (DROP= PATIENT_REPORTED_AGE Case_Rpt_MMWR_Wk CASE_RPT_MMWR_YR);
SET HEPATITIS_DBASE_WITH_EVENT_DATE;
rename
Case_Rpt_MMWR_Wk = Case_Rpt_MMWR_WEEK
CASE_RPT_MMWR_YR = CASE_RPT_MMWR_YEAR
PATIENT_REPORTED_AGE=PATIENT_REPORTEDAGE
;
run;
PROC SORT DATA=HEPATITIS_DBASE OUT=HEPATITIS_DBASE NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
PROC SQL;
CREATE TABLE RDBDATA.HEP100 AS
		SELECT 	PATIENT_LOCAL_ID,
				PROGRAM_JURISDICTION_OID,
				PATIENT_FIRST_NM,
				PATIENT_MIDDLE_NM ,
				PATIENT_LAST_NM,         
				PATIENT_DOB,
				PATIENT_REPORTEDAGE,  
				PATIENT_REPORTED_AGE_UNITS,
				ADDR_USE_CD_DESC,
				ADDR_CD_DESC,
				PATIENT_ADDRESS,  
				PATIENT_CITY,
				PATIENT_COUNTY,
				PATIENT_ZIP_CODE, 
				PATIENT_CURR_GENDER,      
				PATIENT_ELECTRONIC_IND,
				RACE,
				CONDITION_CD,
				CONDITION,
				INV_LOCAL_ID ,
				INVESTIGATION_STATUS,
				INV_CASE_STATUS,
				INV_JURISDICTION_NM,
				RPT_SRC_CD_DESC,
				REPORTING_FACILITY AS REPORTING_SOURCE 'REPORTING_SOURCE',
				REPORTING_FACILITY_COUNTY AS REPORTING_SOURCE_COUNTY,
				REPORTING_FACILITY_CITY AS REPORTING_SOURCE_CITY,
				REPORTING_FACILITY_STATE AS REPORTING_SOURCE_STATE,
				REPORTING_SOURCE_ADDRESS_USE,
				REPORTING_SOURCE_ADDRESS_TYPE,
				PHYSICIAN_NAME,
				PHYSICIAN_COUNTY,
				PHYSICIAN_CITY,
				PHYSICIAN_STATE,
				PHYSICIAN_ADDRESS_USE_DESC,
				PHYSICIAN_ADDRESS_TYPE_DESC,
				INVESTIGATOR_NAME,
				HEP_A_TOTAL_ANTIBODY,
				HEP_A_IGM_ANTIBODY,
				HEP_B_SURFACE_ANTIGEN,
				HEP_B_TOTAL_ANTIBODY,
				HEP_B_IGM_ANTIBODY,
				HEP_C_TOTAL_ANTIBODY,
				HEP_D_TOTAL_ANTIBODY,
				HEP_E_TOTAL_ANTIBODY,
				ANTIHCV_SIGNAL_TO_CUTOFF_RATIO,
				ANTIHCV_SUPPLEMENTAL_ASSAY,
				HCV_RNA,
				ALT_SGPT_RESULT,
				ALT_SGPT_RESULT_UPPER_LIMIT,
				AST_SGOT_RESULT,
				AST_SGOT_RESULT_UPPER_LIMIT,
				ALT_RESULT_DT,
				AST_RESULT_DT,
				INV_START_DT,
				INV_RPT_DT,
				EARLIEST_RPT_TO_CNTY_DT,
				EARLIEST_RPT_TO_STATE_DT,
				DIE_FRM_THIS_ILLNESS_IND ,
				ILLNESS_ONSET_DT,
				DIAGNOSIS_DT,
				HSPTLIZD_IND,
				HSPTL_ADMISSION_DT,
				HSPTL_DISCHARGE_DT,
				HSPTL_DURATION_DAYS,
				OUTBREAK_IND,
				TRANSMISSION_MODE,
				DISEASE_IMPORTED_IND,
				IMPORT_FROM_COUNTRY,
				IMPORT_FROM_STATE,
				IMPORT_FROM_COUNTY,
				IMPORT_FROM_CITY,
				INV_COMMENTS,
				CASE_RPT_MMWR_WEEK,
				CASE_RPT_MMWR_YEAR,
				PATIENT_SYMPTOMATIC_IND,
				PATIENT_JUNDICED_IND,
				PATIENT_PREGNANT_IND,
				PATIENT_PREGNANCY_DUE_DT,
				HEP_A_EPLINK_IND,
				HEP_A_CONTACTED_IND,
				D_N_P_EMPLOYEE_IND,
				D_N_P_HOUSEHOLD_CONTACT_IND,
				HEP_A_KEYENT_IN_CHILDCARE_IND,
				HEPA_MALE_SEX_PARTNER_NBR,
				HEPA_FEMALE_SEX_PARTNER_NBR,
				STREET_DRUG_INJECTED_IN_2_6_WK,
				STREET_DRUG_USED_IN_2_6_WK,
				TRAVEL_OUT_USA_CAN_IND,
				HOUSEHOLD_NPP_OUT_USA_CAN,
				PART_OF_AN_OUTBRK_IND,
				ASSOCIATED_OUTBRK_TYPE,
				FOODBORNE_OUTBRK_FOOD_ITEM,
				FOODHANDLER_2_WK_PRIOR_ONSET,
				HEP_A_VACC_RECEIVED_IND,
				HEP_A_VACC_RECEIVED_DOSE,
				HEP_A_VACC_LAST_RECEIVED_YR,
				IMMUNE_GLOBULIN_RECEIVED_IND,
				GLOBULIN_LAST_RECEIVED_YR,
				HEP_B_CONTACTED_IND,
				HEPB_STD_TREATED_IND,
				HEPB_STD_LAST_TREATMENT_YR,
				STREET_DRUG_INJECTED_IN6WKMON,
				STREET_DRUG_USED_IN6WKMON,
				HEPB_FEMALE_SEX_PARTNER_NBR,
				HEPB_MALE_SEX_PARTNER_NBR,
				HEMODIALYSIS_IN_LAST_6WKMON,
				BLOOD_CONTAMINATION_IN6WKMON,
				HEPB_BLOOD_RECEIVED_IN6WKMON,
				HEPB_BLOOD_RECEIVED_DT,
				OUTPATIENT_IV_INFUSION_IN6WKMO,
				BLOOD_EXPOSURE_IN_LAST6WKMON,
				BLOOD_EXPOSURE_IN6WKMON_OTHER,
				HEPB_MED_DEN_EMPLOYEE_IN6WKMON,
				HEPB_MED_DEN_BLOOD_CONTACT_FRQ,
				HEPB_PUB_SAFETY_WORKER_IN6WKMO,
				HEPB_PUBSAFETY_BLOODCONTACTFRQ,
				TATTOOED_IN6WKMON_BEFORE_ONSET,
				PIERCING_IN6WKMON_BEFORE_ONSET,
				DEN_WORK_OR_SURGERY_IN6WKMON,
				NON_ORAL_SURGERY_IN6WKMON,
				HSPTLIZD_IN6WKMON_BEFORE_ONSET,
				LONGTERMCARE_RESIDENT_IN6WKMON,
				B_INCARCERATED24PLUSHRSIN6WKMO,
				B_INCARCERATED_6PLUS_MON_IND,
				B_LAST6PLUSMON_INCARCERATE_YR,
				BLAST6PLUSMO_INCARCERATEPERIOD,
				B_LAST_INCARCERATE_PERIOD_UNIT,
				HEP_B_VACC_RECEIVED_IND,
				HEP_B_VACC_SHOT_RECEIVED_NBR,
				HEP_B_VACC_LAST_RECEIVED_YR,
				ANTI_HBSAG_TESTED_IND,
				ANTI_HBS_POSITIVE_REACTIVE_IND,
				HEP_C_CONTACTED_IND,
				MED_DEN_EMPLOYEE_IN_2WK6MO,
				HEPC_MED_DEN_BLOOD_CONTACT_FRQ,
				PUBLIC_SAFETY_WORKER_IN_2WK6MO,
				HEPC_PUBSAFETY_BLOODCONTACTFRQ,
				TATTOOED_IN2WK6MO_BEFORE_ONSET,
				TATTOOED_IN2WK6MO_LOCATION,
				PIERCING_IN2WK6MO_BEFORE_ONSET,
				PIERCING_IN2WK6MO_LOCATION,
				STREET_DRUG_INJECTED_IN_2WK6MO,
				STREET_DRUG_USED_IN_2WK6MO,
				HEMODIALYSIS_IN_LAST_2WK6MO,
				BLOOD_CONTAMINATION_IN_2WK6MO,
				HEPC_BLOOD_RECEIVED_IN_2WK6MO,
				HEPC_BLOOD_RECEIVED_DT,
				BLOOD_EXPOSURE_IN_LAST2WK6MO,
				BLOOD_EXPOSURE_IN2WK6MO_OTHER,
				DEN_WORK_OR_SURGERY_IN2WK6MO,
				NON_ORAL_SURGERY_IN2WK6MO,
				HSPTLIZD_IN2WK6MO_BEFORE_ONSET,
				LONGTERMCARE_RESIDENT_IN2WK6MO,
				INCARCERATED_24PLUSHRSIN2WK6MO,
				HEPC_FEMALE_SEX_PARTNER_NBR,
				HEPC_MALE_SEX_PARTNER_NBR,
				C_INCARCERATED_6PLUS_MON_IND,
				C_LAST6PLUSMON_INCARCERATE_YR,
				CLAST6PLUSMO_INCARCERATEPERIOD,
				C_LAST_INCARCERATE_PERIOD_UNIT,
				HEPC_STD_TREATED_IND,
				HEPC_STD_LAST_TREATMENT_YR,
				BLOOD_TRANSFUSION_BEFORE_1992,
				ORGAN_TRANSPLANT_BEFORE_1992,
				CLOT_FACTOR_CONCERN_BEFORE1987,
				LONGTERM_HEMODIALYSIS_IND,
				EVER_INJECT_NONPRESCRIBED_DRUG,
				LIFETIME_SEX_PARTNER_NBR,
				EVER_INCARCERATED_IND,
				HEPATITIS_CONTACTED_IND,
				HEPATITIS_CONTACT_TYPE,
				HEPATITIS_OTHER_CONTACT_TYPE,
				HEPC_MED_DEN_EMPLOYEE_IND,
				OUTPATIENT_IV_INFUSIONIN2WK6MO,
				EVENT_DATE,
				HEP_MULTI_VAL_GRP_KEY,
				INVESTIGATION_KEY,
				HEP_B_E_ANTIGEN,
				HEP_B_DNA,
				PATIENT_UID,
				PHYSICIAN_UID,
				INVESTIGATOR_UID,
				CASE_UID, 
				REFRESH_DATETIME,
				REPORTING_SOURCE_UID,
				PLACE_OF_BIRTH
	FROM HEPATITIS_DBASE
	ORDER BY INV_LOCAL_ID DESC;
QUIT;
PROC SQL;
create table hep100base as select * from nbs_rdb.hep100;
QUIT;
data hep100base(DROP=INVESTIGATION_KEY);
set hep100base;
run;
/*PROC SQL;
create table hep100final as select hep100base.*, investigation_key
from hep100base inner join nbs_rdb.investigation on
investigation.CASE_UID=hep100base.CASE_UID;
DELETE * FROM NBS_RDB.HEP100;

QUIT; 
*/
%dbload (HEP100, RDBDATA.HEP100);
/*%dbload (HEP100, hep100final);*/
PROC SQL;
UPDATE NBS_RDB.HEP100 SET 
REFRESH_DATETIME=DATETIME();
QUIT;
/* DELETES ALL FILES FROM THE WORK FOLDER */
PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;

QUIT;

