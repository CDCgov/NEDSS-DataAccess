PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;
QUIT; 
%macro dbload (DBtable, DSname);
 Proc Append Force base=nbs_rdb.&DBtable data=&DSname;
 Run;
 Quit;
%mend dbload;

options fmtsearch=(nbsfmt);
 %macro assign_additional_key (ds, key);
 data &ds;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_additional_key;

options fmtsearch=(nbsfmt);

%macro contact_interview_incl;
PROC SQL;
CREATE TABLE F_CONTACT_RECORD_CASE_N AS SELECT L_CONTACT_RECORD_N.D_CONTACT_RECORD_KEY, THIRD_PARTY_ENTITY_KEY,
CONTACT_KEY, SUBJECT_KEY, THIRD_PARTY_INVESTIGATION_KEY, SUBJECT_INVESTIGATION_KEY, CONTACT_INVESTIGATION_KEY,
CONTACT_INTERVIEW_KEY,DISPOSITIONED_BY_KEY,CONTACT_EXPOSURE_SITE_KEY, CONTACT_INVESTIGATOR_KEY 
FROM L_CONTACT_RECORD_N
	LEFT OUTER  JOIN CONTACT_PHC
ON 
	CONTACT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_PHC
ON 	
	SUBJECT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_THIRD_PARTY_PHC
ON 
	CONTACT_THIRD_PARTY_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_ENTITITY
ON 
	SUBJECT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_ENTITITY
ON 
	CONTACT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN THIRD_PARTY_ENTITITY
ON 
	THIRD_PARTY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_INTERVIEWS
ON 
	CONTACT_INTERVIEWS.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_EXPOSURE_SITE_ENTITITY
ON 
	CONTACT_EXPOSURE_SITE_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_INVESTIGATOR_ENTITITY
ON 
	CONTACT_INVESTIGATOR_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN DISPOSITIONED_BY_ENTITITY
ON 
	DISPOSITIONED_BY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID;
QUIT; 
DATA F_CONTACT_RECORD_CASE_N;
SET F_CONTACT_RECORD_CASE_N;
IF CONTACT_INTERVIEW_KEY=. THEN CONTACT_INTERVIEW_KEY=1;
RUN; 


PROC SQL;
CREATE TABLE F_CONTACT_RECORD_CASE_E AS SELECT L_CONTACT_RECORD_E.D_CONTACT_RECORD_KEY, THIRD_PARTY_ENTITY_KEY,
CONTACT_KEY, SUBJECT_KEY, THIRD_PARTY_INVESTIGATION_KEY, SUBJECT_INVESTIGATION_KEY, CONTACT_INVESTIGATION_KEY,
CONTACT_INTERVIEW_KEY, DISPOSITIONED_BY_KEY,CONTACT_EXPOSURE_SITE_KEY, CONTACT_INVESTIGATOR_KEY 
FROM L_CONTACT_RECORD_E
	LEFT OUTER  JOIN CONTACT_PHC
ON 
	CONTACT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_PHC
ON 
	SUBJECT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_THIRD_PARTY_PHC
ON 
	CONTACT_THIRD_PARTY_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_ENTITITY
ON 
	SUBJECT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_ENTITITY
ON 
	CONTACT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN THIRD_PARTY_ENTITITY
ON 
	THIRD_PARTY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_INTERVIEWS
ON 
	CONTACT_INTERVIEWS.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID	
	LEFT OUTER  JOIN CONTACT_EXPOSURE_SITE_ENTITITY
ON 
	CONTACT_EXPOSURE_SITE_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_INVESTIGATOR_ENTITITY
ON 
	CONTACT_INVESTIGATOR_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN DISPOSITIONED_BY_ENTITITY
ON 
	DISPOSITIONED_BY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID;
QUIT; 

DATA F_CONTACT_RECORD_CASE_E;
SET F_CONTACT_RECORD_CASE_E;
IF CONTACT_INTERVIEW_KEY=. THEN CONTACT_INTERVIEW_KEY=1;
RUN; 
%mend;

%macro contact_interview_excl;
PROC SQL;
CREATE TABLE F_CONTACT_RECORD_CASE_N AS SELECT L_CONTACT_RECORD_N.D_CONTACT_RECORD_KEY, THIRD_PARTY_ENTITY_KEY,
CONTACT_KEY, SUBJECT_KEY, THIRD_PARTY_INVESTIGATION_KEY, SUBJECT_INVESTIGATION_KEY, CONTACT_INVESTIGATION_KEY,
DISPOSITIONED_BY_KEY,CONTACT_EXPOSURE_SITE_KEY, CONTACT_INVESTIGATOR_KEY
FROM L_CONTACT_RECORD_N
	LEFT OUTER  JOIN CONTACT_PHC
ON   
	CONTACT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_PHC
ON 
	SUBJECT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_THIRD_PARTY_PHC
ON 
	CONTACT_THIRD_PARTY_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_ENTITITY
ON 
	SUBJECT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_ENTITITY
ON 
	CONTACT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN THIRD_PARTY_ENTITITY
ON 
	THIRD_PARTY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_EXPOSURE_SITE_ENTITITY
ON 
	CONTACT_EXPOSURE_SITE_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_INVESTIGATOR_ENTITITY
ON 
	CONTACT_INVESTIGATOR_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID
	LEFT OUTER  JOIN DISPOSITIONED_BY_ENTITITY
ON 
	DISPOSITIONED_BY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_N.CT_CONTACT_UID;
QUIT;

PROC SQL;
CREATE TABLE F_CONTACT_RECORD_CASE_E AS SELECT L_CONTACT_RECORD_E.D_CONTACT_RECORD_KEY, THIRD_PARTY_ENTITY_KEY,
CONTACT_KEY, SUBJECT_KEY, THIRD_PARTY_INVESTIGATION_KEY, SUBJECT_INVESTIGATION_KEY, CONTACT_INVESTIGATION_KEY,
DISPOSITIONED_BY_KEY,CONTACT_EXPOSURE_SITE_KEY, CONTACT_INVESTIGATOR_KEY 
FROM L_CONTACT_RECORD_E
	LEFT OUTER  JOIN CONTACT_PHC
ON 
	CONTACT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_PHC
ON 
	SUBJECT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_THIRD_PARTY_PHC
ON 
	CONTACT_THIRD_PARTY_PHC.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_ENTITITY
ON 
	SUBJECT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_ENTITITY
ON 
	CONTACT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN THIRD_PARTY_ENTITITY
ON 
	THIRD_PARTY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_EXPOSURE_SITE_ENTITITY
ON 
	CONTACT_EXPOSURE_SITE_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_INVESTIGATOR_ENTITITY
ON 
	CONTACT_INVESTIGATOR_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID
	LEFT OUTER  JOIN DISPOSITIONED_BY_ENTITITY
ON 
	DISPOSITIONED_BY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD_E.CT_CONTACT_UID;
QUIT;


%mend;

%macro contact_interview;
PROC SQL;
CREATE TABLE CONTACT_INTERVIEWS AS SELECT 
CONTACT_PHC_UIDS.*, D_INTERVIEW_KEY AS CONTACT_INTERVIEW_KEY 'CONTACT_INTERVIEW_KEY'
FROM CONTACT_PHC_UIDS, NBS_RDB.L_INTERVIEW
WHERE CONTACT_PHC_UIDS.NAMED_DURING_INTERVIEW_UID=L_INTERVIEW.INTERVIEW_UID;
QUIT;
%mend;
DATA ACTIVITY_LOG_MASTER_LAST;
SET RDBDATA.ACTIVITY_LOG_MASTER_LAST;
	ODSE_COUNT=0;
	RDB_COUNT=0;
RUN;
DATA ACTIVITY_LOG_DETAIL;
SET RDBDATA.ACTIVITY_LOG_DETAIL;
RUN;

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME(),
ACTIVITY_LOG_MASTER_UID= (SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM NBS_RDB.ACTIVITY_LOG_MASTER);
QUIT;

PROC SQL;
	UPDATE ACTIVITY_LOG_MASTER_LAST SET ODSE_COUNT = (SELECT COUNT(*) FROM nbs_ods.ct_contact);
	UPDATE ACTIVITY_LOG_MASTER_LAST SET RDB_COUNT = (SELECT COUNT(*) FROM nbs_rdb.D_CONTACT_RECORD where D_CONTACT_RECORD_KEY>1);
QUIT;
DATA ACTIVITY_LOG_MASTER_LAST;
SET ACTIVITY_LOG_MASTER_LAST;;
IF ODSE_COUNT>RDB_COUNT THEN START_DATE = '01JUN1900'D;
RUN;


PROC SQL;
CREATE TABLE CT_CONTACT_INITA AS 
SELECT
	ADD_TIME AS ADD_TIME 'ADD_TIME',  
	ADD_USER_ID AS ADD_USER_ID 'ADD_USER_ID', 
	CONTACT_ENTITY_EPI_LINK_ID AS CONTACT_ENTITY_EPI_LINK_ID 'CONTACT_ENTITY_EPI_LINK_ID',
	CONTACT_ENTITY_PHC_UID AS CONTACT_ENTITY_PHC_UID 'CONTACT_ENTITY_PHC_UID', 
	CONTACT_ENTITY_UID AS CONTACT_ENTITY_UID 'CONTACT_ENTITY_UID', 
	CONTACT_REFERRAL_BASIS_CD,
	CONTACT_STATUS, 
	CT_CONTACT_UID, 
	DISPOSITION_CD, 
	DISPOSITION_DATE AS CTT_DISPO_DT 'CTT_DISPO_DT',  
	EVALUATION_COMPLETED_CD, 
	EVALUATION_DATE AS CTT_EVAL_DT 'CTT_EVAL_DT', 
	EVALUATION_TXT AS CTT_EVAL_NOTES 'CTT_EVAL_NOTES', 
	GROUP_NAME_CD, 
	HEALTH_STATUS_CD, 
	INVESTIGATOR_ASSIGNED_DATE AS CTT_INV_ASSIGNED_DT 'CTT_INV_ASSIGNED_DT', 
	JURISDICTION_CD, 
	LAST_CHG_TIME AS LAST_CHG_TIME 'LAST_CHG_TIME',  
	LAST_CHG_USER_ID AS LAST_CHG_USER_ID 'LAST_CHG_USER_ID', 
	LOCAL_ID AS LOCAL_ID 'LOCAL_ID',
	NAMED_DURING_INTERVIEW_UID,
	NAMED_ON_DATE AS CTT_NAMED_ON_DT 'CTT_NAMED_ON_DT',  
	PRIORITY_CD, 
	PROCESSING_DECISION_CD, 
	PROG_AREA_CD, 
	PROGRAM_JURISDICTION_OID AS PROGRAM_JURISDICTION_OID 'PROGRAM_JURISDICTION_OID', 
	RECORD_STATUS_CD AS RECORD_STATUS_CD 'RECORD_STATUS_CD', 
	RECORD_STATUS_TIME AS RECORD_STATUS_TIME 'RECORD_STATUS_TIME', 
	RELATIONSHIP_CD, 
	RISK_FACTOR_CD, 
	RISK_FACTOR_TXT AS CTT_RISK_NOTES 'CTT_RISK_NOTES', 
	SHARED_IND_CD, 
	SUBJECT_ENTITY_EPI_LINK_ID AS SUBJECT_ENTITY_EPI_LINK_ID 'SUBJECT_ENTITY_EPI_LINK_ID', 
	SUBJECT_ENTITY_PHC_UID, 
	SUBJECT_ENTITY_UID,
	SYMPTOM_CD, 
	SYMPTOM_ONSET_DATE AS CTT_SYMP_ONSET_DT 'CTT_SYMP_ONSET_DT',  
	SYMPTOM_TXT AS CTT_SYMP_NOTES 'CTT_SYMP_NOTES', 
	THIRD_PARTY_ENTITY_PHC_UID, 
	THIRD_PARTY_ENTITY_UID, 
	TREATMENT_END_CD, 
	TREATMENT_END_DATE AS CTT_TRT_END_DT 'CTT_TRT_END_DT', 
	TREATMENT_INITIATED_CD, 
	TREATMENT_NOT_END_RSN_CD, 
	TREATMENT_NOT_START_RSN_CD, 
	TREATMENT_START_DATE AS CTT_TRT_START_DT 'CTT_TRT_START_DT',
	TREATMENT_TXT AS CTT_TRT_NOTES 'CTT_TRT_NOTES', 
	TXT AS CTT_NOTES 'CTT_NOTES', 
	VERSION_CTRL_NBR AS VERSION_CTRL_NBR 'VERSION_CTRL_NBR'
FROM NBS_ODS.CT_CONTACT

WHERE CT_CONTACT.LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER.START_DATE) FROM  NBS_RDB.ACTIVITY_LOG_MASTER INNER JOIN 
NBS_RDB.ACTIVITY_LOG_DETAIL 
ON ACTIVITY_LOG_DETAIL.ACTIVITY_LOG_MASTER_UID=ACTIVITY_LOG_MASTER.ACTIVITY_LOG_MASTER_UID
INNER JOIN NBS_RDB.ETL_PROCESS
ON ETL_PROCESS.PROCESS_UID=ACTIVITY_LOG_DETAIL.PROCESS_UID
AND PROCESS_NAME = 'D_CONTACT_RECORD'
WHERE REFRESH_IND = 'T');
QUIT;
PROC SQL;
CREATE TABLE 

	S_CONTACT_RECORD_UIDS AS 
SELECT 
	CT_CONTACT_UID LENGTH =8 AS CT_CONTACT_UID 'CT_CONTACT_UID', LAST_CHG_TIME FROM CT_CONTACT_INITA;
QUIT;

/*
data NBS_GROUP_NM;
set nbs_srt.code_value_general(keep=code_set_nm code code_desc_txt);
where code_set_nm = 'NBS_GROUP_NM';
run;
options fmtsearch=(nbsfmt);
*/
data NBS_GROUP_NM;
set nbs_srt.code_value_general(keep=code_set_nm code code_desc_txt);
where code_set_nm = 'NBS_GROUP_NM';
run;
DATA CT_CONTACT_INITA;
SET CT_CONTACT_INITA;
CTT_PROGRAM_AREA=PUT(PROG_AREA_CD, $PRG_AR.);
CTT_JURISDICTION_NM=PUT(JURISDICTION_CD, $JURD_CD.);
CTT_SHARED_IND =put(SHARED_IND_CD,	$C_YN.);
CTT_SYMP_IND = put(SYMPTOM_CD,	$C_YNU.);
CTT_RISK_IND= put(RISK_FACTOR_CD,	$C_YNU.);
CTT_EVAL_COMPLETED = put(EVALUATION_COMPLETED_CD	,	$C_YNU.);
CTT_TRT_INITIATED_IND = put(TREATMENT_INITIATED_CD,	$C_YNU.);
CTT_TRT_COMPLETE_IND = put(TREATMENT_END_CD,	$C_YNU.);
CTT_DISPOSITION = put(DISPOSITION_CD,	$C_DISPO.);
CTT_PRIORITY = put(PRIORITY_CD, $C_PRTY.);
CTT_RELATIONSHIP = put(RELATIONSHIP_CD,	$C_RLTN.);
CTT_TRT_NOT_START_RSN = put(TREATMENT_NOT_START_RSN_CD, $C_NT_RS.);
CTT_TRT_NOT_COMPLETE_RSN = put(TREATMENT_NOT_END_RSN_CD,$C_NT_RS.);
CTT_HEALTH_STATUS = put(HEALTH_STATUS_CD,$C_H_STS.);
CTT_PROCESSING_DECISION = put(PROCESSING_DECISION_CD, $C_STD_P.);
CTT_STATUS=PUT(CONTACT_STATUS, $INV109f.);
CTT_REFERRAL_BASIS =PUT(CONTACT_REFERRAL_BASIS_CD, $NBS110NF.);
DROP CONTACT_REFERRAL_BASIS_CD
PROG_AREA_CD
JURISDICTION_CD
SHARED_IND_CD
PRIORITY_CD
DISPOSITION_CD
RELATIONSHIP_CD
HEALTH_STATUS_CD
SYMPTOM_CD
CONTACT_STATUS
RISK_FACTOR_CD
EVALUATION_COMPLETED_CD
TREATMENT_INITIATED_CD
TREATMENT_NOT_START_RSN_CD
TREATMENT_END_CD
TREATMENT_NOT_END_RSN_CD
PROCESSING_DECISION_CD;
RUN;


PROC SQL;
CREATE TABLE CT_CONTACT_INIT AS SELECT CT_CONTACT_INITA.*, NBS_GROUP_NM.CODE_DESC_TXT AS CTT_GROUP_LOT_ID
'CTT_GROUP_LOT_ID' FROM 
CT_CONTACT_INITA LEFT OUTER JOIN NBS_GROUP_NM ON 
CT_CONTACT_INITA.GROUP_NAME_CD=NBS_GROUP_NM.code;
QUIT;


%PROCESS_INCR_STAGING_DATA(CT_CONTACT_ANSWER, 'D_CONTACT_RECORD',S_CONTACT_RECORD_UIDS, ct_contact_UID, 'CT_CONTACT_ANSWER.ANSWER_TXT', ct_contact_uid,ct_contact_answer_uid);
PROC SQL;
CREATE TABLE 
	S_CONTACT_RECORD AS 
SELECT * 
FROM 
	CT_CONTACT_INIT
	LEFT OUTER JOIN NUMERIC_DATA_OUT
ON 
	NUMERIC_DATA_OUT.CT_CONTACT_UID=CT_CONTACT_INIT.CT_CONTACT_UID
	LEFT OUTER  JOIN DATE_DATA_OUT 
ON 
	DATE_DATA_OUT.CT_CONTACT_UID=CT_CONTACT_INIT.CT_CONTACT_UID
	LEFT OUTER  JOIN CODED_DATA_OUT
ON 
	CODED_DATA_OUT.CT_CONTACT_UID=CT_CONTACT_INIT.CT_CONTACT_UID
	LEFT OUTER  JOIN TEXT_DATA_OUT 
ON 
	TEXT_DATA_OUT.CT_CONTACT_UID=CT_CONTACT_INIT.CT_CONTACT_UID;
QUIT;

PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
CONTACT_ENTITIES CONTACT_PHC_UIDS
TEXT_DATA TEXT_DATA_OUT CODED_COUNTY_TABLE_DESC 
CODED_DATA_OUT CODED_TABLE CODED_COUNTY_TABLE
DATE_DATA DATE_DATA_OUT 
NUMERIC_BASE_DATA NUMERIC_DATA1 
NUMERIC_DATA2 NUMERIC_DATA_MERGED 
NUMERIC_DATA_OUT NUMERIC_DATA_PIVOT 
NUMERIC_DATA_TRANS NUMERIC_DATA_TRANS1
STAGING_KEY RDB_UI_METADATA RUN;
QUIT;
DATA S_CONTACT_RECORD;
SET S_CONTACT_RECORD(DROP=_NAME_ _LABEL_);
RUN;
%INCREMENTAL(L_CONTACT_RECORD_N,L_CONTACT_RECORD,L_CONTACT_RECORD_E, S_CONTACT_RECORD, 'S_CONTACT_RECORD',CT_CONTACT_UID,D_CONTACT_RECORD_KEY);

PROC SQL;
CREATE TABLE CONTACT_ENTITIES AS SELECT 
CT_CONTACT_UID, THIRD_PARTY_ENTITY_UID,
SUBJECT_ENTITY_UID,	
CONTACT_ENTITY_UID FROM S_CONTACT_RECORD;

CREATE TABLE CONTACT_EXPOSURE_SITE_ENTITITY AS SELECT 
CONTACT_ENTITIES.*, ORGANIZATION_KEY AS CONTACT_EXPOSURE_SITE_KEY 'CONTACT_EXPOSURE_SITE_KEY'
FROM CONTACT_ENTITIES INNER JOIN NBS_ODS.NBS_ACT_ENTITY
ON CONTACT_ENTITIES.CT_CONTACT_UID=NBS_ACT_ENTITY.ACT_UID
INNER JOIN NBS_RDB.L_ORGANIZATION
ON NBS_ACT_ENTITY.ENTITY_UID=L_ORGANIZATION.ORGANIZATION_UID
WHERE TYPE_CD='SiteOfExposure';

CREATE TABLE CONTACT_INVESTIGATOR_ENTITITY AS SELECT 
CONTACT_ENTITIES.*, PROVIDER_KEY AS CONTACT_INVESTIGATOR_KEY 'CONTACT_INVESTIGATOR_KEY'
FROM CONTACT_ENTITIES INNER JOIN NBS_ODS.NBS_ACT_ENTITY
ON CONTACT_ENTITIES.CT_CONTACT_UID=NBS_ACT_ENTITY.ACT_UID
INNER JOIN NBS_RDB.L_PROVIDER
ON NBS_ACT_ENTITY.ENTITY_UID=L_PROVIDER.PROVIDER_UID
WHERE TYPE_CD='InvestgrOfContact';


CREATE TABLE DISPOSITIONED_BY_ENTITITY AS SELECT 
CONTACT_ENTITIES.*, PROVIDER_KEY AS DISPOSITIONED_BY_KEY  'DISPOSITIONED_BY_KEY'
FROM CONTACT_ENTITIES INNER JOIN NBS_ODS.NBS_ACT_ENTITY
ON CONTACT_ENTITIES.CT_CONTACT_UID=NBS_ACT_ENTITY.ACT_UID
INNER JOIN NBS_RDB.L_PROVIDER
ON NBS_ACT_ENTITY.ENTITY_UID=L_PROVIDER.PROVIDER_UID
WHERE TYPE_CD='DispoInvestgrOfConRec';


CREATE TABLE THIRD_PARTY_ENTITITY AS SELECT 
CONTACT_ENTITIES.*, PATIENT_KEY AS THIRD_PARTY_ENTITY_KEY 'THIRD_PARTY_ENTITY_KEY'
FROM CONTACT_ENTITIES, NBS_RDB.L_PATIENT
WHERE CONTACT_ENTITIES.THIRD_PARTY_ENTITY_UID=L_PATIENT.PATIENT_UID;

CREATE TABLE CONTACT_ENTITITY AS SELECT 
CONTACT_ENTITIES.*, PATIENT_KEY AS CONTACT_KEY 'CONTACT_KEY'  
FROM CONTACT_ENTITIES, NBS_RDB.L_PATIENT
WHERE CONTACT_ENTITIES.CONTACT_ENTITY_UID=L_PATIENT.PATIENT_UID;

CREATE TABLE SUBJECT_ENTITITY AS SELECT 
CONTACT_ENTITIES.*, PATIENT_KEY AS SUBJECT_KEY 'SUBJECT_KEY'
FROM CONTACT_ENTITIES, NBS_RDB.L_PATIENT
WHERE CONTACT_ENTITIES.SUBJECT_ENTITY_UID=L_PATIENT.PATIENT_UID;
QUIT;
PROC SQL;
CREATE TABLE CONTACT_PHC_UIDS AS SELECT
CT_CONTACT_UID, THIRD_PARTY_ENTITY_PHC_UID,	
SUBJECT_ENTITY_PHC_UID, CONTACT_ENTITY_PHC_UID, NAMED_DURING_INTERVIEW_UID 
FROM S_CONTACT_RECORD;

CREATE TABLE CONTACT_THIRD_PARTY_PHC AS SELECT 
CONTACT_PHC_UIDS.*, INVESTIGATION_KEY AS THIRD_PARTY_INVESTIGATION_KEY 'THIRD_PARTY_INVESTIGATION_KEY'
FROM CONTACT_PHC_UIDS, NBS_RDB.INVESTIGATION
WHERE CONTACT_PHC_UIDS.THIRD_PARTY_ENTITY_PHC_UID=INVESTIGATION.CASE_UID;

CREATE TABLE SUBJECT_PHC AS SELECT 
CONTACT_PHC_UIDS.*, INVESTIGATION_KEY AS SUBJECT_INVESTIGATION_KEY 'SUBJECT_INVESTIGATION_KEY'
FROM CONTACT_PHC_UIDS, NBS_RDB.INVESTIGATION
WHERE CONTACT_PHC_UIDS.SUBJECT_ENTITY_PHC_UID=INVESTIGATION.CASE_UID;

CREATE TABLE CONTACT_PHC AS SELECT 
CONTACT_PHC_UIDS.*, INVESTIGATION_KEY AS CONTACT_INVESTIGATION_KEY 'CONTACT_INVESTIGATION_KEY'
FROM CONTACT_PHC_UIDS, NBS_RDB.INVESTIGATION
WHERE CONTACT_PHC_UIDS.CONTACT_ENTITY_PHC_UID=INVESTIGATION.CASE_UID;

QUIT;
PROC SQL;
CREATE TABLE DATA_CHECKER_MASTER_LAST 
(COUNT NUM);
INSERT INTO DATA_CHECKER_MASTER_LAST( COUNT) VALUES 
(NULL);
UPDATE DATA_CHECKER_MASTER_LAST SET COUNT= (SELECT COUNT(*) from NBS_ODS.NBS_rdb_metadata where rdb_table_nm = 'D_INTERVIEW' );
QUIT;
data _null_;
  set DATA_CHECKER_MASTER_LAST;
  if count>0 then call execute('%contact_interview');
run;
data _null_;
  set DATA_CHECKER_MASTER_LAST;
  	if count=0 then call execute('%contact_interview_excl');
	if count>0 then call execute('%contact_interview_incl');
run;
PROC SQL;
DROP table DATA_CHECKER_MASTER_LAST;
QUIT;

DATA F_CONTACT_RECORD_CASE_N;
SET F_CONTACT_RECORD_CASE_N;
IF THIRD_PARTY_ENTITY_KEY =. THEN THIRD_PARTY_ENTITY_KEY=1;
IF DISPOSITIONED_BY_KEY =. THEN DISPOSITIONED_BY_KEY=1;
IF CONTACT_EXPOSURE_SITE_KEY =. THEN CONTACT_EXPOSURE_SITE_KEY=1;
IF CONTACT_INVESTIGATOR_KEY =. THEN CONTACT_INVESTIGATOR_KEY=1;
RUN;
DATA F_CONTACT_RECORD_CASE_E;
SET F_CONTACT_RECORD_CASE_E;
IF THIRD_PARTY_ENTITY_KEY =. THEN THIRD_PARTY_ENTITY_KEY=1;
IF DISPOSITIONED_BY_KEY =. THEN DISPOSITIONED_BY_KEY=1;
IF CONTACT_EXPOSURE_SITE_KEY =. THEN CONTACT_EXPOSURE_SITE_KEY=1;
IF CONTACT_INVESTIGATOR_KEY =. THEN CONTACT_INVESTIGATOR_KEY=1;
RUN;
DATA S_CONTACT_RECORD;
SET S_CONTACT_RECORD;
DROP D_NE_KEY THIRD_PARTY_ENTITY_PHC_UID	SUBJECT_ENTITY_PHC_UID THIRD_PARTY_ENTITY_UID CONTACT_ENTITY_PHC_UID 
SUBJECT_ENTITY_UID CONTACT_ENTITY_UID NAMED_DURING_INTERVIEW_UID;
RUN;

%PAGE_DYNAMIC_LOOKUP(S_CONTACT_RECORD,D_CONTACT_RECORD_N, L_CONTACT_RECORD_N,L_CONTACT_RECORD_E, D_CONTACT_RECORD,'D_CONTACT_RECORD', D_CONTACT_RECORD_KEY, CT_CONTACT_UID);
 
%DBLOAD (F_CONTACT_RECORD_CASE, F_CONTACT_RECORD_CASE_N); 
/**
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.S_CONTACT_RECORD),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.d_CONTACT_RECORD),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=(SELECT COUNT(*) FROM D_CONTACT_RECORD_N),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM D_CONTACT_RECORD_E),
PROCESS_UID= (SELECT PROCESS_UID FROM NBS_RDB.ETL_PROCESS WHERE PROCESS_NAME='D_CONTACT_RECORD');
QUIT;

DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID=. THEN ACTIVITY_LOG_DETAIL_UID=1;
IF ROW_COUNT_UPDATE<0 THEN ROW_COUNT_UPDATE=0;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN D_CONTACT_RECORD TABLE.'||
' THERE IS(ARE) NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOAL NUMBER OF RECORD(S) IN THE D_CONTACT_RECORD TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
*/
DATA NBS_RDB.F_CONTACT_RECORD_CASE;
 MODIFY NBS_RDB.F_CONTACT_RECORD_CASE F_CONTACT_RECORD_CASE_E;
 BY D_CONTACT_RECORD_KEY;
RUN;
DATA RDBDATA.ACTIVITY_LOG_MASTER_LAST;
set RDBDATA.ACTIVITY_LOG_MASTER_LAST;
	START_DATE = DATETIME();
run;

PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;
QUIT; 

  
 
