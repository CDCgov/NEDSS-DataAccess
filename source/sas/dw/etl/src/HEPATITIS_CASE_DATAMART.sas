%macro HEPATITIS_DATAMART;
 
PROC SQL; 
CREATE TABLE HEPATITIS_DATAMART_LAST 
(date_last_ran DATE, 
START_DATE DATE 
);
INSERT INTO HEPATITIS_DATAMART_LAST( date_last_ran , START_DATE) VALUES 
('01jun1900'd,'01jun1900'd,);
update HEPATITIS_DATAMART_LAST set date_last_ran = (select max(refresh_datetime) from nbs_rdb.HEPATITIS_DATAMART),
  START_DATE =DATETIME();
QUIT;
data HEPATITIS_DATAMART_LAST;
set HEPATITIS_DATAMART_LAST;
if date_last_ran =. THEN date_last_ran ='01jun1900'd;
run;
PROC SQL;
create table update_patient_cases as select 
 			P.PATIENT_LAST_CHANGE_TIME
from nbs_rdb.D_PATIENT p, NBS_RDB.F_PAGE_CASE
where P.PATIENT_KEY=F_PAGE_CASE.PATIENT_KEY
AND PATIENT_LAST_CHANGE_TIME>select date_last_ran from HEPATITIS_DATAMART_LAST;
QUIT;
PROC SQL; 
create table updated_hep_PATIENT as select  
 			D_PATIENT.PATIENT_UID 
from nbs_rdb.D_PATIENT, NBS_RDB.HEPATITIS_DATAMART
where D_PATIENT.PATIENT_UID=HEPATITIS_DATAMART.PATIENT_UID
and D_PATIENT.PATIENT_LAST_CHANGE_TIME>select date_last_ran from HEPATITIS_DATAMART_LAST;
QUIT;
PROC SQL;
create table updated_hep_PHYSICIAN as select 
 			P.PROVIDER_UID AS PHYSICIAN_UID 'PHYSICIAN_UID'
from nbs_rdb.D_PROVIDER p, NBS_RDB.HEPATITIS_DATAMART
where P.PROVIDER_UID=HEPATITIS_DATAMART.PHYSICIAN_UID
AND PROVIDER_LAST_CHANGE_TIME>select date_last_ran from HEPATITIS_DATAMART_LAST;
QUIT;
PROC SQL;
create table updated_hep_INVESTIGATOR as select 
 			P.PROVIDER_UID AS INVESTIGATOR_UID 'INVESTIGATOR_UID'
from nbs_rdb.D_PROVIDER p, NBS_RDB.HEPATITIS_DATAMART
where P.PROVIDER_UID=HEPATITIS_DATAMART.INVESTIGATOR_UID
AND PROVIDER_LAST_CHANGE_TIME>select date_last_ran from HEPATITIS_DATAMART_LAST;
QUIT;
PROC SQL;
create table updated_hep_REPORTING as select 
 			P.ORGANIZATION_UID AS REPORTING_SOURCE_UID 'REPORTING_SOURCE_UID',
			ORGANIZATION_NAME, ORGANIZATION_COUNTY_CODE, ORGANIZATION_COUNTY, ORGANIZATION_CITY, ORGANIZATION_CITY, ORGANIZATION_CITY
from nbs_rdb.D_ORGANIZATION p, NBS_RDB.HEPATITIS_DATAMART
where  P.ORGANIZATION_UID=HEPATITIS_DATAMART.REPORTING_SOURCE_UID
		and (ORGANIZATION_NAME ^=	 RPT_SRC_SOURCE_NM 
		OR ORGANIZATION_COUNTY_CODE ^=	RPT_SRC_COUNTY_CD 
		OR ORGANIZATION_COUNTY ^=	 RPT_SRC_COUNTY 
		OR ORGANIZATION_CITY ^=	 RPT_SRC_CITY 
		OR ORGANIZATION_STATE ^=	 RPT_SRC_STATE 
		OR ORGANIZATION_UID ^=	 REPORTING_SOURCE_UID );
QUIT;

PROC SQL;
	delete from nbs_rdb.HEPATITIS_DATAMART where PATIENT_UID in (select distinct PATIENT_UID from updated_hep_PATIENT);
	delete from nbs_rdb.HEPATITIS_DATAMART where PHYSICIAN_UID in (select distinct PHYSICIAN_UID from updated_hep_PHYSICIAN);
	delete from nbs_rdb.HEPATITIS_DATAMART where INVESTIGATOR_UID in (select distinct INVESTIGATOR_UID from updated_hep_INVESTIGATOR);
	delete from nbs_rdb.HEPATITIS_DATAMART where REPORTING_SOURCE_UID in (select distinct REPORTING_SOURCE_UID from updated_hep_REPORTING);
	create table EXISTING_HEPATITIS_DATAMART as select distinct investigation.investigation_key from nbs_rdb.HEPATITIS_DATAMART, nbs_rdb.investigation 
where HEPATITIS_DATAMART.case_uid=investigation.case_uid;

QUIT;
PROC SQL;
CREATE TABLE CONDITION AS 
SELECT CONDITION_CD, CONDITION_DESC, DISEASE_GRP_DESC, CONDITION_KEY 
FROM NBS_RDB.CONDITION where CONDITION_CD in (
'10110','10104','10100','10106',
'10101','10102','10103','10105',
'10481', '50248',
'999999');
QUIT; 
PROC SQL;
CREATE TABLE F_PAGE_CASE AS 
SELECT F_PAGE_CASE.INVESTIGATION_KEY, CONDITION.CONDITION_KEY,
F_PAGE_CASE.PATIENT_KEY 
FROM NBS_RDB.F_PAGE_CASE 
INNER JOIN nbs_rdb.CONDITION ON F_PAGE_CASE.CONDITION_KEY=CONDITION.CONDITION_KEY
INNER JOIN NBS_RDB.D_PATIENT ON F_PAGE_CASE.PATIENT_KEY=D_PATIENT.PATIENT_KEY
INNER JOIN NBS_RDB.INVESTIGATION ON INVESTIGATION.INVESTIGATION_KEY=F_PAGE_CASE.INVESTIGATION_KEY
LEFT JOIN EXISTING_HEPATITIS_DATAMART ON
F_PAGE_CASE.investigation_key =EXISTING_HEPATITIS_DATAMART.investigation_key
where EXISTING_HEPATITIS_DATAMART.investigation_key is null
AND   investigation.record_status_cd='ACTIVE'
AND  CONDITION_CD in (
'10110','10104','10100','10106',
'10101','10102','10103','10105',
'10481', '50248',
'999999');
QUIT;


PROC SQL;
CREATE TABLE F_INV_ADMINISTRATIVE AS  
SELECT F_PAGE_CASE.D_INV_ADMINISTRATIVE_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE
INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
ORDER BY D_INV_ADMINISTRATIVE_KEY ;
QUIT;

DATA D_INV_ADMINISTRATIVE(sortedby=INVESTIGATION_KEY);
MERGE  F_INV_ADMINISTRATIVE(IN=in1) nbs_rdb.D_INV_ADMINISTRATIVE(IN=in2);
BY D_INV_ADMINISTRATIVE_KEY;
IF In1=1 then output D_INV_ADMINISTRATIVE;
keep ADM_INNC_NOTIFICATION_DT ADM_FIRST_RPT_TO_PHD_DT ADM_BINATIONAL_RPTNG_CRIT INVESTIGATION_key D_INV_ADMINISTRATIVE_KEY;
run;

DATA D_INV_ADMINISTRATIVE(RENAME=(ADM_FIRST_RPT_TO_PHD_DT=FIRST_RPT_PHD_DT ADM_INNC_NOTIFICATION_DT =INIT_NND_NOT_DT ADM_BINATIONAL_RPTNG_CRIT=BINATIONAL_RPTNG_CRIT));
set D_INV_ADMINISTRATIVE;
BY D_INV_ADMINISTRATIVE_KEY;
run;
PROC SORT DATA=D_INV_ADMINISTRATIVE OUT=D_INV_ADMINISTRATIVE NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
PROC SQL;
CREATE TABLE F_INV_CLINICAL AS  
SELECT F_PAGE_CASE.D_INV_CLINICAL_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE
INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
ORDER BY D_INV_CLINICAL_KEY ;
QUIT;
DATA D_INV_CLINICAL(sortedby=INVESTIGATION_KEY );
MERGE  F_INV_CLINICAL(IN=in1) nbs_rdb.D_INV_CLINICAL(IN=in2);
BY D_INV_CLINICAL_KEY;
IF In1=1 then output D_INV_CLINICAL;
keep   CLN_HepDInfection CLN_MedsforHep INVESTIGATION_key D_INV_CLINICAL_KEY;
run;
DATA D_INV_CLINICAL;
set D_INV_CLINICAL;

LENGTH	HEP_D_INFECTION_IND $4000;
LENGTH	HEP_MEDS_RECVD_IND $4000;


IF missing(CLN_HepDInfection) then do; HEP_D_INFECTION_IND='';end;
else do; 
HEP_D_INFECTION_IND=trim(CLN_HepDInfection); end; 
IF missing(CLN_MedsforHep) then do; HEP_MEDS_RECVD_IND=''; end;
else do; 
HEP_MEDS_RECVD_IND=trim(CLN_MedsforHep); end; 
keep HEP_MEDS_RECVD_IND  HEP_D_INFECTION_IND INVESTIGATION_key D_INV_CLINICAL_KEY;
run;
PROC SORT DATA=D_INV_CLINICAL OUT=D_INV_CLINICAL NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
PROC SQL;
CREATE TABLE F_INV_PATIENT_OBS AS  
SELECT F_PAGE_CASE.D_INV_PATIENT_OBS_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE
INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
ORDER BY D_INV_PATIENT_OBS_KEY ;
QUIT;
DATA D_INV_PATIENT_OBS(sortedby=INVESTIGATION_KEY );
MERGE  F_INV_PATIENT_OBS(IN=in1) nbs_rdb.D_INV_PATIENT_OBS(IN=in2);
BY D_INV_PATIENT_OBS_KEY;
IF In1=1 then output D_INV_PATIENT_OBS;
keep   IPO_SEXUAL_PREF INVESTIGATION_key D_INV_PATIENT_OBS_KEY;
run;
DATA D_INV_PATIENT_OBS;
set D_INV_PATIENT_OBS;
LENGTH	SEX_PREF $4000;
IF missing(IPO_SEXUAL_PREF) then do; SEX_PREF='';end;
else do; 
SEX_PREF=trim(IPO_SEXUAL_PREF); end; 
keep SEX_PREF INVESTIGATION_key D_INV_PATIENT_OBS_KEY;
run;
PROC SORT DATA=D_INV_PATIENT_OBS OUT=D_INV_PATIENT_OBS NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
 
PROC SQL;
CREATE TABLE F_INV_EPIDEMIOLOGY AS 
SELECT F_PAGE_CASE.D_INV_EPIDEMIOLOGY_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
ORDER BY D_INV_EPIDEMIOLOGY_KEY ;
QUIT;
DATA D_INV_EPIDEMIOLOGY(sortedby=INVESTIGATION_KEY );
MERGE  F_INV_EPIDEMIOLOGY(IN=in1) nbs_rdb.D_INV_EPIDEMIOLOGY(IN=in2);
BY D_INV_EPIDEMIOLOGY_KEY;
IF In1=1 then output D_INV_EPIDEMIOLOGY;
keep	EPI_ChildCareCase 	EPI_CNTRY_USUAL_RESID	EPI_ContactBabysitter	EPI_ContactChildcare	EPI_ContactHousehold	EPI_ContactOfCase	
EPI_ContactOther 	EPI_ContactOthSpecify EPI_ContactPlaymate	EPI_ContactSexPartner EPI_DaycareContact EPI_EpiLinked	EPI_FemaleSexPartners	
EPI_FoodHandler	EPI_InDayCare	EPI_IVDrugUse	EPI_MaleSexPartner	EPI_OutbreakAssoc	EPI_OutbreakFoodHndlr	EPI_OutbreakFoodItem	EPI_outbreakNonFoodHndlr 
EPI_OutbreakUnidentified	EPI_OutbreakWaterborne	EPI_RecDrugUse	IPO_SEXUAL_PREF EPI_OutbreakAssoc INVESTIGATION_KEY;
RUN;
DATA D_INV_EPIDEMIOLOGY;
SET D_INV_EPIDEMIOLOGY;
LENGTH	CHILDCARE_CASE_IND $2000;
LENGTH	CNTRY_USUAL_RESIDENCE $2000;
LENGTH	CT_BABYSITTER_IND $2000;
LENGTH	CT_CHILDCARE_IND $2000;
LENGTH	CT_HOUSEHOLD_IND $2000;
LENGTH	HEP_CONTACT_IND	$2000;
LENGTH	OTHER_CONTACT_IND $2000;
LENGTH	CONTACT_TYPE_OTH $2000;
LENGTH	CT_PLAYMATE_IND	$2000; 
LENGTH	SEXUAL_PARTNER_IND $2000;
LENGTH	DNP_HOUSEHOLD_CT_IND $2000;
LENGTH	HEP_A_EPLINK_IND $2000;
LENGTH	FOODHNDLR_PRIOR_IND	$2000; 
LENGTH	DNP_EMPLOYEE_IND $2000;
LENGTH	STREET_DRUG_INJECTED $2000;
LENGTH	OUTBREAK_IND $2000;
LENGTH	OBRK_FOODHNDLR_IND $2000;
LENGTH	FOOD_OBRK_FOOD_ITEM	$2000;
LENGTH	OBRK_NOFOODHNDLR_IND $2000;
LENGTH	OBRK_UNIDENTIFIED_IND $2000;
LENGTH	OBRK_WATERBORNE_IND	$2000;
LENGTH	STREET_DRUG_USED $2000;

LENGTH COM_SRC_OUTBREAK_IND $2000;

IF missing(EPI_OutbreakAssoc) then do; COM_SRC_OUTBREAK_IND=''; end;
else do; 
COM_SRC_OUTBREAK_IND=trim(EPI_OutbreakAssoc); end;


CHILDCARE_CASE_IND=EPI_ChildCareCase;	
IF missing(EPI_ChildCareCase) then do; CHILDCARE_CASE_IND=''; end;
else do; 
CHILDCARE_CASE_IND=trim(EPI_ChildCareCase); end;
CNTRY_USUAL_RESIDENCE=EPI_CNTRY_USUAL_RESID;	
IF missing(EPI_CNTRY_USUAL_RESID) then do; CNTRY_USUAL_RESIDENCE=''; end;
else do; 
CNTRY_USUAL_RESIDENCE=trim(EPI_CNTRY_USUAL_RESID); end;
CT_BABYSITTER_IND=EPI_ContactBabysitter;	
IF missing(EPI_ContactBabysitter) then do; CT_BABYSITTER_IND=''; end;
else do; 
CT_BABYSITTER_IND=trim(EPI_ContactBabysitter); end;
CT_CHILDCARE_IND=EPI_ContactChildcare;	
IF missing(EPI_ContactChildcare) then do; CT_CHILDCARE_IND=''; end;
else do; 
CT_CHILDCARE_IND=trim(EPI_ContactChildcare); end;
CT_HOUSEHOLD_IND=EPI_ContactHousehold;	
IF missing(EPI_ContactHousehold) then do; CT_HOUSEHOLD_IND=''; end;
else do; 
CT_HOUSEHOLD_IND=trim(EPI_ContactHousehold); end;
HEP_CONTACT_IND=EPI_ContactOfCase;	
IF missing(EPI_ContactOfCase) then do; HEP_CONTACT_IND=''; end;
else do; 
HEP_CONTACT_IND=trim(EPI_ContactOfCase); end;
OTHER_CONTACT_IND=EPI_ContactOther;	
IF missing(EPI_ContactOther) then do; OTHER_CONTACT_IND=''; end;
else do; 
OTHER_CONTACT_IND=trim(EPI_ContactOther); end;
CONTACT_TYPE_OTH=EPI_ContactOthSpecify;	
IF missing(EPI_ContactOthSpecify) then do; CONTACT_TYPE_OTH=''; end;
else do; 
CONTACT_TYPE_OTH=trim(EPI_ContactOthSpecify); end;
CT_PLAYMATE_IND=EPI_ContactPlaymate;	
IF missing(EPI_ContactPlaymate) then do; CT_PLAYMATE_IND=''; end;
else do; 
CT_PLAYMATE_IND=trim(EPI_ContactPlaymate); end;
SEXUAL_PARTNER_IND=EPI_ContactSexPartner;
IF missing(EPI_ContactSexPartner) then do; SEXUAL_PARTNER_IND=''; end;
else do; 
SEXUAL_PARTNER_IND=trim(EPI_ContactSexPartner); end;
DNP_HOUSEHOLD_CT_IND=EPI_DaycareContact;
IF missing(EPI_DaycareContact) then do; DNP_HOUSEHOLD_CT_IND=''; end;
else do; 
DNP_HOUSEHOLD_CT_IND=trim(EPI_DaycareContact); end;
HEP_A_EPLINK_IND=EPI_EpiLinked;	
IF missing(EPI_EpiLinked) then do; HEP_A_EPLINK_IND=''; end;
else do; 
HEP_A_EPLINK_IND=trim(EPI_EpiLinked); end;
FEMALE_SEX_PRTNR_NBR= INPUT(EPI_FemaleSexPartners, comma20.);
FOODHNDLR_PRIOR_IND=EPI_FoodHandler;	
IF missing(EPI_FoodHandler) then do; FOODHNDLR_PRIOR_IND=''; end;
else do; 
FOODHNDLR_PRIOR_IND=trim(EPI_FoodHandler); end;
DNP_EMPLOYEE_IND=EPI_InDayCare;	
IF missing(EPI_InDayCare) then do; DNP_EMPLOYEE_IND=''; end;
else do; 
DNP_EMPLOYEE_IND=trim(EPI_InDayCare); end;
STREET_DRUG_INJECTED=EPI_IVDrugUse;	
IF missing(EPI_IVDrugUse) then do; STREET_DRUG_INJECTED=''; end;
else do; 
STREET_DRUG_INJECTED=trim(EPI_IVDrugUse); end;
MALE_SEX_PRTNR_NBR= INPUT(EPI_MaleSexPartner, comma20.);
OUTBREAK_IND=EPI_OutbreakAssoc;	
IF missing(EPI_OutbreakAssoc) then do; OUTBREAK_IND=''; end;
else do; 
OUTBREAK_IND=trim(EPI_OutbreakAssoc); end;
OBRK_FOODHNDLR_IND=EPI_OutbreakFoodHndlr;	
IF missing(EPI_OutbreakFoodHndlr) then do; OBRK_FOODHNDLR_IND=''; end;
else do; 
OBRK_FOODHNDLR_IND=trim(EPI_OutbreakFoodHndlr); end;
FOOD_OBRK_FOOD_ITEM=EPI_OutbreakFoodItem;	
IF missing(EPI_OutbreakFoodItem) then do; FOOD_OBRK_FOOD_ITEM=''; end;
else do; 
FOOD_OBRK_FOOD_ITEM=trim(EPI_OutbreakFoodItem); end;
OBRK_NOFOODHNDLR_IND=EPI_outbreakNonFoodHndlr;	
IF missing(EPI_outbreakNonFoodHndlr) then do; OBRK_NOFOODHNDLR_IND=''; end;
else do; 
OBRK_NOFOODHNDLR_IND=trim(EPI_outbreakNonFoodHndlr); end;
OBRK_UNIDENTIFIED_IND=EPI_OutbreakUnidentified;	
IF missing(EPI_OutbreakUnidentified) then do; OBRK_UNIDENTIFIED_IND=''; end;
else do; 
OBRK_UNIDENTIFIED_IND=trim(EPI_OutbreakUnidentified); end;
OBRK_WATERBORNE_IND=EPI_OutbreakWaterborne;	
IF missing(EPI_OutbreakWaterborne) then do; OBRK_WATERBORNE_IND=''; end;
else do; 
OBRK_WATERBORNE_IND=trim(EPI_OutbreakWaterborne); end;
STREET_DRUG_USED=EPI_RecDrugUse;	
IF missing(EPI_RecDrugUse) then do; STREET_DRUG_USED=''; end;
else do; 
STREET_DRUG_USED=trim(EPI_RecDrugUse); end;

keep COM_SRC_OUTBREAK_IND CHILDCARE_CASE_IND CNTRY_USUAL_RESIDENCE CT_BABYSITTER_IND	CT_CHILDCARE_IND CT_HOUSEHOLD_IND HEP_CONTACT_IND	OTHER_CONTACT_IND	CONTACT_TYPE_OTH CT_PLAYMATE_IND SEXUAL_PARTNER_IND DNP_HOUSEHOLD_CT_IND	
HEP_A_EPLINK_IND FEMALE_SEX_PRTNR_NBR FOODHNDLR_PRIOR_IND DNP_EMPLOYEE_IND	STREET_DRUG_INJECTED MALE_SEX_PRTNR_NBR OUTBREAK_IND OBRK_FOODHNDLR_IND	FOOD_OBRK_FOOD_ITEM OBRK_NOFOODHNDLR_IND OBRK_UNIDENTIFIED_IND OBRK_WATERBORNE_IND	STREET_DRUG_USED  	
INVESTIGATION_key D_INV_EPIDEMIOLOGY_KEY;
RUN;
DATA D_INV_EPIDEMIOLOGY(sortedby=INVESTIGATION_KEY);
SET D_INV_EPIDEMIOLOGY;
RUN;
PROC SORT DATA=D_INV_EPIDEMIOLOGY OUT=D_INV_EPIDEMIOLOGY NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
PROC SQL;
CREATE TABLE F_INV_LAB_FINDING AS 
SELECT F_PAGE_CASE.D_INV_LAB_FINDING_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
ORDER BY D_INV_LAB_FINDING_KEY ;
QUIT;
/*DATA F_INV_LAB_FINDING;
SET F_INV_LAB_FINDING;
LENGTH ADM_FIRST_RPT_TO_PHD_DT $2000;
LENGTH CLN_MedsforHep $2000;
LENGTH HEP_C_TOTAL_ANTIBODY $2000;
LENGTH EXT_ANTI_HBS_POS_REAC_IND $2000;
LENGTH EXT_ANTI_HBSAG_TESTED_IND $2000;
LENGTH EXT_HEP_E_ANTIGEN $2000;
LENGTH EXT_HEP_B_SURFACE_ANTIGEN $2000;
LENGTH EXT_HEP_B_DNA $2000;
LENGTH EXT_HCV_RNA $2000;
LENGTH EXT_HEP_D_TEST_IND $2000;
LENGTH EXT_HEP_A_IGM_ANTIBODY $2000;
LENGTH EXT_HEP_B_IGM_ANTIBODY $2000;
LENGTH PREV_NEG_HEP_TEST_IND $2000;
LENGTH HEP_A_TOTAL_ANTIBODY $2000;
LENGTH HEP_B_TOTAL_ANTIBODY $2000;
LENGTH HEP_D_TOTAL_ANTIBODY $2000;
LENGTH HEP_E_TOTAL_ANTIBODY $2000;
RUN;*/
DATA D_INV_LAB_FINDING;
MERGE  F_INV_LAB_FINDING(IN=in1) nbs_rdb.D_INV_LAB_FINDING(IN=in2);
BY D_INV_LAB_FINDING_KEY;
IF In1=1 then output D_INV_LAB_FINDING;
keep LAB_TotalAntiHCV LAB_Supplem_antiHCV_Date LAB_ALT_Result LAB_AntiHBsPositive LAB_AntiHBsTested LAB_AST_Result LAB_HBeAg LAB_HBeAg_Date LAB_HBsAg LAB_HBsAg_Date 
LAB_HBV_NAT LAB_HBV_NAT_Date LAB_HCVRNA LAB_HCVRNA_Date LAB_HepDTest  LAB_IgM_AntiHAV LAB_IgMAntiHAVDate LAB_IgMAntiHBc LAB_IgMAntiHBcDate 
LAB_PrevNegHepTest LAB_SignalToCutoff LAB_Supplem_antiHCV LAB_TestDate LAB_TestDate2 LAB_TestResultUpperLimit LAB_TestResultUpperLimit2 LAB_TotalAntiHAV LAB_TotalAntiHAVDate 
LAB_TotalAntiHBc LAB_TotalAntiHBcDate LAB_TotalAntiHCV_Date LAB_TotalAntiHDV LAB_TotalAntiHDV_Date LAB_TotalAntiHEV LAB_TotalAntiHEV_Date LAB_VerifiedTestDate 
INVESTIGATION_key D_INV_LAB_FINDING_KEY;

RUN;
DATA D_INV_LAB_FINDING;
set D_INV_LAB_FINDING;
LENGTH ADM_FIRST_RPT_TO_PHD_DT $2000;
LENGTH CLN_MedsforHep $2000;
LENGTH HEP_C_TOTAL_ANTIBODY $2000;
LENGTH EXT_ANTI_HBS_POS_REAC_IND $2000;
LENGTH ANTI_HBSAG_TESTED_IND $2000;
LENGTH EXT_HEP_E_ANTIGEN $2000;
LENGTH EXT_HEP_B_SURFACE_ANTIGEN $2000;
LENGTH EXT_HEP_B_DNA $2000;
LENGTH EXT_HCV_RNA $2000;
LENGTH EXT_HEP_D_TEST_IND $2000;
LENGTH EXT_HEP_A_IGM_ANTIBODY $2000;
LENGTH EXT_HEP_B_IGM_ANTIBODY $2000;
LENGTH PREV_NEG_HEP_TEST_IND $2000;
LENGTH HEP_A_TOTAL_ANTIBODY $2000;
LENGTH HEP_B_TOTAL_ANTIBODY $2000;
LENGTH HEP_D_TOTAL_ANTIBODY $2000;
LENGTH HEP_E_TOTAL_ANTIBODY $2000;
LENGTH ANTIHCV_SIGCUT_RATIO $2000;
LENGTH ANTIHCV_SUPP_ASSAY  $2000;
LENGTH  ANTI_HBS_POS_REAC_IND   $2000;
LENGTH	HEP_C_TOTAL_ANTIBODY $4000;

IF missing(LAb_TotalAntiHCV) then do; HEP_C_TOTAL_ANTIBODY=''; end;
else do; 
HEP_C_TOTAL_ANTIBODY=trim(LAb_TotalAntiHCV); end;

SUPP_ANTI_HCV_DT=LAB_Supplem_antiHCV_Date;

ALT_SGPT_RESULT= INPUT(LAB_ALT_Result, comma20.);
IF missing(LAB_AntiHBsPositive) then do; ANTI_HBS_POS_REAC_IND=''; end;
else do; 
ANTI_HBS_POS_REAC_IND=trim(LAB_AntiHBsPositive); end;

IF missing(LAB_AntiHBsTested) then do; ANTI_HBSAG_TESTED_IND=''; end;
else do; 
ANTI_HBSAG_TESTED_IND=trim(LAB_AntiHBsTested); end;
AST_SGOT_RESULT= INPUT(LAB_AST_Result, comma20.);
HEP_E_ANTIGEN=LAB_HBeAg;
IF missing(LAB_HBeAg) then do; HEP_E_ANTIGEN=''; end;
else do; 
HEP_E_ANTIGEN=trim(LAB_HBeAg); end;
HBE_AG_DT=LAB_HBeAg_Date;
HEP_B_SURFACE_ANTIGEN=LAB_HBsAg;
IF missing(LAB_HBsAg) then do; HEP_B_SURFACE_ANTIGEN=''; end;
else do; 
HEP_B_SURFACE_ANTIGEN=trim(LAB_HBsAg); end;
HBS_AG_DT=LAB_HBsAg_Date;
HEP_B_DNA=LAB_HBV_NAT;
IF missing(LAB_HBV_NAT) then do; HEP_B_DNA=''; end;
else do; 
HEP_B_DNA=trim(LAB_HBV_NAT); end;
HBV_NAT_DT=LAB_HBV_NAT_Date;
HCV_RNA=LAB_HCVRNA;
IF missing(LAB_HCVRNA) then do; HCV_RNA=''; end;
else do; 
HCV_RNA=trim(LAB_HCVRNA); end;
HCV_RNA_DT=LAB_HCVRNA_Date;
IF missing(LAB_HepDTest) then do; HEP_D_TEST_IND=''; end;
else do; 
HEP_D_TEST_IND=trim(LAB_HepDTest); end;
HEP_A_IGM_ANTIBODY=LAB_IgM_AntiHAV;
IF missing(LAB_IgM_AntiHAV) then do; HEP_A_IGM_ANTIBODY=''; end;
else do; 
HEP_A_IGM_ANTIBODY=trim(LAB_IgM_AntiHAV); end;
IGM_ANTI_HAV_DT=LAB_IgMAntiHAVDate;
HEP_B_IGM_ANTIBODY=LAB_IgMAntiHBc;
IF missing(LAB_IgMAntiHBc) then do; HEP_B_IGM_ANTIBODY=''; end;
else do; 
HEP_B_IGM_ANTIBODY=trim(LAB_IgMAntiHBc); end;
IGM_ANTI_HBC_DT=LAB_IgMAntiHBcDate;
IF missing(LAB_PrevNegHepTest) then do; PREV_NEG_HEP_TEST_IND=''; end;
else do; 
PREV_NEG_HEP_TEST_IND=trim(LAB_PrevNegHepTest); end;
IF missing(LAB_SignalToCutoff) then do; ANTIHCV_SIGCUT_RATIO=''; end;
else do; 
ANTIHCV_SIGCUT_RATIO=trim(LAB_SignalToCutoff); end;

IF missing(LAB_Supplem_antiHCV) then do; ANTIHCV_SUPP_ASSAY=''; end;
else do; 
ANTIHCV_SUPP_ASSAY=trim(LAB_Supplem_antiHCV); end;

ALT_RESULT_DT=LAB_TestDate;
AST_RESULT_DT=LAB_TestDate2;
ALT_SGPT_RSLT_UP_LMT= INPUT(LAB_TestResultUpperLimit, comma20.);
AST_SGOT_RSLT_UP_LMT= INPUT(LAB_TestResultUpperLimit2, comma20.);
HEP_A_TOTAL_ANTIBODY=LAB_TotalAntiHAV;
IF missing(LAB_TotalAntiHAV) then do; HEP_A_TOTAL_ANTIBODY=''; end;
else do; 
HEP_A_TOTAL_ANTIBODY=trim(LAB_TotalAntiHAV); end;
TOTAL_ANTI_HAV_DT=LAB_TotalAntiHAVDate;
HEP_B_TOTAL_ANTIBODY=LAB_TotalAntiHBc;
IF missing(LAB_TotalAntiHBc) then do; HEP_B_TOTAL_ANTIBODY=''; end;
else do; 
HEP_B_TOTAL_ANTIBODY=trim(LAB_TotalAntiHBc); end;
TOTAL_ANTI_HBC_DT=LAB_TotalAntiHBcDate;
TOTAL_ANTI_HCV_DT=LAB_TotalAntiHCV_Date;
HEP_D_TOTAL_ANTIBODY=LAB_TotalAntiHDV;
IF missing(LAB_TotalAntiHDV) then do; HEP_D_TOTAL_ANTIBODY=''; end;
else do; 
HEP_D_TOTAL_ANTIBODY=trim(LAB_TotalAntiHDV); end;
TOTAL_ANTI_HDV_DT=LAB_TotalAntiHDV_Date;
HEP_E_TOTAL_ANTIBODY=LAB_TotalAntiHEV;
IF missing(LAB_TotalAntiHEV) then do; HEP_E_TOTAL_ANTIBODY=''; end;
else do; 
HEP_E_TOTAL_ANTIBODY=trim(LAB_TotalAntiHEV); end;
TOTAL_ANTI_HEV_DT=LAB_TotalAntiHEV_Date;
VERIFIED_TEST_DT=LAB_VerifiedTestDate;

keep HEP_C_TOTAL_ANTIBODY ANTIHCV_SUPP_ASSAY SUPP_ANTI_HCV_DT ALT_SGPT_RESULT ANTI_HBS_POS_REAC_IND ANTI_HBSAG_TESTED_IND AST_SGOT_RESULT HEP_E_ANTIGEN 
HBE_AG_DT HEP_B_SURFACE_ANTIGEN HBS_AG_DT HEP_B_DNA HBV_NAT_DT HCV_RNA HCV_RNA_DT HEP_D_TEST_IND 
HEP_A_IGM_ANTIBODY IGM_ANTI_HAV_DT HEP_B_IGM_ANTIBODY IGM_ANTI_HBC_DT PREV_NEG_HEP_TEST_IND ANTIHCV_SIGCUT_RATIO 
ALT_RESULT_DT AST_RESULT_DT ALT_SGPT_RSLT_UP_LMT AST_SGOT_RSLT_UP_LMT HEP_A_TOTAL_ANTIBODY 
TOTAL_ANTI_HAV_DT HEP_B_TOTAL_ANTIBODY TOTAL_ANTI_HBC_DT TOTAL_ANTI_HCV_DT HEP_D_TOTAL_ANTIBODY TOTAL_ANTI_HDV_DT 
HEP_E_TOTAL_ANTIBODY TOTAL_ANTI_HEV_DT VERIFIED_TEST_DT INVESTIGATION_key D_INV_LAB_FINDING_KEY;
RUN;

PROC SORT DATA=D_INV_LAB_FINDING OUT=D_INV_LAB_FINDING NODUPKEY;
BY INVESTIGATION_KEY;
RUN;


PROC SQL;
CREATE TABLE F_INV_MEDICAL_HISTORY AS 
SELECT F_PAGE_CASE.D_INV_MEDICAL_HISTORY_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
 ORDER BY D_INV_MEDICAL_HISTORY_KEY ;
QUIT;
DATA D_INV_MEDICAL_HISTORY;
MERGE  F_INV_MEDICAL_HISTORY(IN=in1) nbs_rdb.D_INV_MEDICAL_HISTORY(IN=in2);
BY D_INV_MEDICAL_HISTORY_KEY;
IF In1=1 then output D_INV_MEDICAL_HISTORY;
keep 
MDH_Diabetes MDH_DiabetesDxDate MDH_Jaundiced MDH_PrevAwareInfection MDH_ProviderOfCare MDH_ReasonForTest MDH_ReasonForTestingOth MDH_Symptomatic MDH_DueDate
INVESTIGATION_KEY D_INV_MEDICAL_HISTORY_KEY;
RUN;

DATA D_INV_MEDICAL_HISTORY;
SET D_INV_MEDICAL_HISTORY;
LENGTH EXT_DIABETES_IND $2000;
LENGTH EXT_PAT_JUNDICED_IND $2000;
LENGTH EXT_PAT_PREV_AWARE_IND $2000;
LENGTH EXT_HEP_CARE_PROVIDER $2000;
LENGTH EXT_TEST_REASON $2000;
LENGTH EXT_TEST_REASON_OTH $2000;
LENGTH EXT_SYMPTOMATIC_IND $2000;

EXT_DIABETES_DX_DT=MDH_DiabetesDxDate;
IF missing(MDH_Diabetes) then do; EXT_DIABETES_IND=''; end;
else do; 
EXT_DIABETES_IND=trim(MDH_Diabetes); end;

IF missing(MDH_Jaundiced) then do; EXT_PAT_JUNDICED_IND=''; end;
else do; 
EXT_PAT_JUNDICED_IND=trim(MDH_Jaundiced); end;
IF missing(MDH_PrevAwareInfection) then do; EXT_PAT_PREV_AWARE_IND=''; end;
else do; 
EXT_PAT_PREV_AWARE_IND=trim(MDH_PrevAwareInfection); end;
IF missing(MDH_ProviderOfCare) then do; EXT_HEP_CARE_PROVIDER=''; end;
else do; 
EXT_HEP_CARE_PROVIDER=trim(MDH_ProviderOfCare); end;
IF missing(MDH_ReasonForTest) then do; EXT_TEST_REASON=''; end;
else do; 
EXT_TEST_REASON=trim(MDH_ReasonForTest); end;
IF missing(MDH_ReasonForTestingOth) then do; EXT_TEST_REASON_OTH=''; end;
else do; 
EXT_TEST_REASON_OTH=trim(MDH_ReasonForTestingOth); end;
IF missing(MDH_Symptomatic) then do; EXT_SYMPTOMATIC_IND=''; end;
else do; 
EXT_SYMPTOMATIC_IND=trim(MDH_Symptomatic); end;
/*EXT_PREGNANCY_DUE_DT=MDH_DueDate;*/
RUN;

DATA D_INV_MEDICAL_HISTORY(sortedby=INVESTIGATION_KEY RENAME=(EXT_DIABETES_DX_DT=DIABETES_DX_DT 
EXT_DIABETES_DX_DT=DIABETES_DX_DT
EXT_PAT_JUNDICED_IND=PAT_JUNDICED_IND  EXT_PAT_PREV_AWARE_IND=PAT_PREV_AWARE_IND 
EXT_HEP_CARE_PROVIDER=HEP_CARE_PROVIDER EXT_TEST_REASON=TEST_REASON  
EXT_TEST_REASON_OTH=TEST_REASON_OTH  EXT_SYMPTOMATIC_IND =SYMPTOMATIC_IND 
MDH_DueDate=PREGNANCY_DUE_DT EXT_DIABETES_IND=DIABETES_IND));
SET D_INV_MEDICAL_HISTORY;
RUN;
PROC SORT DATA=D_INV_MEDICAL_HISTORY OUT=D_INV_MEDICAL_HISTORY NODUPKEY;
BY INVESTIGATION_KEY;
RUN;

PROC SQL;
CREATE TABLE F_INV_MOTHER AS 
SELECT F_PAGE_CASE.D_INV_MOTHER_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
 ORDER BY D_INV_MOTHER_KEY ;
QUIT;
DATA D_INV_MOTHER;
MERGE  F_INV_MOTHER(IN=in1) nbs_rdb.D_INV_MOTHER(IN=in2);
BY D_INV_MOTHER_KEY;
IF In1=1 then output D_INV_MOTHER;

keep /*MDH_DiabetesDxDate */
MTH_MotherBornOutsideUS MTH_MotherEthnicity MTH_MotherHBsAgPosPrior MTH_MotherPositiveAfter MTH_MotherRace 
MTH_MothersBirthCountry MTH_MotherPosTestDate INVESTIGATION_key D_INV_MOTHER_KEY;
RUN;
DATA D_INV_MOTHER;
set  D_INV_MOTHER;
LENGTH EXT_MTH_BORN_OUTSIDE_US $2000;
LENGTH EXT_MTH_ETHNICITY $2000;
LENGTH EXT_MTH_HBS_AG_PRIOR_POS $2000;
LENGTH EXT_MTH_POS_AFTER $2000;
LENGTH EXT_MTH_RACE $2000;
LENGTH EXT_MTH_BIRTH_COUNTRY $2000;


/*EXT_DIABETES_DX_DT=MDH_DiabetesDxDate;*/
IF missing(MTH_MotherBornOutsideUS) then do; EXT_MTH_BORN_OUTSIDE_US=''; end;
else do; 
EXT_MTH_BORN_OUTSIDE_US=trim(MTH_MotherBornOutsideUS); end;
IF missing(MTH_MotherEthnicity) then do; EXT_MTH_ETHNICITY=''; end;
else do; 
EXT_MTH_ETHNICITY=trim(MTH_MotherEthnicity); end;
IF missing(MTH_MotherHBsAgPosPrior) then do; EXT_MTH_HBS_AG_PRIOR_POS=''; end;
else do; 
EXT_MTH_HBS_AG_PRIOR_POS=trim(MTH_MotherHBsAgPosPrior); end;
IF missing(MTH_MotherPositiveAfter) then do; EXT_MTH_POS_AFTER=''; end;
else do; 
EXT_MTH_POS_AFTER=trim(MTH_MotherPositiveAfter); end;
IF missing(MTH_MotherRace) then do; EXT_MTH_RACE=''; end;
else do; 
EXT_MTH_RACE=trim(MTH_MotherRace); end;
IF missing(MTH_MothersBirthCountry) then do; EXT_MTH_BIRTH_COUNTRY=''; end;
else do; 
EXT_MTH_BIRTH_COUNTRY=trim(MTH_MothersBirthCountry); end;
MTH_POS_TEST_DT=MTH_MotherPosTestDate;
keep /*EXT_DIABETES_DX_DT */
EXT_MTH_BORN_OUTSIDE_US  EXT_MTH_ETHNICITY EXT_MTH_HBS_AG_PRIOR_POS EXT_MTH_POS_AFTER EXT_MTH_RACE EXT_MTH_BIRTH_COUNTRY
MTH_POS_TEST_DT INVESTIGATION_key D_INV_MOTHER_KEY;
RUN; 
DATA D_INV_MOTHER(sortedby=INVESTIGATION_KEY RENAME=( /*EXT_DIABETES_DX_DT=DIABETES_DX_DT  */
EXT_MTH_BORN_OUTSIDE_US=MTH_BORN_OUTSIDE_US  
EXT_MTH_ETHNICITY=MTH_ETHNICITY EXT_MTH_HBS_AG_PRIOR_POS=MTH_HBS_AG_PRIOR_POS 
EXT_MTH_POS_AFTER=MTH_POS_AFTER EXT_MTH_RACE=MTH_RACE  
EXT_MTH_BIRTH_COUNTRY=MTH_BIRTH_COUNTRY ));
SET D_INV_MOTHER;
RUN;
PROC SORT DATA=D_INV_MOTHER OUT=D_INV_MOTHER NODUPKEY;
BY INVESTIGATION_KEY;
RUN;


PROC SQL;
CREATE TABLE F_INV_RISK_FACTOR AS 
SELECT F_PAGE_CASE.D_INV_RISK_FACTOR_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
 ORDER BY D_INV_RISK_FACTOR_KEY;
QUIT;


DATA D_INV_RISK_FACTOR;
MERGE  F_INV_RISK_FACTOR(IN=in1) nbs_rdb.D_INV_RISK_FACTOR(IN=in2);
BY D_INV_RISK_FACTOR_KEY;
IF In1=1 then output D_INV_RISK_FACTOR;

keep RSK_BloodExpOther RSK_BloodTransfusion RSK_BloodTransfusionDate RSK_BloodWorkerCnctFreq RSK_BloodWorkerOnset RSK_BloodWorkerEver  RSK_BloodWorkerOnset RSK_ClottingPrior87 RSK_ContaminatedStick  RSK_DentalOralSx RSK_HEMODIALYSIS_BEFORE_ONSET  
RSK_HemodialysisLongTerm RSK_HepContactEver  RSK_HospitalizedPrior RSK_IDU RSK_Incarcerated24Hrs RSK_Incarcerated6months RSK_IncarceratedEver RSK_IncarceratedJail  RSK_IncarcerationPrison RSK_IncarcJuvenileFacilit  
RSK_IncarcTimeMonths RSK_IncarcYear6Mos RSK_IVInjectInfuseOutpt RSK_LongTermCareRes  RSK_NumSexPrtners  RSK_OtherBldExpSpec  RSK_Piercing RSK_PiercingOthLocSpec  RSK_PiercingRcvdFrom RSK_PSWrkrBldCnctFreq 
RSK_PublicSafetyWorker RSK_STDTxEver RSK_STDTxYr RSK_SurgeryOther RSK_Tattoo RSK_TattooLocation  RSK_TattooLocOthSpec RSK_TransfusionPrior92  RSK_TransplantPrior92 INVESTIGATION_key D_INV_RISK_FACTOR_KEY;
RUN;
DATA D_INV_RISK_FACTOR;
set  D_INV_RISK_FACTOR;
LENGTH EXT_BLD_EXPOSURE_IND $2000;		
LENGTH EXT_BLD_RECVD_IND $2000;		
LENGTH EXT_MED_DEN_BLD_CT_FRQ $2000;		
LENGTH EXT_MED_DEN_EMPLOYEE_IND $2000;		
LENGTH EXT_MED_DEN_EMP_EVER_IND $2000;		
LENGTH EXT_CLOTFACTOR_PRIOR_1987 $2000;		
LENGTH EXT_BLD_CONTAM_IND $2000;		
LENGTH EXT_DEN_WORK_OR_SURG_IND $2000;		
LENGTH EXT_HEMODIALYSIS_IND $2000;		
LENGTH EXT_LT_HEMODIALYSIS_IND $2000	;
LENGTH EXT_HSPTL_PRIOR_ONSET_IND $2000	;		
LENGTH EXT_EVER_INJCT_NOPRSC_DRG $2000	;		
LENGTH EXT_INCAR_24PLUSHRS_IND $2000;		
LENGTH EXT_INCAR_6PLUS_MO_IND $2000;		
LENGTH EXT_EVER_INCAR_IND $2000;			
LENGTH EXT_INCAR_TYPE_JAIL_IND $2000;		
LENGTH EXT_INCAR_TYPE_PRISON_IND $2000;		
LENGTH EXT_INCAR_TYPE_JUV_IND $2000;		
LENGTH EXT_OUTPAT_IV_INF_IND $2000;			
LENGTH EXT_LTCARE_RESIDENT_IND $2000;		
LENGTH EXT_BLD_EXPOSURE_OTH $2000;		
LENGTH EXT_PIERC_PRIOR_ONSET_IND $2000;			
LENGTH EXT_PIERC_PERF_LOC_OTH $2000;		
LENGTH EXT_PIERC_PERF_LOC $2000;	
LENGTH EXT_PUB_SAFETY_BLD_CT_FRQ $2000;			
LENGTH EXT_PUB_SAFETY_WORKER_IND $2000;			
LENGTH EXT_STD_TREATED_IND $2000;	
LENGTH EXT_NON_ORAL_SURGERY_IND $2000;	
LENGTH EXT_TATT_PRIOR_ONSET_IND $2000;	
LENGTH EXT_TATTOO_PERF_LOC $2000;		
LENGTH EXT_TATT_PRIOR_LOC_OTH $2000;			
LENGTH EXT_BLD_TRANSF_PRIOR_1992 $2000;			
LENGTH EXT_ORGN_TRNSP_PRIOR_1992 $2000;	
LENGTH EXT_HEP_CONTACT_EVER_IND $2000;	

IF missing(INVESTIGATION_KEY) then do; INVESTIGATION_KEY=.; end;

IF missing(RSK_BloodExpOther) then do; EXT_BLD_EXPOSURE_IND=''; end;
else do; 
EXT_BLD_EXPOSURE_IND=trim(RSK_BloodExpOther); end;
EXT_BLD_RECVD_IND=RSK_BloodTransfusion	;		
IF missing(RSK_BloodTransfusion) then do; EXT_BLD_RECVD_IND=''; end;
else do; 
EXT_BLD_RECVD_IND=trim(RSK_BloodTransfusion); end;
EXT_BLD_RECVD_DT=RSK_BloodTransfusionDate	;	
EXT_MED_DEN_BLD_CT_FRQ=RSK_BloodWorkerCnctFreq	;		

IF missing(RSK_BloodWorkerEver) then do; EXT_MED_DEN_EMP_EVER_IND=''; end;
else do; 
EXT_MED_DEN_EMP_EVER_IND=trim(RSK_BloodWorkerEver); end;
IF missing(RSK_BloodWorkerOnset) then do; EXT_MED_DEN_EMPLOYEE_IND=''; end;
else do; 
EXT_MED_DEN_EMPLOYEE_IND=trim(RSK_BloodWorkerOnset); end;

IF missing(RSK_ClottingPrior87) then do; EXT_CLOTFACTOR_PRIOR_1987=''; end;
else do; 
EXT_CLOTFACTOR_PRIOR_1987=trim(RSK_ClottingPrior87); end;
IF missing(RSK_ContaminatedStick) then do; EXT_BLD_CONTAM_IND=''; end;
else do; 
EXT_BLD_CONTAM_IND=trim(RSK_ContaminatedStick); end;
IF missing(RSK_DentalOralSx) then do; EXT_DEN_WORK_OR_SURG_IND=''; end;
else do; 
EXT_DEN_WORK_OR_SURG_IND=trim(RSK_DentalOralSx); end; 
IF missing(RSK_HEMODIALYSIS_BEFORE_ONSET) then do; EXT_HEMODIALYSIS_IND=''; end;
else do; 
EXT_HEMODIALYSIS_IND=trim(RSK_HEMODIALYSIS_BEFORE_ONSET); end;
IF missing(RSK_HemodialysisLongTerm) then do; EXT_LT_HEMODIALYSIS_IND=''; end;
else do; 
EXT_LT_HEMODIALYSIS_IND=trim(RSK_HemodialysisLongTerm); end;
IF missing(RSK_HospitalizedPrior) then do; EXT_HSPTL_PRIOR_ONSET_IND=''; end;
else do; 
EXT_HSPTL_PRIOR_ONSET_IND=trim(RSK_HospitalizedPrior); end;
IF missing(RSK_IDU) then do; EXT_EVER_INJCT_NOPRSC_DRG=''; end;
else do; 
EXT_EVER_INJCT_NOPRSC_DRG=trim(RSK_IDU); end;
IF missing(RSK_Incarcerated24Hrs) then do; EXT_INCAR_24PLUSHRS_IND=''; end;
else do; 
EXT_INCAR_24PLUSHRS_IND=trim(RSK_Incarcerated24Hrs); end;
IF missing(RSK_Incarcerated6months) then do; EXT_INCAR_6PLUS_MO_IND=''; end;
else do; 
EXT_INCAR_6PLUS_MO_IND=trim(RSK_Incarcerated6months); end;
IF missing(RSK_IncarceratedEver) then do; EXT_EVER_INCAR_IND=''; end;
else do; 
EXT_EVER_INCAR_IND=trim(RSK_IncarceratedEver); end;
EXT_INCAR_TYPE_JAIL_IND=RSK_IncarceratedJail;		
IF missing(RSK_IncarceratedJail) then do; EXT_INCAR_TYPE_JAIL_IND=''; end;
else do; 
EXT_INCAR_TYPE_JAIL_IND=trim(RSK_IncarceratedJail); end;
IF missing(RSK_IncarcerationPrison) then do; EXT_INCAR_TYPE_PRISON_IND=''; end;
else do; 
EXT_INCAR_TYPE_PRISON_IND=trim(RSK_IncarcerationPrison); end;

IF missing(RSK_IncarcJuvenileFacilit) then do; EXT_INCAR_TYPE_JUV_IND=''; end;
else do; 
EXT_INCAR_TYPE_JUV_IND=trim(RSK_IncarcJuvenileFacilit); end;

EXT_LAST6PLUSMO_INCAR_PER= INPUT(RSK_IncarcTimeMonths, comma20.);

EXT_LAST6PLUSMO_INCAR_YR= INPUT(RSK_IncarcYear6Mos, comma20.);

IF missing(RSK_IVInjectInfuseOutpt) then do; EXT_OUTPAT_IV_INF_IND=''; end;
else do; 
EXT_OUTPAT_IV_INF_IND=trim(RSK_IVInjectInfuseOutpt); end;
IF missing(RSK_LongTermCareRes) then do; EXT_LTCARE_RESIDENT_IND=''; end;
else do; 
EXT_LTCARE_RESIDENT_IND=trim(RSK_LongTermCareRes); end;
EXT_LIFE_SEX_PRTNR_NBR= INPUT(RSK_NumSexPrtners, comma20.);
IF missing(RSK_OtherBldExpSpec) then do; EXT_BLD_EXPOSURE_OTH=''; end;
else do; 
EXT_BLD_EXPOSURE_OTH=trim(RSK_OtherBldExpSpec); end;
IF missing(RSK_Piercing) then do; EXT_PIERC_PRIOR_ONSET_IND=''; end;
else do; 
EXT_PIERC_PRIOR_ONSET_IND=trim(RSK_Piercing); end;
IF missing(RSK_PiercingOthLocSpec) then do; EXT_PIERC_PERF_LOC_OTH=''; end;
else do; 
EXT_PIERC_PERF_LOC_OTH=trim(RSK_PiercingOthLocSpec); end;
IF missing(RSK_PiercingRcvdFrom) then do; EXT_PIERC_PERF_LOC=''; end;
else do; 
EXT_PIERC_PERF_LOC=trim(RSK_PiercingRcvdFrom); end;
IF missing(RSK_PSWrkrBldCnctFreq) then do; EXT_PUB_SAFETY_BLD_CT_FRQ=''; end;
else do; 
EXT_PUB_SAFETY_BLD_CT_FRQ=trim(RSK_PSWrkrBldCnctFreq); end;
IF missing(RSK_PublicSafetyWorker) then do; EXT_PUB_SAFETY_WORKER_IND=''; end;
else do; 
EXT_PUB_SAFETY_WORKER_IND=trim(RSK_PublicSafetyWorker); end;
IF missing(RSK_STDTxEver) then do; EXT_STD_TREATED_IND=''; end;
else do; 
EXT_STD_TREATED_IND=trim(RSK_STDTxEver); end;
EXT_STD_LAST_TREATMENT_YR= INPUT(RSK_STDTxYr, comma20.);
IF missing(RSK_SurgeryOther) then do; EXT_NON_ORAL_SURGERY_IND=''; end;
else do; 
EXT_NON_ORAL_SURGERY_IND=trim(RSK_SurgeryOther); end;
IF missing(RSK_Tattoo) then do; EXT_TATT_PRIOR_ONSET_IND=''; end;
else do; 
EXT_TATT_PRIOR_ONSET_IND=trim(RSK_Tattoo); end;
IF missing(RSK_TattooLocation) then do; EXT_TATTOO_PERF_LOC=''; end;
else do; 
EXT_TATTOO_PERF_LOC=trim(RSK_TattooLocation); end;
IF missing(RSK_TattooLocOthSpec) then do; EXT_TATT_PRIOR_LOC_OTH=''; end;
else do; 
EXT_TATT_PRIOR_LOC_OTH=trim(RSK_TattooLocOthSpec); end;
IF missing(RSK_TransfusionPrior92) then do; EXT_BLD_TRANSF_PRIOR_1992=''; end;
else do; 
EXT_BLD_TRANSF_PRIOR_1992=trim(RSK_TransfusionPrior92); end;
IF missing(RSK_TransplantPrior92) then do; EXT_ORGN_TRNSP_PRIOR_1992=''; end;
else do; 
EXT_ORGN_TRNSP_PRIOR_1992=trim(RSK_TransplantPrior92); end;
IF missing(RSK_HepContactEver) then do; EXT_HEP_CONTACT_EVER_IND=''; end;
else do; 
EXT_HEP_CONTACT_EVER_IND=trim(RSK_HepContactEver); end;


RUN; 
DATA D_INV_RISK_FACTOR( RENAME=( 
EXT_BLD_EXPOSURE_IND=BLD_EXPOSURE_IND EXT_BLD_EXPOSURE_IND=BLD_EXPOSURE_IND EXT_BLD_RECVD_IND=BLD_RECVD_IND EXT_BLD_RECVD_DT=BLD_RECVD_DT EXT_MED_DEN_BLD_CT_FRQ=MED_DEN_BLD_CT_FRQ
EXT_MED_DEN_EMPLOYEE_IND=MED_DEN_EMPLOYEE_IND  EXT_CLOTFACTOR_PRIOR_1987=CLOTFACTOR_PRIOR_1987 EXT_BLD_CONTAM_IND=BLD_CONTAM_IND
EXT_DEN_WORK_OR_SURG_IND=DEN_WORK_OR_SURG_IND EXT_HEMODIALYSIS_IND=HEMODIALYSIS_IND EXT_LT_HEMODIALYSIS_IND=LT_HEMODIALYSIS_IND 
EXT_HSPTL_PRIOR_ONSET_IND=HSPTL_PRIOR_ONSET_IND EXT_EVER_INJCT_NOPRSC_DRG=EVER_INJCT_NOPRSC_DRG EXT_INCAR_24PLUSHRS_IND=INCAR_24PLUSHRS_IND EXT_INCAR_6PLUS_MO_IND=INCAR_6PLUS_MO_IND
EXT_EVER_INCAR_IND=EVER_INCAR_IND EXT_INCAR_TYPE_JAIL_IND=INCAR_TYPE_JAIL_IND EXT_INCAR_TYPE_PRISON_IND=INCAR_TYPE_PRISON_IND EXT_INCAR_TYPE_JUV_IND=INCAR_TYPE_JUV_IND
EXT_LAST6PLUSMO_INCAR_PER=LAST6PLUSMO_INCAR_PER EXT_LAST6PLUSMO_INCAR_YR=LAST6PLUSMO_INCAR_YR EXT_OUTPAT_IV_INF_IND=OUTPAT_IV_INF_IND EXT_LTCARE_RESIDENT_IND=LTCARE_RESIDENT_IND
EXT_LIFE_SEX_PRTNR_NBR=LIFE_SEX_PRTNR_NBR EXT_BLD_EXPOSURE_OTH=BLD_EXPOSURE_OTH EXT_PIERC_PRIOR_ONSET_IND=PIERC_PRIOR_ONSET_IND EXT_PIERC_PERF_LOC_OTH=PIERC_PERF_LOC_OTH
EXT_PIERC_PERF_LOC=PIERC_PERF_LOC EXT_PUB_SAFETY_BLD_CT_FRQ=PUB_SAFETY_BLD_CT_FRQ EXT_PUB_SAFETY_WORKER_IND=PUB_SAFETY_WORKER_IND EXT_STD_TREATED_IND=STD_TREATED_IND
EXT_STD_LAST_TREATMENT_YR=STD_LAST_TREATMENT_YR EXT_NON_ORAL_SURGERY_IND=NON_ORAL_SURGERY_IND EXT_TATT_PRIOR_ONSET_IND=TATT_PRIOR_ONSET_IND EXT_TATTOO_PERF_LOC=TATTOO_PERF_LOC
EXT_TATT_PRIOR_LOC_OTH=TATT_PRIOR_LOC_OTH EXT_BLD_TRANSF_PRIOR_1992=BLD_TRANSF_PRIOR_1992 EXT_ORGN_TRNSP_PRIOR_1992=ORGN_TRNSP_PRIOR_1992 EXT_HEP_CONTACT_EVER_IND=HEP_CONTACT_EVER_IND
EXT_MED_DEN_EMP_EVER_IND=MED_DEN_EMP_EVER_IND));
SET D_INV_RISK_FACTOR;
RUN;
PROC SORT DATA=D_INV_RISK_FACTOR OUT=D_INV_RISK_FACTOR NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
 
PROC SQL;
CREATE TABLE F_INV_TRAVEL AS 
SELECT F_PAGE_CASE.D_INV_TRAVEL_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
 ORDER BY D_INV_TRAVEL_KEY ;
QUIT;

DATA D_INV_TRAVEL;
MERGE  F_INV_TRAVEL(IN=in1) nbs_rdb.D_INV_TRAVEL(IN=in2);
BY D_INV_TRAVEL_KEY;
IF In1=1 then output D_INV_TRAVEL;

KEEP TRV_HouseholdTravel TRV_PatientTravel TRV_PtTravelCountries TRV_TravelCountryHouse TRV_VHF_TRAVEL_REASON
INVESTIGATION_key D_INV_TRAVEL_KEY;
RUN;
DATA D_INV_TRAVEL;
SET D_INV_TRAVEL;
LENGTH EXT_HOUSEHOLD_TRAVEL_IND $2000;
LENGTH EXT_TRAVEL_OUT_USACAN_IND $2000;
LENGTH EXT_TRAVEL_OUT_USACAN_LOC $2000;
LENGTH EXT_HOUSEHOLD_TRAVEL_LOC $2000;
LENGTH EXT_TRAVEL_REASON $2000;
IF missing(TRV_HouseholdTravel) then do; EXT_HOUSEHOLD_TRAVEL_IND=''; end;
else do; 
EXT_HOUSEHOLD_TRAVEL_IND=trim(TRV_HouseholdTravel); end;
EXT_TRAVEL_OUT_USACAN_IND=TRV_PatientTravel;  
IF missing(TRV_PatientTravel) then do; EXT_TRAVEL_OUT_USACAN_IND=''; end;
else do; 
EXT_TRAVEL_OUT_USACAN_IND=trim(TRV_PatientTravel); end;
IF missing(TRV_PtTravelCountries) then do; EXT_TRAVEL_OUT_USACAN_LOC=''; end;
else do; 
EXT_TRAVEL_OUT_USACAN_LOC=trim(TRV_PtTravelCountries); end;
IF missing(TRV_TravelCountryHouse) then do; EXT_HOUSEHOLD_TRAVEL_LOC=''; end;
else do; 
EXT_HOUSEHOLD_TRAVEL_LOC=trim(TRV_TravelCountryHouse); end;
IF missing(TRV_VHF_TRAVEL_REASON) then do; EXT_TRAVEL_REASON=''; end;
else do; 
EXT_TRAVEL_REASON=trim(TRV_VHF_TRAVEL_REASON); end;
keep EXT_HOUSEHOLD_TRAVEL_IND EXT_TRAVEL_OUT_USACAN_IND EXT_TRAVEL_OUT_USACAN_LOC EXT_HOUSEHOLD_TRAVEL_LOC EXT_TRAVEL_REASON INVESTIGATION_key D_INV_TRAVEL_KEY;
RUN;


DATA D_INV_TRAVEL(sortedby=INVESTIGATION_KEY RENAME=( 
EXT_TRAVEL_REASON=TRAVEL_REASON
EXT_HOUSEHOLD_TRAVEL_IND=HOUSEHOLD_TRAVEL_IND  EXT_TRAVEL_OUT_USACAN_IND=TRAVEL_OUT_USACAN_IND EXT_TRAVEL_OUT_USACAN_LOC=TRAVEL_OUT_USACAN_LOC 
EXT_HOUSEHOLD_TRAVEL_LOC=HOUSEHOLD_TRAVEL_LOC));
SET D_INV_TRAVEL;
RUN;
PROC SORT DATA=D_INV_TRAVEL OUT=D_INV_TRAVEL NODUPKEY;
BY INVESTIGATION_KEY;
RUN;

PROC SQL;
CREATE TABLE F_INV_VACCINATION AS 
SELECT F_PAGE_CASE.D_INV_VACCINATION_KEY,
F_PAGE_CASE.INVESTIGATION_KEY 
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
ORDER BY D_INV_VACCINATION_KEY ;
QUIT;
DATA D_INV_VACCINATION;
MERGE  F_INV_VACCINATION(IN=in1) nbs_rdb.D_INV_VACCINATION(IN=in2);
BY D_INV_VACCINATION_KEY;
IF In1=1 then output D_INV_VACCINATION;
KEEP VAC_ImmuneGlobulin VAC_LastIGDose VAC_Vacc_Rcvd VAC_VaccinationDate VAC_VaccineDoses VAC_YearofLastDose INVESTIGATION_key D_INV_VACCINATION_KEY;

RUN;

DATA D_INV_VACCINATION;
SET D_INV_VACCINATION;
LENGTH EXT_IMM_GLOB_RECVD_IND $2000;
LENGTH EXT_VACC_RECVD_IND $2000;

EXT_IMM_GLOB_RECVD_IND=VAC_ImmuneGlobulin;
IF missing(VAC_ImmuneGlobulin) then do; EXT_IMM_GLOB_RECVD_IND=''; end;
EXT_IMM_GLOB_RECVD_IND=VAC_ImmuneGlobulin;
IF missing(RSK_STDTxYr) then do; EXT_STD_LAST_TREATMENT_YR=''; end;
else do; 
EXT_STD_LAST_TREATMENT_YR=trim(RSK_STDTxYr); end;
EXT_GLOB_LAST_RECVD_YR= VAC_LastIGDose;
IF missing(VAC_Vacc_Rcvd) then do; EXT_VACC_RECVD_IND=''; end;
else do; 
EXT_VACC_RECVD_IND=trim(VAC_Vacc_Rcvd); end;
IF missing(VAC_VaccinationDate) then do; EXT_VACC_RECVD_DT=''; end;
else do; 
EXT_VACC_RECVD_DT=trim(VAC_VaccinationDate); end;
EXT_VACC_DOSE_RECVD_NBR= INPUT(VAC_VaccineDoses, comma20.);
EXT_VACC_LAST_RECVD_YR= INPUT(VAC_YearofLastDose, comma20.);
keep EXT_IMM_GLOB_RECVD_IND EXT_GLOB_LAST_RECVD_YR EXT_VACC_RECVD_IND EXT_VACC_DOSE_RECVD_NBR EXT_VACC_LAST_RECVD_YR EXT_VACC_RECVD_DT
INVESTIGATION_key D_INV_VACCINATION_KEY;
RUN;

DATA D_INV_VACCINATION(sortedby=INVESTIGATION_KEY RENAME=(EXT_VACC_RECVD_DT=VACC_RECVD_DT EXT_IMM_GLOB_RECVD_IND=IMM_GLOB_RECVD_IND
EXT_GLOB_LAST_RECVD_YR=GLOB_LAST_RECVD_YR EXT_VACC_RECVD_IND=VACC_RECVD_IND
EXT_VACC_DOSE_RECVD_NBR=VACC_DOSE_RECVD_NBR EXT_VACC_LAST_RECVD_YR=VACC_LAST_RECVD_YR));
SET D_INV_VACCINATION;
RUN;
PROC SORT DATA=D_INV_VACCINATION OUT=D_INV_VACCINATION NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
PROC SQL;
create table D_PATIENT as select 
	F_PAGE_CASE.INVESTIGATION_KEY,
	D_PATIENT.PATIENT_UID, 
	D_PATIENT.PATIENT_ETHNICITY	AS 	PAT_ETHNICITY	'PAT_ETHNICITY',		
	D_PATIENT.PATIENT_AGE_REPORTED	AS 	PAT_REPORTED_AGE	'PAT_REPORTED_AGE',		
	D_PATIENT.PATIENT_AGE_REPORTED_UNIT	AS 	PAT_REPORTED_AGE_UNIT	'PAT_REPORTED_AGE_UNIT',		
	D_PATIENT.PATIENT_CITY	AS 	PAT_CITY	'PAT_CITY',		
	D_PATIENT.PATIENT_COUNTRY	AS 	PAT_COUNTRY	'PAT_COUNTRY',		
	D_PATIENT.PATIENT_BIRTH_COUNTRY	AS 	PAT_BIRTH_COUNTRY	'PAT_BIRTH_COUNTRY',		
	D_PATIENT.PATIENT_COUNTY	AS 	PAT_COUNTY	'PAT_COUNTY',		
	D_PATIENT.PATIENT_CURRENT_SEX	AS 	PAT_CURR_GENDER	'PAT_CURR_GENDER',		
	D_PATIENT.PATIENT_DOB	AS 	PAT_DOB	'PAT_DOB',		
	D_PATIENT.PATIENT_FIRST_NAME	AS 	PAT_FIRST_NM	'PAT_FIRST_NM',		
	D_PATIENT.PATIENT_LAST_NAME	AS 	PAT_LAST_NM	'PAT_LAST_NM',		
	D_PATIENT.PATIENT_LOCAL_ID	AS 	PAT_LOCAL_ID	'PAT_LOCAL_ID',		
	D_PATIENT.PATIENT_MIDDLE_NAME	AS 	PAT_MIDDLE_NM	'PAT_MIDDLE_NM',		
	D_PATIENT.PATIENT_RACE_CALCULATED	AS 	PAT_RACE	'PAT_RACE',		
	D_PATIENT.PATIENT_STATE	AS 	PAT_STATE	'PAT_STATE',		
	D_PATIENT.PATIENT_STREET_ADDRESS_1	AS 	PAT_STREET_ADDR_1	'PAT_STREET_ADDR_1',		
	D_PATIENT.PATIENT_STREET_ADDRESS_2	AS 	PAT_STREET_ADDR_2	'PAT_STREET_ADDR_2',		
	D_PATIENT.PATIENT_ZIP	AS 	PAT_ZIP_CODE	'PAT_ZIP_CODE',
	D_PATIENT.PATIENT_ENTRY_METHOD as PAT_ELECTRONIC_IND 'PAT_ELECTRONIC_IND',
	D_PATIENT.PATIENT_ADD_TIME as INV_ADD_TIME 'INV_ADD_TIME'
	FROM F_PAGE_CASE
INNER JOIN NBS_RDB.CONDITION ON F_PAGE_CASE.CONDITION_KEY=CONDITION.CONDITION_KEY
INNER JOIN nbs_rdb.D_PATIENT
ON D_PATIENT.PATIENT_KEY=F_PAGE_CASE.PATIENT_KEY
order by INVESTIGATION_key;
create table INVESTIGATION as select 
	F_PAGE_CASE.INVESTIGATION_KEY,
	INVESTIGATION.CASE_UID,
	CONDITION.CONDITION_CD	AS 	CONDITION_CD	'CONDITION_CD',		
	INVESTIGATION.CASE_OID	AS 	PROGRAM_JURISDICTION_OID	'PROGRAM_JURISDICTION_OID',		
	INVESTIGATION.CASE_RPT_MMWR_WK	,		
	INVESTIGATION.CASE_RPT_MMWR_YR	,		
	INVESTIGATION.DIAGNOSIS_DT	AS 	DIAGNOSIS_DT	'DIAGNOSIS_DT',		
	INVESTIGATION.DIE_FRM_THIS_ILLNESS_IND	AS 	DIE_FRM_THIS_ILLNESS_IND	'DIE_FRM_THIS_ILLNESS_IND',		
	INVESTIGATION.DISEASE_IMPORTED_IND	AS 	DISEASE_IMPORTED_IND	'DISEASE_IMPORTED_IND',		
	INVESTIGATION.EARLIEST_RPT_TO_CNTY_DT	AS 	EARLIEST_RPT_TO_CNTY	'EARLIEST_RPT_TO_CNTY',		
	INVESTIGATION.EARLIEST_RPT_TO_STATE_DT	AS 	EARLIEST_RPT_TO_STATE_DT	'EARLIEST_RPT_TO_STATE_DT',		
	INVESTIGATION.HSPTL_ADMISSION_DT	AS 	HSPTL_ADMISSION_DT	'HSPTL_ADMISSION_DT',		
	INVESTIGATION.HSPTL_DISCHARGE_DT	AS 	HSPTL_DISCHARGE_DT	'HSPTL_DISCHARGE_DT',		
	INVESTIGATION.HSPTL_DURATION_DAYS	AS 	HSPTL_DURATION_DAYS	'HSPTL_DURATION_DAYS',		
	INVESTIGATION.HSPTLIZD_IND	AS 	HSPTLIZD_IND	'HSPTLIZD_IND',		
	INVESTIGATION.ILLNESS_ONSET_DT	AS 	ILLNESS_ONSET_DT	'ILLNESS_ONSET_DT',		
	INVESTIGATION.IMPORT_FRM_CITY	AS 	IMPORT_FROM_CITY	'IMPORT_FROM_CITY',		
	INVESTIGATION.IMPORT_FRM_CNTRY	AS 	IMPORT_FROM_COUNTRY	'IMPORT_FROM_COUNTRY',		
	INVESTIGATION.IMPORT_FRM_CNTY	AS 	IMPORT_FROM_COUNTY	'IMPORT_FROM_COUNTY',		
	INVESTIGATION.IMPORT_FRM_STATE	AS 	IMPORT_FROM_STATE	'IMPORT_FROM_STATE',		
	INVESTIGATION.INV_CASE_STATUS	AS 	INV_CASE_STATUS	'INV_CASE_STATUS',		
	INVESTIGATION.INV_COMMENTS	AS 	INV_COMMENTS	'INV_COMMENTS',		
	INVESTIGATION.INV_LOCAL_ID	AS 	INV_LOCAL_ID	'INV_LOCAL_ID',		
	INVESTIGATION.INV_RPT_DT	AS 	INV_RPT_DT	'INV_RPT_DT',		
	INVESTIGATION.INV_START_DT	AS 	INV_START_DT	'INV_START_DT',		
	INVESTIGATION.INVESTIGATION_KEY	AS 	INVESTIGATION_KEY	'INVESTIGATION_KEY',		
	INVESTIGATION.INVESTIGATION_STATUS	AS 	INVESTIGATION_STATUS	'INVESTIGATION_STATUS',		
	INVESTIGATION.JURISDICTION_NM	AS 	JURISDICTION_NM	'JURISDICTION_NM',		
	INVESTIGATION.OUTBREAK_IND	AS 	OUTBREAK_IND	'OUTBREAK_IND',		
	INVESTIGATION.PATIENT_PREGNANT_IND	AS 	PAT_PREGNANT_IND	'PAT_PREGNANT_IND',		
	INVESTIGATION.RPT_SRC_CD_DESC	AS 	RPT_SRC_CD_DESC	'RPT_SRC_CD_DESC',		
	INVESTIGATION.TRANSMISSION_MODE	AS 	TRANSMISSION_MODE 	'TRANSMISSION_MODE',
	INVESTIGATION.LEGACY_CASE_ID AS 	LEGACY_CASE_ID 	'LEGACY_CASE_ID',
	DATE_MM_DD_YYYY	AS NOT_SUBMIT_DT 'NOT_SUBMIT_DT'
FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
INNER JOIN NBS_RDB.CONDITION ON F_PAGE_CASE.CONDITION_KEY=CONDITION.CONDITION_KEY
inner join nbs_rdb.D_PATIENT on
F_PAGE_CASE.patient_key =D_PATIENT.patient_key
INNER JOIN nbs_rdb.INVESTIGATION ON 
F_PAGE_CASE.INVESTIGATION_KEY=INVESTIGATION.INVESTIGATION_KEY
LEFT OUTER JOIN nbs_rdb.NOTIFICATION_EVENT
ON NOTIFICATION_EVENT.PATIENT_KEY=F_PAGE_CASE.PATIENT_KEY
LEFT OUTER JOIN nbs_rdb.RDB_DATE
ON NOTIFICATION_EVENT.NOTIFICATION_SUBMIT_DT_KEY=DATE_KEY
order by INVESTIGATION_key;
QUIT;
data INVESTIGATION;
set INVESTIGATION;

CASE_RPT_MMWR_WEEK= INPUT(CASE_RPT_MMWR_WK, comma20.);

CASE_RPT_MMWR_YEAR= INPUT(CASE_RPT_MMWR_YR, comma20.);

run;

PROC SQL;
	CREATE TABLE HEP_PAT_PROV 
	AS SELECT 
			P.PROVIDER_LOCAL_ID,
			P.PROVIDER_FIRST_NAME AS PHYSICIAN_FIRST_NM 'PHYSICIAN_FIRST_NM' ,
			P.PROVIDER_MIDDLE_NAME AS PHYSICIAN_MIDDLE_NM 'PHYSICIAN_MIDDLE_NM',
			P.PROVIDER_LAST_NAME AS PHYSICIAN_LAST_NM 'PHYSICIAN_LAST_NM',         
		 	P.PROVIDER_CITY AS PHYS_CITY 'PHYS_CITY',
			P.PROVIDER_STATE AS PHYS_STATE 'PHYS_STATE',
			P.PROVIDER_COUNTY AS PHYS_COUNTY 'PHYS_COUNTY',
			P.PROVIDER_ADD_TIME,
			P.PROVIDER_LAST_CHANGE_TIME, 
			P.PROVIDER_UID AS PHYSICIAN_UID 'PHYSICIAN_UID',
			INVGTR.PROVIDER_FIRST_NAME AS INVESTIGATOR_FIRST_NM 'INVESTIGATOR_FIRST_NM' ,
			INVGTR.PROVIDER_MIDDLE_NAME AS INVESTIGATOR_MIDDLE_NM 'INVESTIGATOR_MIDDLE_NM',
			INVGTR.PROVIDER_LAST_NAME AS INVESTIGATOR_LAST_NM 'INVESTIGATOR_LAST_NM',         
			INVGTR.PROVIDER_UID AS INVESTIGATOR_UID,
			REPTORG.ORGANIZATION_NAME AS RPT_SRC_SOURCE_NM 'RPT_SRC_SOURCE_NM',
			REPTORG.ORGANIZATION_COUNTY_CODE AS RPT_SRC_COUNTY_CD 'RPT_SRC_COUNTY_CD',
			REPTORG.ORGANIZATION_COUNTY AS RPT_SRC_COUNTY 'RPT_SRC_COUNTY',
			REPTORG.ORGANIZATION_CITY AS RPT_SRC_CITY 'RPT_SRC_CITY',
			REPTORG.ORGANIZATION_STATE AS RPT_SRC_STATE 'RPT_SRC_STATE',
			REPTORG.ORGANIZATION_UID AS REPORTING_SOURCE_UID 'REPORTING_SOURCE_UID',
			F_PAGE_CASE.INVESTIGATION_KEY
	FROM NBS_RDB.F_PAGE_CASE PAGE_CASE INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
	INNER JOIN CONDITION ON F_PAGE_CASE.CONDITION_KEY=CONDITION.CONDITION_KEY
	LEFT OUTER JOIN 
			NBS_RDB.D_PROVIDER P
	ON  
			PAGE_CASE.PHYSICIAN_KEY = P.PROVIDER_KEY
	LEFT OUTER JOIN 
			NBS_RDB.D_PROVIDER INVGTR
	ON 
			PAGE_CASE.INVESTIGATOR_KEY = INVGTR.PROVIDER_KEY
	LEFT OUTER JOIN 
			NBS_RDB.D_ORGANIZATION REPTORG
	ON 
			PAGE_CASE.ORG_AS_REPORTER_KEY=REPTORG.ORGANIZATION_KEY
	order by INVESTIGATION_KEY;
QUIT;
DATA HEP_PAT_PROV;
SET HEP_PAT_PROV;
	PHYS_NAME=trim(PHYSICIAN_first_nm);
	if (LENGTHN(TRIM(PHYS_NAME))>0 && LENGTHN(trim(PHYSICIAN_middle_nm))>0)
	then do PHYS_NAME= trim(PHYS_NAME)||' '||trim(PHYSICIAN_middle_nm); end;

	if (LENGTHN(TRIM(PHYS_NAME))>0 && LENGTHN(trim(PHYSICIAN_last_nm))>0)
	then do PHYS_NAME=trim(PHYSICIAN_last_nm) ||', '||trim(PHYS_NAME); end;

	INVESTIGATOR_NAME=trim(INVESTIGATOR_first_nm);
	if (LENGTHN(TRIM(INVESTIGATOR_NAME))>0 && LENGTHN(trim(INVESTIGATOR_middle_nm))>0) 
	then do INVESTIGATOR_NAME= trim(INVESTIGATOR_NAME)||' '||trim(INVESTIGATOR_middle_nm); end;

	if (LENGTHN(TRIM(INVESTIGATOR_NAME))>0 && LENGTHN(trim(INVESTIGATOR_last_nm))>0)
	then do INVESTIGATOR_NAME= trim(INVESTIGATOR_last_nm) ||', '||trim(INVESTIGATOR_NAME); end;



	LENGTHP=LENGTHN(TRIM(PHYS_CITY) ||''||TRIM(PHYS_STATE) ||''||TRIM(PHYS_COUNTY));
	LENGTHO= LENGTHN(TRIM(RPT_SRC_COUNTY) ||''|| TRIM(RPT_SRC_STATE) ||''|| TRIM(RPT_SRC_CITY));
	IF 	LENGTHP > 0 THEN PHYSICIAN_ADDRESS_USE_DESC='Primary Work Place';
	IF 	LENGTHP > 0 THEN PHYSICIAN_ADDRESS_TYPE_DESC='Office';
	IF 	LENGTHO > 0 THEN REPORTING_SOURCE_ADDRESS_USE='Primary Work Place';
	IF 	LENGTHO > 0 THEN REPORTING_SOURCE_ADDRESS_TYPE='Office';
DROP PHYSICIAN_first_nm PHYSICIAN_middle_nm PHYSICIAN_last_nm INVESTIGATOR_first_nm INVESTIGATOR_middle_nm INVESTIGATOR_last_nm
LENGTHO LENGTHP;
RUN;


PROC SQL;
CREATE TABLE F_INVESTIGATION_REPEAT AS  
SELECT F_PAGE_CASE.D_INVESTIGATION_REPEAT_KEY,
	F_PAGE_CASE.INVESTIGATION_KEY ,
	F_PAGE_CASE.CONDITION_KEY
	FROM NBS_RDB.F_PAGE_CASE PAGE_CASE
	INNER JOIN F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY=PAGE_CASE.INVESTIGATION_KEY
	ORDER BY D_INVESTIGATION_REPEAT_KEY;
QUIT;

DATA D_INVESTIGATION_REPEAT(sortedby=INVESTIGATION_KEY );
MERGE  F_INVESTIGATION_REPEAT(IN=in1) nbs_rdb.D_INVESTIGATION_REPEAT(IN=in2);
BY D_INVESTIGATION_REPEAT_KEY;
IF In1=1 then output D_INVESTIGATION_REPEAT;
keep VAC_VaccinationDate VAC_VaccineDoseNum 
PAGE_CASE_UID BLOCK_NM D_INVESTIGATION_REPEAT_KEY  INVESTIGATION_KEY CONDITION_KEY ANSWER_GROUP_SEQ_NBR;
RUN;

 
DATA D_INVESTIGATION_REPEAT;
SET D_INVESTIGATION_REPEAT;
IF missing(VAC_VaccinationDate) then do; VAC_VaccinationDate=.; end;
else do; 
VAC_VaccinationDate=trim(VAC_VaccinationDate); end;

IF missing(VAC_VaccineDoseNum) then do; VAC_VaccineDoseNum=.; end;
else do; 
VAC_VaccineDoseNum=trim(VAC_VaccineDoseNum); end;
REPEATCOUNTER = compress('A'|| answer_group_seq_nbr);
keep  VAC_VaccinationDate VAC_VaccineDoseNum PAGE_CASE_UID REPEATCOUNTER  D_INVESTIGATION_REPEAT_KEY INVESTIGATION_KEY BLOCK_NM CONDITION_KEY ANSWER_GROUP_SEQ_NBR;
run;
 
 
PROC SQL;
	CREATE TABLE METADATA_TEST AS
	SELECT CONDITION.CONDITION_KEY, BLOCK_NM, INVESTIGATION_FORM_CD  FROM NBS_ODS.NBS_UI_METADATA 
	INNER JOIN CONDITION ON NBS_UI_METADATA.INVESTIGATION_FORM_CD=CONDITION.DISEASE_GRP_DESC
	WHERE QUESTION_IDENTIFIER IN ('VAC103', 'VAC120') and BLOCK_NM  IS NOT MISSING;
QUIT;

PROC SQL;
CREATE TABLE VAC_REPEAT AS SELECT DISTINCT VAC_VaccinationDate, VAC_VaccineDoseNum, D_INVESTIGATION_REPEAT_KEY, D_INVESTIGATION_REPEAT.BLOCK_NM,
D_INVESTIGATION_REPEAT.INVESTIGATION_KEY, D_INVESTIGATION_REPEAT.PAGE_CASE_UID, D_INVESTIGATION_REPEAT.ANSWER_GROUP_SEQ_NBR FROM 
D_INVESTIGATION_REPEAT  INNER JOIN CONDITION ON D_INVESTIGATION_REPEAT.CONDITION_KEY=CONDITION.CONDITION_KEY
INNER JOIN METADATA_TEST ON METADATA_TEST.CONDITION_KEY = D_INVESTIGATION_REPEAT.CONDITION_KEY
WHERE METADATA_TEST.BLOCK_NM = D_INVESTIGATION_REPEAT.BLOCK_NM
AND METADATA_TEST.BLOCK_NM IN (SELECT BLOCK_NM FROM NBS_ODS.NBS_UI_METADATA WHERE QUESTION_IDENTIFIER IN ('VAC103', 'VAC120') and BLOCK_NM  IS NOT MISSING )
ORDER BY  PAGE_CASE_UID;
QUIT;

DATA VAC_REPEAT;
SET VAC_REPEAT;
REPEATCOUNTER = compress('A'|| answer_group_seq_nbr);
keep  VAC_VaccinationDate VAC_VaccineDoseNum PAGE_CASE_UID REPEATCOUNTER  D_INVESTIGATION_REPEAT_KEY INVESTIGATION_KEY BLOCK_NM;
run;

/*
proc sql;
CREATE TABLE VAC_REPEAT_INIT AS select * from VAC_REPEAT 
EXCEPT 
select * from VAC_REPEAT 
where VAC_VaccinationDate is null and compress(VAC_VaccineDoseNum) = '.'
ORDER BY  PAGE_CASE_UID;
quit;
*/
PROC TRANSPOSE 
	DATA=VAC_REPEAT OUT=VAC_REPEAT_OUT_DATE;
	BY PAGE_CASE_UID ; var VAC_VaccinationDate ;
	ID 	REPEATCOUNTER; 	
	copy D_INVESTIGATION_REPEAT_KEY INVESTIGATION_KEY ;	
RUN;
PROC SQL;
CREATE TABLE VAC_REPEAT_OUT_DATE 
	AS SELECT * FROM VAC_REPEAT_OUT_DATE 
	WHERE LENGTHN(_NAME_)>0 AND PAGE_CASE_UID>0;
QUIT;


DATA VAC_REPEAT_OUT_DATE;
SET VAC_REPEAT_OUT_DATE;


  VACC_RECVD_DT_1=(A1);
  VACC_RECVD_DT_2=(A2);
  VACC_RECVD_DT_3=(A3);
  VACC_RECVD_DT_4=(A4);

LENGTH VAC_GT_4_IND $2000;	
if missing(_5) then do; VAC_GT_4_IND="";
end;
else do; VAC_GT_4_IND= "TRUE";
end;
DROP _LABEL_; 
DROP _NAME_; 
keep PAGE_CASE_UID D_INVESTIGATION_REPEAT_KEY VACC_RECVD_DT_1 VACC_RECVD_DT_2 VACC_RECVD_DT_3 VACC_RECVD_DT_4 VAC_GT_4_IND INVESTIGATION_KEY ;
RUN;


PROC TRANSPOSE 
	DATA=VAC_REPEAT OUT=VAC_REPEAT_OUT_NUM;
	BY PAGE_CASE_UID ; var VAC_VaccineDoseNum ;
	ID 	REPEATCOUNTER; 
	copy D_INVESTIGATION_REPEAT_KEY;	
RUN;
PROC SQL;
CREATE TABLE VAC_REPEAT_OUT_NUM 
	AS SELECT * FROM VAC_REPEAT_OUT_NUM 
	WHERE LENGTHN(_NAME_)>0 AND PAGE_CASE_UID>0;
QUIT;
DATA VAC_REPEAT_OUT_NUM;
SET VAC_REPEAT_OUT_NUM;
VACC_DOSE_NBR_1= INPUT(A1, comma20.);
VACC_DOSE_NBR_2= INPUT(A2, comma20.);
VACC_DOSE_NBR_3= INPUT(A3, comma20.);
VACC_DOSE_NBR_4= INPUT(A4, comma20.);

LENGTH VAC_DOSE_4_IND $2000;	
if missing(_5) then do; VAC_DOSE_4_IND="";
end;
else do; VAC_DOSE_4_IND= "TRUE";
end;
if trim(lengthn(-LABEL_))>0  then output VAC_REPEAT_OUT_NUM;
DROP _LABEL_; 
DROP _NAME_; 
keep PAGE_CASE_UID D_INVESTIGATION_REPEAT_KEY VACC_DOSE_NBR_1 VACC_DOSE_NBR_2 VACC_DOSE_NBR_3 VACC_DOSE_NBR_4 VAC_DOSE_4_IND INVESTIGATION_KEY ;
RUN;

PROC SORT DATA=VAC_REPEAT_OUT_DATE OUT=VAC_REPEAT_OUT_DATE;
BY D_INVESTIGATION_REPEAT_KEY;

PROC SORT DATA=VAC_REPEAT_OUT_NUM OUT=VAC_REPEAT_OUT_NUM;
BY D_INVESTIGATION_REPEAT_KEY;

DATA VAC_REPEAT_OUT_FINAL;
MERGE  VAC_REPEAT_OUT_DATE(IN=in1) VAC_REPEAT_OUT_NUM(IN=in2);
BY D_INVESTIGATION_REPEAT_KEY;
RUN;

DATA VAC_REPEAT_OUT_FINAL;
set  VAC_REPEAT_OUT_FINAL;
LENGTH VACC_GT_4_IND $2000;	
; 
if trim(LENGTHN(VAC_DOSE_4_IND))>0 then do;
VACC_GT_4_IND="TRUE"; end;  
else if trim(LENGTHN(VAC_GT_4_IND))>0  then do;
VACC_GT_4_IND="TRUE"; end;
else do;
VACC_GT_4_IND="FALSE"; end;
drop VAC_DOSE_4_IND VAC_GT_4_IND;
run;
PROC SORT DATA=VAC_REPEAT_OUT_FINAL OUT=VAC_REPEAT_OUT_FINAL NODUPKEY;
BY INVESTIGATION_KEY;
RUN;
DATA HEPATITIS_CASE_BASE;
MERGE  INVESTIGATION D_PATIENT D_INV_VACCINATION D_INV_TRAVEL D_INV_RISK_FACTOR D_INV_MOTHER D_INV_MEDICAL_HISTORY D_INV_LAB_FINDING 
D_INV_EPIDEMIOLOGY D_INV_CLINICAL D_INV_ADMINISTRATIVE D_INV_PATIENT_OBS HEP_PAT_PROV VAC_REPEAT_OUT_FINAL; 
by INVESTIGATION_KEY;
run;
data HEPATITIS_CASE_BASE;
set HEPATITIS_CASE_BASE;
if trim(LENGTHN(VACC_GT_4_IND))<1 then do;
VACC_GT_4_IND="FALSE"; end;  
run;

proc sql;
DELETE from HEPATITIS_CASE_BASE where patient_uid is null;
quit;
DATA HEPATITIS_DBASE_WITH_EVENT_DATE;
REFRESH_DATETIME=datetime();
set HEPATITIS_CASE_BASE;
if ILLNESS_ONSET_DT ~= . then 
		EVENT_DATE = ILLNESS_ONSET_DT;
else if DIAGNOSIS_DT ~= . then 
		EVENT_DATE = DIAGNOSIS_DT;
if EVENT_DATE = . then
	do; 
		EVENT_DATE = FIRST_RPT_TO_CNTY_DT;
		if EVENT_DATE ~= . then
		    do; 
				if FIRST_RPT_TO_STATE_DT ~= . AND FIRST_RPT_TO_STATE_DT < EVENT_DATE then
				EVENT_DATE=FIRST_RPT_TO_STATE_DT;
			end;
		else EVENT_DATE = FIRST_RPT_TO_STATE_DT;

		if EVENT_DATE ~= . then
		    do; 
				if INV_RPT_DT ~= . AND INV_RPT_DT < EVENT_DATE then
				EVENT_DATE=INV_RPT_DT;
			end;
		else EVENT_DATE = INV_RPT_DT;

		if EVENT_DATE ~= . then
		    do; 
				if INV_START_DT ~= . AND INV_START_DT < EVENT_DATE then
				EVENT_DATE=INV_START_DT;
			end;
		else EVENT_DATE = INV_START_DT;

		if EVENT_DATE ~= . then
		    do; 
				if ALT_RESULT_DT ~= . AND ALT_RESULT_DT < EVENT_DATE then
				EVENT_DATE=ALT_RESULT_DT;
			end;
		else EVENT_DATE = ALT_RESULT_DT;

		if EVENT_DATE ~= . then
		    do; 
				if AST_RESULT_DT ~= . AND AST_RESULT_DT < EVENT_DATE then
				EVENT_DATE=AST_RESULT_DT;
			end;
		else EVENT_DATE = AST_RESULT_DT;

		if EVENT_DATE ~= . then
		    do; 
				if HSPTL_ADMISSION_DT ~= . AND HSPTL_ADMISSION_DT < EVENT_DATE then
				EVENT_DATE=HSPTL_ADMISSION_DT;
			end;
		else EVENT_DATE = HSPTL_ADMISSION_DT;

		if EVENT_DATE ~= . then
		    do; 
				if HSPTL_DISCHARGE_DT ~= . AND HSPTL_DISCHARGE_DT < EVENT_DATE then
				EVENT_DATE=HSPTL_DISCHARGE_DT;
			end;
		else EVENT_DATE = HSPTL_DISCHARGE_DT;

		if EVENT_DATE ~= . then
		    do; 
				if INV_ADD_TIME ~= . AND INV_ADD_TIME < EVENT_DATE then
				EVENT_DATE=INV_ADD_TIME;
			end;
		else EVENT_DATE = INV_ADD_TIME;

end;
run; 
%dbload (HEPATITIS_DATAMART, HEPATITIS_DBASE_WITH_EVENT_DATE);
PROC SQL;
UPDATE NBS_RDB.HEPATITIS_DATAMART SET 
REFRESH_DATETIME=DATETIME();
QUIT;

/*PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;
QUIT;*/ 

%mend HEPATITIS_DATAMART;
PROC SQL;
CREATE TABLE HEP_CHECKER_MASTER_LAST 
(COUNT_PB_HEP NUM);
INSERT INTO HEP_CHECKER_MASTER_LAST( COUNT_PB_HEP) VALUES 
(NULL);
UPDATE HEP_CHECKER_MASTER_LAST SET COUNT_PB_HEP = (
select count(*) from nbs_ods.NBS_ui_metadata where investigation_form_cd in (select investigation_form_cd from nbs_srt.Condition_code where
 CONDITION_CD in (
'10110','10104','10100','10106',
'10101','10102','10103','10105',
'10481', '50248',
'999999'))
); 
QUIT;

DATA _null_;
  set HEP_CHECKER_MASTER_LAST;
  if COUNT_PB_HEP>0  then call execute('%HEPATITIS_DATAMART');
RUN;


