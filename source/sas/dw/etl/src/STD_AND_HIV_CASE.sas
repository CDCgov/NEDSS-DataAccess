%macro assign_additional_key (ds, key);
 data &ds;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_key;
PROC SQL;
CREATE TABLE  
	STD_HIV_CASE_UIDS 
AS SELECT 
	PAGE_CASE_UID,
	INVESTIGATION_FORM_CD,
	CD,
	LAST_CHG_TIME
FROM 
	RDBDATA.PHC_UIDS
WHERE 
	CASE_MANAGEMENT_UID IS NOT NULL;
QUIT;
PROC SQL;
CREATE TABLE 
ORG 
AS SELECT 
	ORGANIZATION_UID,
	ORGANIZATION_KEY
FROM
	NBS_RDB.L_ORGANIZATION;

CREATE TABLE 
	PHYSICIAN 
AS SELECT 
	PROVIDER_UID,
	PROVIDER_KEY
FROM
	NBS_RDB.L_PROVIDER;
QUIT;
/*
PROC SQL;

CREATE TABLE 
	PLACE_INIT 
AS SELECT 
	ACT_UID,
	ANSWER_TXT 
FROM 
	NBS_ODS.NBS_CASE_ANSWER 
WHERE 
	NBS_QUESTION_UID 
	IN 
		(
			SELECT
				NBS_QUESTION_UID 
			FROM 
				NBS_ODS.NBS_QUESTION 
			WHERE 
				question_identifier 
			IN 
				('NBS243','NBS290')
		)
;
QUIT;
DATA PLACE_INIT;
  SET PLACE_INIT;
  PLACE=SCAN(ANSWER_TXT,1,'^');
  POSTAL=SCAN(ANSWER_TXT,2,'^');
  TELE=SCAN(ANSWER_TXT,3,'^');
  PLACE_UID= input(PLACE,12.); 
  POSTAL_UID= input(POSTAL,12.); 
  TELE_UID= input(TELE,12.); 
  DROP PLACE
  	   POSTAL
	   TELE;
RUN;
PROC SQL;
DROP TABLE 
	NBS_RDB.PLACE_KEYSTORE;
CREATE TABLE
	PLACE_KEYSTORE
AS SELECT 
	PLACE_INIT.*,
	INVESTIGATION.INVESTIGATION_KEY,
	L_PLACE.PLACE_KEY, 
	L_PLACE_POSTAL.PLACE_POSTAL_KEY,
	L_PLACE_TELE.PLACE_TELE_KEY
FROM
	PLACE_INIT
INNER JOIN
	NBS_RDB.INVESTIGATION
ON
	PLACE_INIT.ACT_UID=INVESTIGATION.CASE_UID
INNER JOIN
	NBS_RDB.L_PLACE
ON
	PLACE_INIT.PLACE_UID=L_PLACE.PLACE_UID
LEFT OUTER JOIN
	NBS_RDB.L_PLACE_POSTAL
ON
	PLACE_INIT.POSTAL_UID=L_PLACE_POSTAL.POSTAL_UID
LEFT OUTER JOIN
	NBS_RDB.L_PLACE_TELE
ON
	PLACE_INIT.TELE_UID=L_PLACE_TELE.TELE_LOCATOR_UID;
QUIT;
DATA PLACE_KEYSTORE;
SET PLACE_KEYSTORE;
DROP 
	PLACE_UID
	POSTAL_UID
	TELE_UID;
RUN;
%ASSIGN_ADDITIONAL_KEY (PLACE_KEYSTORE, INV_PLACE_KEY);
PROC SORT DATA=PLACE_KEYSTORE NODUPKEY; BY ACT_UID; RUN;
PROC SQL;
CREATE TABLE 
	NBS_RDB.PLACE_KEYSTORE 
AS SELECT 
	* 
FROM 
	PLACE_KEYSTORE;

PROC SQL;	
CREATE TABLE	
	DIMENSIONAL_KEY_STD
AS SELECT
	DIMENSIONAL_KEYS.*,PLACE_KEYSTORE.INV_PLACE_KEY
FROM
	RDBDATA.DIMENSIONAL_KEYS 
LEFT OUTER JOIN
	PLACE_KEYSTORE
ON
	DIMENSIONAL_KEYS.PAGE_CASE_UID=PLACE_KEYSTORE.ACT_UID;
QUIT;
*/
%include etlpgm (STD_HIV_CASE_ENTITY.sas);

PROC SORT DATA=F_S_STD_HIV_CASE; BY ACT_UID; RUN;


PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTORE_INIT AS
SELECT 
F_S_STD_HIV_CASE.CA_SupervisorOfPHC,
F_S_STD_HIV_CASE.Closure_Investgr_Of_PHC,
F_S_STD_HIV_CASE.Dispo_Fld_FupInvestgr_Of_PHC,
F_S_STD_HIV_CASE.Fld_Fup_Investgr_Of_PHC,
F_S_STD_HIV_CASE.Fld_Fup_Prov_Of_PHC,
F_S_STD_HIV_CASE.Fld_Fup_Supervisor_Of_PHC,
F_S_STD_HIV_CASE.Init_Fld_Fup_Investgr_Of_PHC,
F_S_STD_HIV_CASE.Init_Fup_Investgr_Of_PHC,
F_S_STD_HIV_CASE.Init_Interviewer_Of_PHC,
F_S_STD_HIV_CASE.Interviewer_Of_PHC,
F_S_STD_HIV_CASE.Surv_Investgr_Of_PHC,
F_S_STD_HIV_CASE.Fld_Fup_Facility_Of_PHC,
F_S_STD_HIV_CASE.HOSPITAL_UID,
F_S_STD_HIV_CASE.ORG_AS_REPORTER_UID,
	F_S_STD_HIV_CASE.ADD_TIME,F_S_STD_HIV_CASE.LAST_CHG_TIME, F_S_STD_HIV_CASE.PATIENT_UID, PATIENT.PATIENT_KEY AS PATIENT_KEY 'PATIENT_KEY',
	F_S_STD_HIV_CASE.ACT_UID AS PAGE_CASE_UID 'PAGE_CASE_UID', F_S_STD_HIV_CASE.HOSPITAL_UID, HOSPITAL.ORGANIZATION_KEY AS HOSPITAL_KEY 'HOSPITAL_KEY',
	F_S_STD_HIV_CASE.Org_As_Hospital_Of_Delivery, HOSPDELIVERY.ORGANIZATION_KEY AS DELIVERING_HOSP_KEY 'DELIVERING_HOSP_KEY',
	F_S_STD_HIV_CASE.Per_As_Provider_Of_Delivery, PROVDELIVERY.PROVIDER_KEY AS DELIVERING_MD_KEY 'DELIVERING_MD_KEY',
	F_S_STD_HIV_CASE.Per_As_Provider_Of_OBGYN, MOTHEROBGYN.PROVIDER_KEY AS MOTHER_OB_GYN_KEY 'MOTHER_OB_GYN_KEY',
	F_S_STD_HIV_CASE.Per_As_Provider_Of_Pediatrics, PEDIATRICIAN.PROVIDER_KEY AS PEDIATRICIAN_KEY 'PEDIATRICIAN_KEY',
	F_S_STD_HIV_CASE.ORG_AS_REPORTER_UID, REPORTERORG.ORGANIZATION_KEY AS ORG_AS_REPORTER_KEY 'ORG_AS_REPORTER_KEY',
	F_S_STD_HIV_CASE.ORDERING_FACILTY_UID, FACILITYORG.ORGANIZATION_KEY AS ORDERING_FACILITY_KEY 'ORDERING_FACILITY_KEY',
	F_S_STD_HIV_CASE.PERSON_AS_REPORTER_UID, PERSONREPORTER.PROVIDER_KEY AS PERSON_AS_REPORTER_KEY 'PERSON_AS_REPORTER_KEY',
	F_S_STD_HIV_CASE.PHYSICIAN_UID, PHYSICIAN.PROVIDER_KEY AS PHYSICIAN_KEY 'PHYSICIAN_KEY',
	F_S_STD_HIV_CASE.INVESTIGATOR_UID, PROVIDER.PROVIDER_KEY AS INVESTIGATOR_KEY 'INVESTIGATOR_KEY',

INVESTIGATION.INVESTIGATION_KEY, CONDITION.CONDITION_KEY,
	COALESCE(LOC.GEOCODING_LOCATION_KEY,1)	AS GEOCODING_LOCATION_KEY

FROM 
	F_S_STD_HIV_CASE LEFT OUTER JOIN NBS_RDB.D_PATIENT PATIENT	
ON 
	F_S_STD_HIV_CASE.PATIENT_UID= PATIENT.PATIENT_UID
	LEFT OUTER JOIN ORG  HOSPITAL
ON 
	F_S_STD_HIV_CASE.HOSPITAL_UID= HOSPITAL.ORGANIZATION_UID
	LEFT OUTER JOIN ORG  HOSPDELIVERY
ON 
	F_S_STD_HIV_CASE.Org_As_Hospital_Of_Delivery= HOSPDELIVERY.ORGANIZATION_UID
	LEFT OUTER JOIN ORG REPORTERORG	
ON 
	F_S_STD_HIV_CASE.ORG_AS_REPORTER_UID= REPORTERORG.ORGANIZATION_UID
	LEFT OUTER JOIN ORG FACILITYORG
ON 
	F_S_STD_HIV_CASE.ORDERING_FACILTY_UID= FACILITYORG.ORGANIZATION_UID
	LEFT OUTER JOIN PHYSICIAN PERSONREPORTER
ON 
	F_S_STD_HIV_CASE.PERSON_AS_REPORTER_UID= PERSONREPORTER.PROVIDER_UID
	LEFT OUTER JOIN PHYSICIAN PROVDELIVERY
ON 
	F_S_STD_HIV_CASE.Per_As_Provider_Of_Delivery= PROVDELIVERY.PROVIDER_UID
	
	LEFT OUTER JOIN PHYSICIAN MOTHEROBGYN
ON 
	F_S_STD_HIV_CASE.Per_As_Provider_Of_OBGYN= MOTHEROBGYN.PROVIDER_UID
	
	LEFT OUTER JOIN PHYSICIAN PEDIATRICIAN
ON 
	F_S_STD_HIV_CASE.Per_As_Provider_Of_Pediatrics= PEDIATRICIAN.PROVIDER_UID
	
	

	LEFT OUTER JOIN PHYSICIAN PROVIDER
ON 
	F_S_STD_HIV_CASE.INVESTIGATOR_UID= PROVIDER.PROVIDER_UID
	LEFT OUTER JOIN PHYSICIAN PHYSICIAN
ON 
	F_S_STD_HIV_CASE.PHYSICIAN_UID= PHYSICIAN.PROVIDER_UID
	LEFT OUTER JOIN NBS_RDB.INVESTIGATION  INVESTIGATION
ON 
	F_S_STD_HIV_CASE.PAGE_CASE_UID= INVESTIGATION.CASE_UID
	LEFT OUTER JOIN STD_HIV_CASE_UIDS  CASE_UID
ON 
	F_S_STD_HIV_CASE.PAGE_CASE_UID= CASE_UID.PAGE_CASE_UID
	LEFT OUTER JOIN NBS_RDB.CONDITION CONDITION
ON 
	STD_HIV_CASE_UIDS.CD= CONDITION.CONDITION_CD
	LEFT JOIN NBS_RDB.GEOCODING_LOCATION AS LOC
ON LOC.ENTITY_UID = PATIENT.PATIENT_UID;
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREA AS SELECT 
	ENTITY_KEYSTORE_INIT.*,
		ENTITY_KEYSTORE_INIT.Fld_Fup_Facility_Of_PHC, 
FACILITY.ORGANIZATION_KEY AS FACILITY_FLD_FOLLOW_UP_KEY 'FACILITY_FLD_FOLLOW_UP_KEY'
FROM 
	ENTITY_KEYSTORE_INIT
LEFT OUTER JOIN ORG  FACILITY
ON 
	ENTITY_KEYSTORE_INIT.Fld_Fup_Facility_Of_PHC= FACILITY.ORGANIZATION_UID;
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREb AS SELECT 
	ENTITY_KEYSTOREA.*,
	ENTITY_KEYSTOREA.CA_SupervisorOfPHC, CA.PROVIDER_KEY AS SUPRVSR_OF_CASE_ASSGNMENT_KEY 'SUPRVSR_OF_CASE_ASSGNMENT_KEY'
FROM 
	ENTITY_KEYSTOREA
	LEFT OUTER JOIN PHYSICIAN CA
ON 
	ENTITY_KEYSTOREa.CA_SupervisorOfPHC= CA.PROVIDER_UID;
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREC AS SELECT 
	ENTITY_KEYSTOREB.*,
	ENTITY_KEYSTOREB.Closure_Investgr_Of_PHC, CL.PROVIDER_KEY AS CLOSED_BY_KEY 'CLOSED_BY_KEY'
FROM 
	ENTITY_KEYSTOREb
	LEFT OUTER JOIN PHYSICIAN CL
ON 
	ENTITY_KEYSTOREb.Closure_Investgr_Of_PHC= CL.PROVIDER_UID;
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTORED AS SELECT 
	ENTITY_KEYSTOREC.*,
	ENTITY_KEYSTOREC.Dispo_Fld_FupInvestgr_Of_PHC, DISP.PROVIDER_KEY AS DISPOSITIONED_BY_KEY 'DISPOSITIONED_BY_KEY'
FROM 
	ENTITY_KEYSTOREC
LEFT OUTER JOIN PHYSICIAN DISP
ON 
	ENTITY_KEYSTOREC.Dispo_Fld_FupInvestgr_Of_PHC= DISP.PROVIDER_UID;
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREE AS SELECT 
	ENTITY_KEYSTORED.*,
	ENTITY_KEYSTORED.Fld_Fup_Investgr_Of_PHC, FLD_FUP_INVESTGTR.PROVIDER_KEY AS INVSTGTR_FLD_FOLLOW_UP_KEY 'INVSTGTR_FLD_FOLLOW_UP_KEY'
FROM 
	ENTITY_KEYSTORED
LEFT OUTER JOIN PHYSICIAN FLD_FUP_INVESTGTR
ON 
	ENTITY_KEYSTORED.Fld_Fup_Investgr_Of_PHC= FLD_FUP_INVESTGTR.PROVIDER_UID;
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREF AS SELECT 
	ENTITY_KEYSTOREE.*,
	ENTITY_KEYSTOREE.Fld_Fup_Prov_Of_PHC, PROVIDER_FLD_FUP.PROVIDER_KEY AS PROVIDER_FLD_FOLLOW_UP_KEY 'PROVIDER_FLD_FOLLOW_UP_KEY'
FROM 
	ENTITY_KEYSTOREE
LEFT OUTER JOIN PHYSICIAN PROVIDER_FLD_FUP
ON 
	ENTITY_KEYSTOREE.Fld_Fup_Prov_Of_PHC= PROVIDER_FLD_FUP.PROVIDER_UID;	
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREG AS SELECT 
	ENTITY_KEYSTOREF.*,
	ENTITY_KEYSTOREF.Fld_Fup_Supervisor_Of_PHC, SUPRVSR_FLD_FUP.PROVIDER_KEY AS SUPRVSR_OF_FLD_FOLLOW_UP_KEY 'SUPRVSR_OF_FLD_FOLLOW_UP_KEY'
FROM 
	ENTITY_KEYSTOREF
LEFT OUTER JOIN PHYSICIAN SUPRVSR_FLD_FUP
ON 
	ENTITY_KEYSTOREF.Fld_Fup_Supervisor_Of_PHC= SUPRVSR_FLD_FUP.PROVIDER_UID;	
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREH AS SELECT 
	ENTITY_KEYSTOREG.*,
	ENTITY_KEYSTOREG.Init_Fld_Fup_Investgr_Of_PHC, INIT_FLD_FUP.PROVIDER_KEY AS  INIT_ASGNED_FLD_FOLLOW_UP_KEY 'INIT_ASGNED_FLD_FOLLOW_UP_KEY'
FROM 
	ENTITY_KEYSTOREG
LEFT OUTER JOIN PHYSICIAN INIT_FLD_FUP

ON 
	ENTITY_KEYSTOREG.Init_Fld_Fup_Investgr_Of_PHC= INIT_FLD_FUP.PROVIDER_UID;	
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREI AS SELECT 
	ENTITY_KEYSTOREH.*,
	ENTITY_KEYSTOREH.Init_Fup_Investgr_Of_PHC, INIT_INVSTGR_PHC.PROVIDER_KEY AS INIT_FOLLOW_UP_INVSTGTR_KEY 'INIT_FOLLOW_UP_INVSTGTR_KEY'
FROM 
	ENTITY_KEYSTOREH
LEFT OUTER JOIN PHYSICIAN INIT_INVSTGR_PHC
ON 
	ENTITY_KEYSTOREH.Init_Fup_Investgr_Of_PHC= INIT_INVSTGR_PHC.PROVIDER_UID;	
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREJ AS SELECT 
	ENTITY_KEYSTOREI.*,
	ENTITY_KEYSTOREI.Init_Interviewer_Of_PHC, INIT_INTERVIEWER.PROVIDER_KEY AS INIT_ASGNED_INTERVIEWER_KEY 'INIT_ASGNED_INTERVIEWER_KEY'
FROM 
	ENTITY_KEYSTOREI
LEFT OUTER JOIN PHYSICIAN INIT_INTERVIEWER
ON  
	ENTITY_KEYSTOREI.Init_Interviewer_Of_PHC= INIT_INTERVIEWER.PROVIDER_UID;	
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTOREK AS SELECT 
	ENTITY_KEYSTOREJ.*,
	ENTITY_KEYSTOREJ.Interviewer_Of_PHC, INTERVIEWER.PROVIDER_KEY AS INTERVIEWER_ASSIGNED_KEY 'INTERVIEWER_ASSIGNED_KEY'
FROM 
	ENTITY_KEYSTOREJ
LEFT OUTER JOIN PHYSICIAN INTERVIEWER
ON 
	ENTITY_KEYSTOREJ.Interviewer_Of_PHC= INTERVIEWER.PROVIDER_UID;	
QUIT;
PROC SQL;
CREATE TABLE 
	ENTITY_KEYSTORE AS SELECT 
	ENTITY_KEYSTOREK.*,
	ENTITY_KEYSTOREK.Surv_Investgr_Of_PHC, SURV.PROVIDER_KEY AS SURVEILLANCE_INVESTIGATOR_KEY 'SURVEILLANCE_INVESTIGATOR_KEY'
FROM 
	ENTITY_KEYSTOREK
LEFT OUTER JOIN PHYSICIAN SURV
ON 
	ENTITY_KEYSTOREK.Surv_Investgr_Of_PHC= SURV.PROVIDER_UID;
QUIT;
DATA ENTITY_KEYSTORE;
SET ENTITY_KEYSTORE;
	IF HOSPITAL_KEY =. THEN HOSPITAL_KEY=1;
	IF ORG_AS_REPORTER_KEY =. THEN ORG_AS_REPORTER_KEY=1;
	IF PERSON_AS_REPORTER_KEY =. THEN PERSON_AS_REPORTER_KEY=1;
	IF PHYSICIAN_KEY =. THEN PHYSICIAN_KEY=1;
	IF INVESTIGATOR_KEY =. THEN INVESTIGATOR_KEY=1;
	IF INV_ADMINISTRATIVE_KEY  =. THEN INV_ADMINISTRATIVE_KEY=1;
	IF INV_CLINICAL_KEY  =. THEN INV_CLINICAL_KEY=1;
	IF INV_COMPLICATION_KEY =. THEN INV_COMPLICATION_KEY=1;
	IF INV_CONTACT_KEY =. THEN INV_CONTACT_KEY=1;
	IF INV_DEATH_KEY =. THEN INV_DEATH_KEY=1;
	IF INV_EPIDEMIOLOGY_KEY =. THEN INV_EPIDEMIOLOGY_KEY=1;
	IF INV_HIV_KEY =. THEN INV_HIV_KEY=1;
	IF INV_PATIENT_OBS_KEY =. THEN INV_PATIENT_OBS_KEY=1;
	IF INV_ISOLATE_TRACKING_KEY =. THEN INV_ISOLATE_TRACKING_KEY=1;
	IF INV_LAB_FINDING_KEY =. THEN INV_LAB_FINDING_KEY=1;
	IF INV_MEDICAL_HISTORY_KEY =. THEN INV_MEDICAL_HISTORY_KEY=1;
	IF INV_MOTHER_KEY =. THEN INV_MOTHER_KEY=1;
	IF INV_OTHER_KEY =. THEN INV_OTHER_KEY=1;
	IF INV_PREGNANCY_BIRTH_KEY =. THEN INV_PREGNANCY_BIRTH_KEY=1;
	IF INV_RESIDENCY_KEY =. THEN INV_RESIDENCY_KEY=1;
	IF INV_RISK_FACTOR_KEY =. THEN INV_RISK_FACTOR_KEY=1;
	IF INV_SOCIAL_HISTORY_KEY =. THEN INV_SOCIAL_HISTORY_KEY=1;
	IF INV_SYMPTOM_KEY =. THEN INV_SYMPTOM_KEY=1;
	IF INV_TREATMENT_KEY =. THEN INV_TREATMENT_KEY=1;
	IF INV_TRAVEL_KEY =. THEN INV_TRAVEL_KEY=1;
	IF INV_UNDER_CONDITION_KEY =. THEN INV_UNDER_CONDITION_KEY=1;
	IF INV_VACCINATION_KEY =. THEN INV_VACCINATION_KEY=1;
	IF CLOSED_BY_KEY=. THEN CLOSED_BY_KEY=1;
	IF DISPOSITIONED_BY_KEY=. THEN DISPOSITIONED_BY_KEY=1;
	IF FACILITY_FLD_FOLLOW_UP_KEY=. THEN FACILITY_FLD_FOLLOW_UP_KEY=1;
	IF INVSTGTR_FLD_FOLLOW_UP_KEY=. THEN INVSTGTR_FLD_FOLLOW_UP_KEY=1;
	IF PROVIDER_FLD_FOLLOW_UP_KEY=. THEN PROVIDER_FLD_FOLLOW_UP_KEY=1;
	IF SUPRVSR_OF_FLD_FOLLOW_UP_KEY=. THEN SUPRVSR_OF_FLD_FOLLOW_UP_KEY=1;
	IF INIT_ASGNED_FLD_FOLLOW_UP_KEY=. THEN INIT_ASGNED_FLD_FOLLOW_UP_KEY=1;
	IF INIT_FOLLOW_UP_INVSTGTR_KEY=. THEN INIT_FOLLOW_UP_INVSTGTR_KEY=1;
	IF INIT_ASGNED_INTERVIEWER_KEY=. THEN INIT_ASGNED_INTERVIEWER_KEY=1;
	IF INTERVIEWER_ASSIGNED_KEY=. THEN INTERVIEWER_ASSIGNED_KEY=1;
	IF SURVEILLANCE_INVESTIGATOR_KEY=. THEN SURVEILLANCE_INVESTIGATOR_KEY=1;
	IF SUPRVSR_OF_CASE_ASSGNMENT_KEY=. THEN SUPRVSR_OF_CASE_ASSGNMENT_KEY=1;
	IF ORDERING_FACILITY_KEY=. THEN ORDERING_FACILITY_KEY=1;
	IF DELIVERING_HOSP_KEY=. THEN DELIVERING_HOSP_KEY=1;
	IF DELIVERING_MD_KEY=. THEN DELIVERING_MD_KEY=1;
	IF MOTHER_OB_GYN_KEY=. THEN MOTHER_OB_GYN_KEY=1;
	IF PEDIATRICIAN_KEY=. THEN PEDIATRICIAN_KEY=1;
RUN;
 PROC SORT DATA=ENTITY_KEYSTORE NODUPKEY; BY PAGE_CASE_UID; RUN;
PROC SQL;
DROP TABLE nbs_rdb.F_STD_PAGE_CASE;
CREATE TABLE 
	F_STD_PAGE_CASE AS 
SELECT     
	DIMENSIONAL_KEYS.*, 
	ENTITY_KEYSTORE.CONDITION_KEY,
	ENTITY_KEYSTORE.INVESTIGATION_KEY,
	ENTITY_KEYSTORE.PHYSICIAN_KEY,
	ENTITY_KEYSTORE.INVESTIGATOR_KEY,
	ENTITY_KEYSTORE.HOSPITAL_KEY,
	ENTITY_KEYSTORE.PATIENT_KEY,
	ENTITY_KEYSTORE.PERSON_AS_REPORTER_KEY AS PERSON_AS_REPORTER_KEY,
	ENTITY_KEYSTORE.ORG_AS_REPORTER_KEY AS ORG_AS_REPORTER_KEY,
	ENTITY_KEYSTORE.ORDERING_FACILITY_KEY AS ORDERING_FACILITY_KEY,
	ENTITY_KEYSTORE.HOSPITAL_KEY AS HOSPITAL_KEY,
	ENTITY_KEYSTORE.GEOCODING_LOCATION_KEY,
	CLOSED_BY_KEY, 
	DISPOSITIONED_BY_KEY,
	FACILITY_FLD_FOLLOW_UP_KEY,
	INVSTGTR_FLD_FOLLOW_UP_KEY,
	PROVIDER_FLD_FOLLOW_UP_KEY,
	PROVIDER_FLD_FOLLOW_UP_KEY,
	SUPRVSR_OF_FLD_FOLLOW_UP_KEY,
	INIT_ASGNED_FLD_FOLLOW_UP_KEY,
	INIT_FOLLOW_UP_INVSTGTR_KEY,
	INIT_ASGNED_INTERVIEWER_KEY,
	INTERVIEWER_ASSIGNED_KEY,
	SURVEILLANCE_INVESTIGATOR_KEY,
	SUPRVSR_OF_CASE_ASSGNMENT_KEY,
	 DELIVERING_HOSP_KEY,
	DELIVERING_MD_KEY,
	MOTHER_OB_GYN_KEY,
	PEDIATRICIAN_KEY,
	DATE.DATE_KEY AS ADD_DATE_KEY, DATE2.DATE_KEY AS LAST_CHG_DATE_KEY
FROM   
	RDBDATA.DIMENSIONAL_KEYS INNER JOIN ENTITY_KEYSTORE AS KEYSTORE 
ON DIMENSIONAL_KEYS.PAGE_CASE_UID = KEYSTORE.PAGE_CASE_UID 
LEFT OUTER JOIN NBS_RDB.RDB_DATE DATE 	
ON DATEPART(DATE.DATE_MM_DD_YYYY)=DATEPART(KEYSTORE.ADD_TIME)
LEFT OUTER JOIN NBS_RDB.RDB_DATE DATE2 
ON DATEPART(DATE2.DATE_MM_DD_YYYY)=DATEPART(KEYSTORE.LAST_CHG_TIME);
QUIT;
DATA F_STD_PAGE_CASE;
SET F_STD_PAGE_CASE;
IF D_INVESTIGATION_REPEAT_KEY= . THEN D_INVESTIGATION_REPEAT_KEY=1;
IF D_INV_PLACE_REPEAT_KEY=. THEN D_INV_PLACE_REPEAT_KEY=1;
DROP PAGE_CASE_UID;
RUN;
PROC SORT DATA=F_STD_PAGE_CASE NODUPKEY; BY PATIENT_KEY; RUN;
%DBLOAD (F_STD_PAGE_CASE, F_STD_PAGE_CASE);

