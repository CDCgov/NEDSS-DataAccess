PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;
QUIT; 
  %MACRO DBLOAD (DBTABLE, DSNAME);
 PROC APPEND FORCE BASE=NBS_RDB.&DBTABLE DATA=&DSNAME;
 RUN;
 QUIT;
%MEND DBLOAD;

%MACRO ASSIGN_ADDITIONAL_KEY (DS, KEY);
 DATA &DS;
  IF &KEY=1 THEN OUTPUT;
  SET &DS;
	&KEY+1;
	OUTPUT;
 RUN;
%MEND ASSIGN_ADDITIONAL_KEY;
DATA ACTIVITY_LOG_MASTER_LAST;
SET RDBDATA.ACTIVITY_LOG_MASTER_LAST;
	ODSE_COUNT=0;
	RDB_COUNT=0;
RUN;
PROC SQL;
	UPDATE ACTIVITY_LOG_MASTER_LAST SET ODSE_COUNT = (SELECT COUNT(*) FROM nbs_ods.Interview);
	UPDATE ACTIVITY_LOG_MASTER_LAST SET RDB_COUNT = (SELECT COUNT(*) FROM nbs_rdb.D_INTERVIEW where D_INTERVIEW_KEY>1);
QUIT;
DATA ACTIVITY_LOG_MASTER_LAST;
SET ACTIVITY_LOG_MASTER_LAST;;
IF ODSE_COUNT>RDB_COUNT THEN START_DATE = '01JUN1900'D;
RUN;

%MACRO INTERVIEW;
DATA ACTIVITY_LOG_DETAIL;
SET RDBDATA.ACTIVITY_LOG_DETAIL;
RUN;

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME(),
ACTIVITY_LOG_MASTER_UID= ((SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM NBS_RDB.ACTIVITY_LOG_MASTER));
QUIT;

PROC SQL;
CREATE TABLE  
	S_INTERVIEW_UIDS AS  
SELECT 
	INTERVIEW_UID LENGTH =8 AS INTERVIEW_UID 'INTERVIEW_UID', LAST_CHG_TIME FROM NBS_ODS.INTERVIEW
WHERE INTERVIEW.LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER_LAST.START_DATE) FROM  ACTIVITY_LOG_MASTER_LAST);
QUIT;

PROC SQL;
CREATE TABLE 
	INTERVIEW_INIT AS SELECT S_INTERVIEW_UIDS.INTERVIEW_UID,
	INTERVIEW_STATUS_CD AS IX_STATUS_CD 'IX_STATUS_CD',INTERVIEW_DATE AS IX_DATE 'IX_DATE',INTERVIEWEE_ROLE_CD AS IX_INTERVIEWEE_ROLE_CD 'IX_INTERVIEWEE_ROLE_CD',
	INTERVIEW_TYPE_CD AS IX_TYPE_CD 'IX_TYPE_CD',INTERVIEW_LOC_CD AS IX_LOCATION_CD 'IX_LOCATION_CD',LOCAL_ID as LOCAL_ID 'LOCAL_ID',
	RECORD_STATUS_CD as RECORD_STATUS_CD 'RECORD_STATUS_CD',RECORD_STATUS_TIME as RECORD_STATUS_TIME 'RECORD_STATUS_TIME',
	ADD_TIME as ADD_TIME 'ADD_TIME',ADD_USER_ID as ADD_USER_ID 'ADD_USER_ID', INTERVIEW.LAST_CHG_TIME as LAST_CHG_TIME 'LAST_CHG_TIME',
	LAST_CHG_USER_ID as LAST_CHG_USER_ID 'LAST_CHG_USER_ID',VERSION_CTRL_NBR as VERSION_CTRL_NBR 'VERSION_CTRL_NBR'
	FROM S_INTERVIEW_UIDS inner join NBS_ODS.INTERVIEW ON
	INTERVIEW.INTERVIEW_UID =S_INTERVIEW_UIDS.INTERVIEW_UID;
QUIT;

OPTIONS FMTSEARCH=(NBSFMT);
  
DATA INTERVIEW_INIT;
SET INTERVIEW_INIT;
	IX_STATUS		= PUT(IX_STATUS_CD, $ISTATUS.);
	IX_INTERVIEWEE_ROLE= PUT(IX_INTERVIEWEE_ROLE_CD, $IROLE.);
	IX_TYPE= PUT(IX_TYPE_CD, $ITYPE.);
	IX_LOCATION= PUT(IX_LOCATION_CD, $ILOC.);
RUN;


%PROCESS_INCR_STAGING_DATA(NBS_ANSWER, 'D_INTERVIEW',S_INTERVIEW_UIDS, INTERVIEW_UID, 'NBS_ANSWER.ANSWER_TXT', ACT_UID,NBS_ANSWER_UID);

/*TESTED*/
PROC SQL;
CREATE TABLE 
	S_INTERVIEW AS 
SELECT * 
FROM 
	INTERVIEW_INIT
	LEFT OUTER JOIN NUMERIC_DATA_OUT
ON 
	NUMERIC_DATA_OUT.INTERVIEW_UID=INTERVIEW_INIT.INTERVIEW_UID
	LEFT OUTER  JOIN DATE_DATA_OUT 
ON 
	DATE_DATA_OUT.INTERVIEW_UID=INTERVIEW_INIT.INTERVIEW_UID
	LEFT OUTER  JOIN CODED_DATA_OUT
ON 
	CODED_DATA_OUT.INTERVIEW_UID=INTERVIEW_INIT.INTERVIEW_UID
	LEFT OUTER  JOIN TEXT_DATA_OUT 
ON 
	TEXT_DATA_OUT.INTERVIEW_UID=INTERVIEW_INIT.INTERVIEW_UID;
QUIT;

DATA S_INTERVIEW;
SET S_INTERVIEW(DROP=_NAME_ _LABEL_);
RUN;

%INCREMENTAL(L_INTERVIEW_N,L_INTERVIEW,L_INTERVIEW_E, S_INTERVIEW, 'S_INTERVIEW',INTERVIEW_UID,D_INTERVIEW_KEY);

%PAGE_DYNAMIC_LOOKUP(S_INTERVIEW,D_INTERVIEW_N, L_INTERVIEW_N,L_INTERVIEW_E, D_INTERVIEW,'D_INTERVIEW', D_INTERVIEW_KEY, INTERVIEW_UID);


PROC SQL;
CREATE TABLE S_INTERVIEW_NOTE AS
SELECT DISTINCT NBS_ANSWER.ANSWER_TXT, NBS_ANSWER.NBS_ANSWER_UID, NBS_ANSWER.ACT_UID AS ACT_UID 'ACT_UID' FROM NBS_ODS.NBS_ANSWER INNER JOIN
NBS_ODS.NBS_UI_METADATA ON 
NBS_ANSWER.NBS_QUESTION_UID=NBS_UI_METADATA.NBS_QUESTION_UID
AND NBS_UI_METADATA.QUESTION_IDENTIFIER='IXS111' 
WHERE NBS_ANSWER.LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER_LAST.START_DATE) FROM  ACTIVITY_LOG_MASTER_LAST)
ORDER BY NBS_ANSWER_UID;
QUIT;

DATA S_INTERVIEW_NOTE;
  SET S_INTERVIEW_NOTE;
  USER=SCAN(ANSWER_TXT,1,'~');
  USER_FIRST_NAME=SCAN(USER,1,' ');
  USER_LAST_NAME=SCAN(USER,2,' ');
  DATE=SCAN(ANSWER_TXT,2,'~');
  USER_COMMENT=SCAN(ANSWER_TXT,3,'~~');
  COMMENT_DATE= INPUT(DATE, ANYDTDTM32.);   
RUN;



%DBLOAD (S_INTERVIEW_NOTE, S_INTERVIEW_NOTE);

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_INTERVIEW_NOTE),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.S_INTERVIEW_NOTE),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=(SELECT COUNT(*) FROM S_INTERVIEW_NOTE),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM NBS_RDB.L_INTERVIEW_NOTE WHERE D_INTERVIEW_KEY IN (select D_INTERVIEW_KEY FROM DIM_E)),
PROCESS_UID= (SELECT PROCESS_UID FROM NBS_RDB.ETL_PROCESS WHERE PROCESS_NAME='S_INTERVIEW_NOTE');
QUIT;

DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID=. THEN ACTIVITY_LOG_DETAIL_UID=1;
IF ROW_COUNT_UPDATE<0 THEN ROW_COUNT_UPDATE=0;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN S_INTERVIEW_NOTE TABLE.'||
' THERE IS(ARE) NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOAL NUMBER OF RECORD(S) IN THE S_INTERVIEW_NOTE TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);

PROC SQL;

	DELETE FROM NBS_RDB.D_INTERVIEW_NOTE WHERE D_INTERVIEW_KEY IN (select D_INTERVIEW_KEY FROM DIM_E);
QUIT;
 
PROC SQL;
	DELETE FROM NBS_RDB.L_INTERVIEW_NOTE WHERE D_INTERVIEW_KEY IN (select D_INTERVIEW_KEY FROM DIM_E);
QUIT;


PROC SQL;
CREATE TABLE L_INTERVIEW_NOTE_N AS SELECT S_INTERVIEW_NOTE.NBS_ANSWER_UID, L_INTERVIEW.D_INTERVIEW_KEY FROM S_INTERVIEW_NOTE 
INNER JOIN NBS_RDB.L_INTERVIEW ON
L_INTERVIEW.INTERVIEW_UID = S_INTERVIEW_NOTE.ACT_UID
WHERE NBS_ANSWER_UID 
NOT IN (SELECT NBS_ANSWER_UID FROM NBS_RDB.L_INTERVIEW_NOTE) ORDER BY S_INTERVIEW_NOTE.NBS_ANSWER_UID;
ALTER TABLE L_INTERVIEW_NOTE_N ADD D_INTERVIEW_NOTE_MAX_VAL  NUMERIC;
UPDATE L_INTERVIEW_NOTE_N SET D_INTERVIEW_NOTE_MAX_VAL=(SELECT MAX(D_INTERVIEW_NOTE_KEY) FROM NBS_RDB.L_INTERVIEW_NOTE);

QUIT;

%ASSIGN_ADDITIONAL_KEY (L_INTERVIEW_NOTE_N, D_INTERVIEW_NOTE_KEY);
PROC SORT DATA=L_INTERVIEW_NOTE_N NODUPKEY; BY D_INTERVIEW_NOTE_KEY; RUN;
DATA L_INTERVIEW_NOTE_N;
SET L_INTERVIEW_NOTE_N;
IF D_INTERVIEW_NOTE_MAX_VAL  ~=. THEN D_INTERVIEW_NOTE_KEY= D_INTERVIEW_NOTE_KEY+D_INTERVIEW_NOTE_MAX_VAL;
IF D_INTERVIEW_NOTE_MAX_VAL  =. THEN D_INTERVIEW_NOTE_KEY= D_INTERVIEW_NOTE_KEY+1;
DROP D_INTERVIEW_NOTE_MAX_VAL;
RUN;

PROC SORT DATA=L_INTERVIEW_NOTE_N OUT=L_INTERVIEW_NOTE_N NODUPKEY;
BY NBS_ANSWER_UID;
RUN;
%DBLOAD (L_INTERVIEW_NOTE, L_INTERVIEW_NOTE_N);

/*PROC SORT DATA=S_INTERVIEW_NOTE; BY NBS_ANSWER_UID; RUN;*/

DATA D_INTERVIEW_NOTE_N; 
  MERGE L_INTERVIEW_NOTE_N S_INTERVIEW_NOTE; 
  BY NBS_ANSWER_UID; 
RUN;




%DBLOAD (D_INTERVIEW_NOTE, D_INTERVIEW_NOTE_N);

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.S_INTERVIEW_NOTE),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.D_INTERVIEW_NOTE),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=(SELECT COUNT(*) FROM S_INTERVIEW_NOTE),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM DIM_E),
PROCESS_UID= (SELECT PROCESS_UID FROM NBS_RDB.ETL_PROCESS WHERE PROCESS_NAME='D_INTERVIEW_NOTE');
QUIT;

DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID=. THEN ACTIVITY_LOG_DETAIL_UID=1;
IF ROW_COUNT_UPDATE<0 THEN ROW_COUNT_UPDATE=0;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN D_INTERVIEW_NOTE TABLE.'||
' THERE IS(ARE) NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOAL NUMBER OF RECORD(S) IN THE D_INTERVIEW_NOTE TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);



PROC SQL;
CREATE TABLE D_INTERVIEW
 	as SELECT D_INTERVIEW_N.D_INTERVIEW_KEY, D_INTERVIEW_N.IX_INTERVIEWEE_ROLE_CD FROM D_INTERVIEW_N union 
 	SELECT  DIM_E.D_INTERVIEW_KEY,DIM_E.IX_INTERVIEWEE_ROLE_CD  FROM DIM_E;
QUIT;


PROC SQL;

CREATE TABLE 
	INTERVIEW_PHC_COLL 
AS SELECT 
	TARGET_ACT_UID AS PHC_UID 'PHC_UID', 
	D_INTERVIEW_KEY
FROM 
	NBS_ODS.ACT_RELATIONSHIP 
INNER JOIN 
		L_INTERVIEW_N
ON
	ACT_RELATIONSHIP.SOURCE_ACT_UID =L_INTERVIEW_N.INTERVIEW_UID 
WHERE  
	TYPE_CD='IXS'
/*UNION SELECT 
	TARGET_ACT_UID AS PHC_UID 'PHC_UID', 
	D_INTERVIEW_KEY
FROM 
	NBS_ODS.ACT_RELATIONSHIP 
INNER JOIN 
		L_INTERVIEW
ON
	ACT_RELATIONSHIP.SOURCE_ACT_UID =L_INTERVIEW.INTERVIEW_UID 
WHERE  
	TYPE_CD='IXS'*/;

CREATE TABLE 
	PHC_INVESTIGATION_KEY 
AS SELECT 
	INTERVIEW_PHC_COLL.*, 
	INVESTIGATION_KEY
FROM 
	INTERVIEW_PHC_COLL
INNER JOIN 
	NBS_RDB.INVESTIGATION
ON
 	INTERVIEW_PHC_COLL.PHC_UID= INVESTIGATION.CASE_UID;
QUIT; 
PROC SORT DATA=PHC_INVESTIGATION_KEY; BY D_INTERVIEW_KEY; RUN;


  
PROC SQL;
CREATE TABLE PARTICIPATION AS SELECT D_INTERVIEW.D_INTERVIEW_KEY,L_INTERVIEW_N.INTERVIEW_UID,D_INTERVIEW.IX_INTERVIEWEE_ROLE_CD,NBS_ACT_ENTITY.TYPE_CD, NBS_ACT_ENTITY.ENTITY_UID 
FROM D_INTERVIEW 
LEFT OUTER JOIN
L_INTERVIEW_N ON
D_INTERVIEW.D_INTERVIEW_KEY= L_INTERVIEW_N.D_INTERVIEW_KEY
LEFT OUTER JOIN 
NBS_ODS.NBS_ACT_ENTITY ON
L_INTERVIEW_N.INTERVIEW_UID=NBS_ACT_ENTITY.ACT_UID;
QUIT;

PROC SQL;
CREATE TABLE PARTICIPATION2 AS SELECT D_INTERVIEW_KEY, PATIENT_KEY, PARTICIPATION.INTERVIEW_UID FROM PARTICIPATION INNER JOIN
NBS_RDB.L_PATIENT ON
L_PATIENT.PATIENT_UID=PARTICIPATION.ENTITY_UID;
QUIT;

PROC SQL;
CREATE TABLE PARTICIPATION3 AS SELECT D_INTERVIEW_KEY, PROVIDER_KEY AS IX_INTERVIEWER_KEY 'IX_INTERVIEWER_KEY', PARTICIPATION.INTERVIEW_UID  FROM 
PARTICIPATION INNER JOIN
NBS_RDB.L_PROVIDER
ON PARTICIPATION.ENTITY_UID=L_PROVIDER.PROVIDER_UID;
QUIT;

PROC SQL;
CREATE TABLE PARTICIPATION4 AS SELECT D_INTERVIEW_KEY, ORGANIZATION_KEY AS INTERVENTION_SITE_KEY 'INTERVENTION_SITE_KEY', PARTICIPATION.INTERVIEW_UID  FROM 
PARTICIPATION INNER JOIN
NBS_RDB.L_ORGANIZATION
ON PARTICIPATION.ENTITY_UID=L_ORGANIZATION.ORGANIZATION_UID;
QUIT;

PROC SORT DATA=PARTICIPATION NODUPKEY; BY D_INTERVIEW_KEY; RUN;
PROC SQL;

CREATE TABLE INTERVIEW_CASE_INIT AS SELECT PARTICIPATION.D_INTERVIEW_KEY, PARTICIPATION.IX_INTERVIEWEE_ROLE_CD, PARTICIPATION2.PATIENT_KEY, PARTICIPATION3.IX_INTERVIEWER_KEY, PARTICIPATION4.INTERVENTION_SITE_KEY, PARTICIPATION.INTERVIEW_UID 

FROM PARTICIPATION LEFT OUTER JOIN PARTICIPATION2 ON
PARTICIPATION.D_INTERVIEW_KEY = PARTICIPATION2.D_INTERVIEW_KEY

LEFT OUTER JOIN PARTICIPATION3 ON
PARTICIPATION2.D_INTERVIEW_KEY = PARTICIPATION3.D_INTERVIEW_KEY

LEFT OUTER JOIN PARTICIPATION4 ON
PARTICIPATION3.D_INTERVIEW_KEY = PARTICIPATION4.D_INTERVIEW_KEY;
QUIT;
PROC SORT DATA=INTERVIEW_CASE_INIT; BY D_INTERVIEW_KEY; RUN;

DATA INTERVIEW_CASE;
   MERGE INTERVIEW_CASE_INIT PHC_INVESTIGATION_KEY;
   BY D_INTERVIEW_KEY;
RUN;

PROC SQL;
DROP TABLE PARTICIPATION;
DROP TABLE PARTICIPATION2;
DROP TABLE PARTICIPATION3;
DROP TABLE PARTICIPATION4;
DROP TABLE INTERVIEW_CASE_INIT;

QUIT;

DATA INTERVIEW_CASE;
SET INTERVIEW_CASE;
LENGTH  INTERPRETER_KEY 8;
LENGTH  NURSE_KEY 8;
LENGTH  PHYSICIAN_KEY 8;
LENGTH  PROXY_KEY 8;
LENGTH  IX_INTERVIEWEE_KEY 8;
NURSE_KEY=1;
PHYSICIAN_KEY=1;
PROXY_KEY=1;
IX_INTERVIEWEE_KEY=1;
INTERPRETER_KEY=1;
IF IX_INTERVIEWEE_ROLE_CD='INTERP' THEN INTERPRETER_KEY = IX_INTERVIEWER_KEY;
ELSE IF IX_INTERVIEWEE_ROLE_CD='PHYS' THEN PHYSICIAN_KEY = IX_INTERVIEWER_KEY;
ELSE IF IX_INTERVIEWEE_ROLE_CD='NURSE' THEN NURSE_KEY = IX_INTERVIEWER_KEY;
ELSE IF IX_INTERVIEWEE_ROLE_CD='PROXY' THEN PROXY_KEY = IX_INTERVIEWER_KEY;
ELSE IF IX_INTERVIEWEE_ROLE_CD='SUBJECT' THEN IX_INTERVIEWEE_KEY = PATIENT_KEY;
RUN;

DATA INTERVIEW_CASE;
SET INTERVIEW_CASE;
DROP 
	INTERVIEW_UID PHC_UID IX_INTERVIEWEE_ROLE_CD
	TYPE_CD INTERVIEW_UID ENTITY_UID
	 PATIENT_UID;

IF (IX_INTERVIEWER_KEY=.) THEN IX_INTERVIEWER_KEY=1;
IF(IX_INTERVIEWEE_KEY=.) THEN IX_INTERVIEWEE_KEY=1;
IF (INTERVENTION_SITE_KEY=.) THEN INTERVENTION_SITE_KEY = 1;
RUN;

PROC SQL;
CREATE TABLE F_INTERVIEW_CASE_N AS 
SELECT INTERVIEW_CASE.* FROM INTERVIEW_CASE INNER JOIN L_INTERVIEW_N 
ON INTERVIEW_CASE.D_INTERVIEW_KEY = L_INTERVIEW_N.D_INTERVIEW_KEY;
QUIT;

PROC SQL;
DELETE FROM INTERVIEW_CASE WHERE D_INTERVIEW_KEY IN (SELECT D_INTERVIEW_KEY FROM DIM_E);
QUIT;

%DBLOAD (F_INTERVIEW_CASE, F_INTERVIEW_CASE_N);

QUIT;
%MEND;



PROC SQL;
CREATE TABLE DATA_CHECKER_MASTER_LAST 
(COUNT NUM);
INSERT INTO DATA_CHECKER_MASTER_LAST( COUNT) VALUES 
(NULL);
UPDATE DATA_CHECKER_MASTER_LAST SET COUNT= (SELECT COUNT(*) FROM NBS_ODS.NBS_RDB_METADATA WHERE RDB_TABLE_NM = 'D_INTERVIEW' );

QUIT;
DATA _NULL_;
  SET DATA_CHECKER_MASTER_LAST;
  IF COUNT>0 THEN CALL EXECUTE('%INTERVIEW');
RUN;
