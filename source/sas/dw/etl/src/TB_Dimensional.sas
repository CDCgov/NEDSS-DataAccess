PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT_NEW=(SELECT COUNT(*) FROM L_TB_PAM_N),
SOURCE_ROW_COUNT_EXISTING=(SELECT COUNT(*) FROM L_TB_PAM_E),
START_DATE=DATETIME();

CREATE TABLE D_TB_PAM_N AS 
	SELECT * FROM S_TB_PAM , L_TB_PAM_N
where S_TB_PAM.TB_PAM_UID=L_TB_PAM_N.TB_PAM_UID;
CREATE TABLE D_TB_PAM_E AS 
	SELECT * FROM S_TB_PAM , L_TB_PAM_E
where S_TB_PAM.TB_PAM_UID=L_TB_PAM_E.TB_PAM_UID;
QUIT;
proc sort data=D_TB_PAM_N NODUPKEY; by D_TB_PAM_KEY;run;
%DBLOAD (D_TB_PAM, D_TB_PAM_N);

data nbs_rdb.D_TB_PAM;
 modify nbs_rdb.D_TB_PAM D_TB_PAM_E;
 by D_TB_PAM_KEY;
run;
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT_NEW=(SELECT COUNT(*) FROM D_TB_PAM_N),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_TB_PAM),
START_DATE=DATETIME(); 
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_TB_PAM TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_TB_PAM TABLE.';
run;
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET
END_DATE=DATETIME(),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_TB_PAM');
quit;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET START_DATE=DATETIME();
quit;
PROC SQL;
CREATE TABLE D_TB_HIV_N AS 
	SELECT * FROM S_TB_HIV, L_TB_HIV_N
WHERE S_TB_HIV.TB_PAM_UID=L_TB_HIV_N.TB_PAM_UID;
CREATE TABLE D_TB_HIV_E AS 
	SELECT * FROM S_TB_HIV , L_TB_HIV_E
where S_TB_HIV.TB_PAM_UID=L_TB_HIV_E.TB_PAM_UID;
QUIT;
%DBLOAD (D_TB_HIV, D_TB_HIV_N);

data nbs_rdb.D_TB_HIV;
 modify nbs_rdb.D_TB_HIV D_TB_HIV_E;
 by D_TB_HIV_KEY;
run;
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT_NEW=(SELECT COUNT(*) FROM D_TB_HIV_N),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_TB_HIV),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_TB_HIV'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_TB_HIV );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_TB_HIV TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_TB_HIV TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
PROC SQL;
CREATE TABLE D_ADDL_RISK_GROUP AS
	SELECT distinct D_ADDL_RISK_GROUP_KEY 
	FROM L_ADDL_RISK; 

CREATE TABLE D_ADDL_RISK AS 
   SELECT ADDL_RISK_KEY,
    d_ADDL_RISK_group_KEY,
	D_ADDL_RISK_KEY,
	S_ADDL_RISK.VALUE,
	SEQ_NBR,last_chg_time,
	L_ADDL_RISK.TB_PAM_UID
	   FROM   	L_ADDL_RISK LEFT OUTER JOIN S_ADDL_RISK
           ON 	S_ADDL_RISK.TB_PAM_UID=L_ADDL_RISK.TB_PAM_UID
			and S_ADDL_RISK.NBS_Case_Answer_UID= L_ADDL_RISK.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_ADDL_RISK NODUPKEY; by ADDL_RISK_KEY;run;
%DBLOAD (D_ADDL_RISK_GROUP, D_ADDL_RISK_GROUP);
%DBLOAD (D_ADDL_RISK, D_ADDL_RISK);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM D_ADDL_RISK where last_chg_time is not null),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_ADDL_RISK'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_ADDL_RISK );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_ADDL_RISK TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_ADDL_RISK TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);


PROC SQL;
CREATE TABLE D_DISEASE_SITE_GROUP AS
	SELECT distinct D_DISEASE_SITE_GROUP_KEY 
	FROM L_DISEASE_SITE; 
CREATE TABLE D_DISEASE_SITE AS 
   SELECT DISEASE_SITE_KEY,
    d_DISEASE_SITE_group_KEY,
	D_DISEASE_SITE_KEY,
	S_DISEASE_SITE.VALUE,
	SEQ_NBR,last_chg_time,
	L_DISEASE_SITE.TB_PAM_UID
	   FROM   	L_DISEASE_SITE LEFT OUTER JOIN S_DISEASE_SITE
           ON 	S_DISEASE_SITE.TB_PAM_UID=L_DISEASE_SITE.TB_PAM_UID
			and S_DISEASE_SITE.NBS_Case_Answer_UID= L_DISEASE_SITE.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_DISEASE_SITE NODUPKEY; by DISEASE_SITE_KEY;run;
%DBLOAD (D_DISEASE_SITE_GROUP, D_DISEASE_SITE_GROUP);
%DBLOAD (D_DISEASE_SITE, D_DISEASE_SITE);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_DISEASE_SITE),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_DISEASE_SITE'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_DISEASE_SITE);  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_DISEASE_SITE TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_DISEASE_SITE TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);


PROC SQL;
CREATE TABLE D_GT_12_REAS_GROUP AS
	SELECT distinct D_GT_12_REAS_GROUP_KEY 
	FROM L_GT_12_REAS; 

CREATE TABLE D_GT_12_REAS AS 
   SELECT GT_12_REAS_KEY,
    d_GT_12_REAS_group_KEY,
	D_GT_12_REAS_KEY,
	S_GT_12_REAS.VALUE,
	SEQ_NBR,last_chg_time,
	L_GT_12_REAS.TB_PAM_UID
	   FROM   	L_GT_12_REAS LEFT OUTER JOIN S_GT_12_REAS
           ON 	S_GT_12_REAS.TB_PAM_UID=L_GT_12_REAS.TB_PAM_UID
			and S_GT_12_REAS.NBS_Case_Answer_UID= L_GT_12_REAS.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_GT_12_REAS NODUPKEY; by GT_12_REAS_KEY;run;
%DBLOAD (D_GT_12_REAS_GROUP, D_GT_12_REAS_GROUP);
%DBLOAD (D_GT_12_REAS, D_GT_12_REAS);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_GT_12_REAS),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_GT_12_REAS'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_GT_12_REAS );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_GT_12_REAS TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_GT_12_REAS TABLE.';
run;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);

PROC SQL;
CREATE TABLE D_HC_PROV_TY_3_GROUP AS
	SELECT distinct D_HC_PROV_TY_3_GROUP_KEY 
	FROM L_HC_PROV_TY_3; 

CREATE TABLE D_HC_PROV_TY_3 AS 
   SELECT HC_PROV_TY_3_KEY,
    d_HC_PROV_TY_3_group_KEY,
	D_HC_PROV_TY_3_KEY,
	S_HC_PROV_TY_3.VALUE,
	SEQ_NBR,last_chg_time,
	L_HC_PROV_TY_3.TB_PAM_UID
	   FROM   	L_HC_PROV_TY_3 LEFT OUTER JOIN S_HC_PROV_TY_3
           ON 	S_HC_PROV_TY_3.TB_PAM_UID=L_HC_PROV_TY_3.TB_PAM_UID
			and S_HC_PROV_TY_3.NBS_Case_Answer_UID= L_HC_PROV_TY_3.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_HC_PROV_TY_3 NODUPKEY; by HC_PROV_TY_3_KEY;run;
%DBLOAD (D_HC_PROV_TY_3_GROUP, D_HC_PROV_TY_3_GROUP);
%DBLOAD (D_HC_PROV_TY_3, D_HC_PROV_TY_3);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_HC_PROV_TY_3 ),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_HC_PROV_TY_3'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_HC_PROV_TY_3 );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_HC_PROV_TY_3 TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_HC_PROV_TY_3 TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);

PROC SQL;
CREATE TABLE D_MOVE_CNTRY_GROUP AS
	SELECT distinct D_MOVE_CNTRY_GROUP_KEY 
	FROM L_MOVE_CNTRY; 
CREATE TABLE D_MOVE_CNTRY AS 
   SELECT MOVE_CNTRY_KEY,
    d_MOVE_CNTRY_group_KEY,
	D_MOVE_CNTRY_KEY,
	S_MOVE_CNTRY.VALUE,
	SEQ_NBR,last_chg_time,
	L_MOVE_CNTRY.TB_PAM_UID
	   FROM   	L_MOVE_CNTRY LEFT OUTER JOIN S_MOVE_CNTRY
           ON 	S_MOVE_CNTRY.TB_PAM_UID=L_MOVE_CNTRY.TB_PAM_UID
			and S_MOVE_CNTRY.NBS_Case_Answer_UID= L_MOVE_CNTRY.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_MOVE_CNTRY NODUPKEY; by MOVE_CNTRY_KEY;run;
%DBLOAD (D_MOVE_CNTRY_GROUP, D_MOVE_CNTRY_GROUP);
%DBLOAD (D_MOVE_CNTRY, D_MOVE_CNTRY);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM D_MOVE_CNTRY where last_chg_time is not null),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_MOVE_CNTRY'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_MOVE_CNTRY );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_MOVE_CNTRY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_MOVE_CNTRY TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);


PROC SQL;
CREATE TABLE D_MOVE_CNTY_GROUP AS
	SELECT distinct D_MOVE_CNTY_GROUP_KEY 
	FROM L_MOVE_CNTY; 
CREATE TABLE D_MOVE_CNTY AS 
   SELECT MOVE_CNTY_KEY,
    d_MOVE_CNTY_group_KEY,
	D_MOVE_CNTY_KEY,
	S_MOVE_CNTY.VALUE,
	SEQ_NBR,last_chg_time,
	L_MOVE_CNTY.TB_PAM_UID
	   FROM   	L_MOVE_CNTY LEFT OUTER JOIN S_MOVE_CNTY
           ON 	S_MOVE_CNTY.TB_PAM_UID=L_MOVE_CNTY.TB_PAM_UID
			and S_MOVE_CNTY.NBS_Case_Answer_UID= L_MOVE_CNTY.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_MOVE_CNTY NODUPKEY; by MOVE_CNTY_KEY;run;
%DBLOAD (D_MOVE_CNTY_GROUP, D_MOVE_CNTY_GROUP);
%DBLOAD (D_MOVE_CNTY, D_MOVE_CNTY);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_MOVE_CNTY ),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_MOVE_CNTY'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_MOVE_CNTY );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_MOVE_CNTY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_MOVE_CNTY TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);


PROC SQL;
CREATE TABLE D_MOVE_STATE_GROUP AS
	SELECT distinct D_MOVE_STATE_GROUP_KEY 
	FROM L_MOVE_STATE; 

CREATE TABLE D_MOVE_STATE AS 
   SELECT MOVE_STATE_KEY,
    d_MOVE_STATE_group_KEY,
	D_MOVE_STATE_KEY,
	S_MOVE_STATE.VALUE,
	SEQ_NBR,last_chg_time,
	L_MOVE_STATE.TB_PAM_UID
	   FROM   	L_MOVE_STATE LEFT OUTER JOIN S_MOVE_STATE
           ON 	S_MOVE_STATE.TB_PAM_UID=L_MOVE_STATE.TB_PAM_UID
			and S_MOVE_STATE.NBS_Case_Answer_UID= L_MOVE_STATE.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_MOVE_STATE NODUPKEY; by MOVE_STATE_KEY;run;
%DBLOAD (D_MOVE_STATE_GROUP, D_MOVE_STATE_GROUP);
%DBLOAD (D_MOVE_STATE, D_MOVE_STATE);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_MOVE_STATE),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_MOVE_STATE'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_MOVE_STATE );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_MOVE_STATE TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_MOVE_STATE TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);


PROC SQL;
CREATE TABLE D_MOVED_WHERE_GROUP AS
	SELECT distinct D_MOVED_WHERE_GROUP_KEY 
	FROM L_MOVED_WHERE; 

CREATE TABLE D_MOVED_WHERE AS 
   SELECT MOVED_WHERE_KEY,
    d_MOVED_WHERE_group_KEY,
	D_MOVED_WHERE_KEY,
	S_MOVED_WHERE.VALUE,
	SEQ_NBR,last_chg_time,
	L_MOVED_WHERE.TB_PAM_UID
	   FROM   	L_MOVED_WHERE LEFT OUTER JOIN S_MOVED_WHERE
           ON 	S_MOVED_WHERE.TB_PAM_UID=L_MOVED_WHERE.TB_PAM_UID
			and S_MOVED_WHERE.NBS_Case_Answer_UID= L_MOVED_WHERE.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_MOVED_WHERE NODUPKEY; by MOVED_WHERE_KEY;run;
%DBLOAD (D_MOVED_WHERE_GROUP, D_MOVED_WHERE_GROUP);
%DBLOAD (D_MOVED_WHERE, D_MOVED_WHERE);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_MOVED_WHERE ),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_MOVED_WHERE'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_MOVED_WHERE);  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_MOVED_WHERE TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_MOVED_WHERE TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);


PROC SQL;
CREATE TABLE D_OUT_OF_CNTRY_GROUP AS
	SELECT distinct D_OUT_OF_CNTRY_GROUP_KEY 
	FROM L_OUT_OF_CNTRY; 
CREATE TABLE D_OUT_OF_CNTRY AS 
   SELECT OUT_OF_CNTRY_KEY,
    d_OUT_OF_CNTRY_group_KEY,
	D_OUT_OF_CNTRY_KEY,
	S_OUT_OF_CNTRY.VALUE,
	SEQ_NBR,last_chg_time,
	L_OUT_OF_CNTRY.TB_PAM_UID
	   FROM   	L_OUT_OF_CNTRY LEFT OUTER JOIN S_OUT_OF_CNTRY
           ON 	S_OUT_OF_CNTRY.TB_PAM_UID=L_OUT_OF_CNTRY.TB_PAM_UID
			and S_OUT_OF_CNTRY.NBS_Case_Answer_UID= L_OUT_OF_CNTRY.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_OUT_OF_CNTRY NODUPKEY; by OUT_OF_CNTRY_KEY;run;
%DBLOAD (D_OUT_OF_CNTRY_GROUP, D_OUT_OF_CNTRY_GROUP);
%DBLOAD (D_OUT_OF_CNTRY, D_OUT_OF_CNTRY);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM D_OUT_OF_CNTRY where last_chg_time is not null),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_OUT_OF_CNTRY'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_OUT_OF_CNTRY );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_OUT_OF_CNTRY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_OUT_OF_CNTRY TABLE.';
run;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);


PROC SQL;
CREATE TABLE D_SMR_EXAM_TY_GROUP AS
	SELECT distinct D_SMR_EXAM_TY_GROUP_KEY 
	FROM L_SMR_EXAM_TY; 

CREATE TABLE D_SMR_EXAM_TY AS 
   SELECT SMR_EXAM_TY_KEY,
    d_SMR_EXAM_TY_group_KEY,
	D_SMR_EXAM_TY_KEY,
	S_SMR_EXAM_TY.VALUE,
	SEQ_NBR,last_chg_time,
	L_SMR_EXAM_TY.TB_PAM_UID
	   FROM   	L_SMR_EXAM_TY LEFT OUTER JOIN S_SMR_EXAM_TY
           ON 	S_SMR_EXAM_TY.TB_PAM_UID=L_SMR_EXAM_TY.TB_PAM_UID
			and S_SMR_EXAM_TY.NBS_Case_Answer_UID= L_SMR_EXAM_TY.NBS_Case_Answer_UID 
			;
QUIT;
proc sort data=D_SMR_EXAM_TY NODUPKEY; by SMR_EXAM_TY_KEY;run;
%DBLOAD (D_SMR_EXAM_TY_GROUP, D_SMR_EXAM_TY_GROUP);
%DBLOAD (D_SMR_EXAM_TY, D_SMR_EXAM_TY);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL 
SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.D_SMR_EXAM_TY),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='D_SMR_EXAM_TY'),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) from nbs_rdb.D_SMR_EXAM_TY );  
quit;
data ACTIVITY_LOG_DETAIL;
set ACTIVITY_LOG_DETAIL;
DESTINATION_ROW_COUNTs=put(DESTINATION_ROW_COUNT, 20.);
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNTs) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN D_SMR_EXAM_TY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNTs) || ' TOTAL NUMBER OF RECORD(S) IN THE D_SMR_EXAM_TY TABLE.';
run;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);




