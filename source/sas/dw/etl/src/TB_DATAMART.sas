PROC SQL;

CREATE TABLE PATIENT AS 
SELECT  F_TB_PAM.PERSON_KEY, PATIENT_PHONE_HOME AS PATIENT_PHONE_NUMBER_HOME 'PATIENT_PHONE_NUMBER_HOME' ,
PATIENT_PHONE_EXT_HOME AS  PATIENT_PHONE_EXT_HOME 'PATIENT_PHONE_EXT_HOME', PATIENT_PHONE_WORK AS PATIENT_PHONE_NUMBER_WORK 'PATIENT_PHONE_NUMBER_WORK' ,
PATIENT_PHONE_EXT_WORK AS  PATIENT_PHONE_EXT_WORK 'PATIENT_PHONE_EXT_WORK',
PATIENT.PATIENT_LOCAL_ID AS PATIENT_LOCAL_ID 'PATIENT_LOCAL_ID',
PATIENT.PATIENT_GENERAL_COMMENTS AS PATIENT_GENERAL_COMMENTS 'PATIENT_GENERAL_COMMENTS',
PATIENT.PATIENT_LAST_NAME AS PATIENT_LAST_NAME 'PATIENT_LAST_NAME',
PATIENT.PATIENT_FIRST_NAME AS  PATIENT_FIRST_NAME 'PATIENT_FIRST_NAME',
PATIENT.PATIENT_MIDDLE_NAME AS PATIENT_MIDDLE_NAME 'PATIENT_MIDDLE_NAME',
PATIENT.PATIENT_NAME_SUFFIX AS PATIENT_NAME_SUFFIX 'PATIENT_NAME_SUFFIX',
PATIENT.PATIENT_DOB AS PATIENT_DOB 'PATIENT_DOB',
PATIENT.PATIENT_AGE_REPORTED AS AGE_REPORTED 'AGE_REPORTED',
PATIENT.PATIENT_AGE_REPORTED_UNIT AS  AGE_REPORTED_UNIT  'AGE_REPORTED_UNIT',
PATIENT.PATIENT_BIRTH_SEX AS  PATIENT_BIRTH_SEX 'PATIENT_BIRTH_SEX',
PATIENT.PATIENT_CURRENT_SEX AS PATIENT_CURRENT_SEX 'PATIENT_CURRENT_SEX',
PATIENT.PATIENT_DECEASED_INDICATOR AS PATIENT_DECEASED_INDICATOR 'PATIENT_DECEASED_INDICATOR',
PATIENT.PATIENT_DECEASED_DATE AS PATIENT_DECEASED_DATE 'PATIENT_DECEASED_DATE',
PATIENT.PATIENT_MARITAL_STATUS AS PATIENT_MARITAL_STATUS 'PATIENT_MARITAL_STATUS',
PATIENT.PATIENT_SSN,
PATIENT.PATIENT_ETHNICITY AS PATIENT_ETHNICITY 'PATIENT_ETHNICITY',
PATIENT.PATIENT_DOB AS PATIENT_DOB 'PATIENT_DOB',
PATIENT.PATIENT_STREET_ADDRESS_1 AS PATIENT_STREET_ADDRESS_1 'PATIENT_STREET_ADDRESS_1',
PATIENT.PATIENT_STREET_ADDRESS_2 AS PATIENT_STREET_ADDRESS_2 'PATIENT_STREET_ADDRESS_2',
PATIENT.PATIENT_CITY AS PATIENT_CITY 'PATIENT_CITY',
PATIENT.PATIENT_STATE AS PATIENT_STATE 'PATIENT_STATE',
PATIENT.PATIENT_ZIP AS PATIENT_ZIP 'PATIENT_ZIP',
PATIENT.PATIENT_COUNTY AS PATIENT_COUNTY 'PATIENT_COUNTY',
PATIENT.PATIENT_COUNTRY AS PATIENT_COUNTRY 'PATIENT_COUNTRY',
PATIENT.PATIENT_WITHIN_CITY_LIMITS AS PATIENT_WITHIN_CITY_LIMITS 'PATIENT_WITHIN_CITY_LIMITS',
PATIENT.PATIENT_RACE_CALC_DETAILS AS RACE_CALC_DETAILS 'RACE_CALC_DETAILS', 
PATIENT.PATIENT_RACE_CALCULATED AS RACE_CALCULATED 'RACE_CALCULATED', 
PATIENT.PATIENT_RACE_NAT_HI_1 AS RACE_NAT_HI_1 'RACE_NAT_HI_1', 
PATIENT.PATIENT_RACE_NAT_HI_2 AS RACE_NAT_HI_2 'RACE_NAT_HI_2', 
PATIENT.PATIENT_RACE_NAT_HI_3 AS RACE_NAT_HI_3 'RACE_NAT_HI_3', 
PATIENT.PATIENT_RACE_ASIAN_1 AS RACE_ASIAN_1 'RACE_ASIAN_1', 
PATIENT.PATIENT_RACE_ASIAN_2 AS RACE_ASIAN_2 'RACE_ASIAN_2', 
PATIENT.PATIENT_RACE_ASIAN_ALL AS RACE_ASIAN_ALL 'RACE_ASIAN_ALL',
PATIENT.PATIENT_RACE_ASIAN_3 AS RACE_ASIAN_3 'RACE_ASIAN_3',
PATIENT.PATIENT_RACE_ASIAN_GT3_IND AS RACE_ASIAN_GT3_IND 'RACE_ASIAN_GT3_IND', 
PATIENT.PATIENT_RACE_NAT_HI_GT3_IND AS RACE_NAT_HI_GT3_IND 'RACE_NAT_HI_GT3_IND', 
PATIENT.PATIENT_RACE_NAT_HI_ALL AS RACE_NAT_HI_ALL 'RACE_NAT_HI_ALL'
FROM NBS_RDB.F_TB_PAM LEFT OUTER JOIN NBS_RDB.D_PATIENT PATIENT 
ON PATIENT.PATIENT_KEY= F_TB_PAM.PERSON_KEY;

CREATE TABLE PROVIDER AS 
SELECT   F_TB_PAM.PERSON_KEY,PROVIDER.PROVIDER_LAST_NAME AS INVESTIGATOR_LAST_NAME 'INVESTIGATOR_LAST_NAME', 
PROVIDER.PROVIDER_FIRST_NAME AS INVESTIGATOR_FIRST_NAME 'INVESTIGATOR_FIRST_NAME',  PROVIDER_PHONE_WORK AS INVESTIGATOR_PHONE_NUMBER 'INVESTIGATOR_PHONE_NUMBER',
F_TB_PAM.PROVIDER_KEY
FROM NBS_RDB.F_TB_PAM LEFT OUTER JOIN NBS_RDB.D_PROVIDER PROVIDER 
ON	PROVIDER.PROVIDER_KEY= F_TB_PAM.PROVIDER_KEY
ORDER BY PROVIDER_KEY;

CREATE TABLE PHYSICIAN AS 
SELECT   F_TB_PAM.PERSON_KEY,PHYSICIAN.PROVIDER_LAST_NAME AS PHYSICIAN_LAST_NAME 'PHYSICIAN_LAST_NAME', 
PHYSICIAN.PROVIDER_LAST_NAME AS PHYSICIAN_FIRST_NAME 'PHYSICIAN_FIRST_NAME',PROVIDER_PHONE_WORK AS PHYSICIAN_PHONE_NUMBER 'PHYSICIAN_PHONE_NUMBER',
F_TB_PAM.PHYSICIAN_KEY
FROM NBS_RDB.F_TB_PAM LEFT OUTER JOIN NBS_RDB.D_PROVIDER PHYSICIAN 
ON PHYSICIAN.PROVIDER_KEY= F_TB_PAM.PHYSICIAN_KEY
ORDER BY PHYSICIAN_KEY;

CREATE TABLE REPORTER AS 
SELECT   F_TB_PAM.PERSON_KEY,REPORTER.PROVIDER_LAST_NAME AS REPORTER_LAST_NAME 'REPORTER_LAST_NAME', 
REPORTER.PROVIDER_FIRST_NAME AS REPORTER_FIRST_NAME 'REPORTER_FIRST_NAME',  F_TB_PAM.PERSON_AS_REPORTER_KEY, 
PROVIDER_PHONE_WORK AS REPORTER_PHONE_NUMBER 'REPORTER_PHONE_NUMBER',F_TB_PAM.PERSON_AS_REPORTER_KEY
FROM NBS_RDB.F_TB_PAM LEFT OUTER JOIN NBS_RDB.D_PROVIDER REPORTER 
ON REPORTER.PROVIDER_KEY= F_TB_PAM.PERSON_AS_REPORTER_KEY
ORDER BY PERSON_AS_REPORTER_KEY;

CREATE TABLE ORG_REPORTER AS
SELECT F_TB_PAM.PERSON_KEY,ORGANIZATION.ORGANIZATION_NAME  AS REPORTING_SOURCE_NAME 'REPORTING_SOURCE_NAME',ORG_AS_REPORTER_KEY,
F_TB_PAM.ORG_AS_REPORTER_KEY
FROM NBS_RDB.F_TB_PAM LEFT OUTER JOIN NBS_RDB.D_ORGANIZATION ORGANIZATION
ON ORGANIZATION.ORGANIZATION_KEY=F_TB_PAM.ORG_AS_REPORTER_KEY;

CREATE TABLE HOSPITAL  AS
SELECT   F_TB_PAM.PERSON_KEY,ORGANIZATION.ORGANIZATION_NAME  AS HOSPITAL_NAME 'HOSPITAL_NAME', HOSPITAL_KEY,F_TB_PAM.PERSON_KEY
FROM NBS_RDB.F_TB_PAM LEFT OUTER JOIN NBS_RDB.D_ORGANIZATION ORGANIZATION
ON ORGANIZATION.ORGANIZATION_KEY=F_TB_PAM.HOSPITAL_KEY;
PROC SQL;
CREATE TABLE ENTITY_LOCATION AS 
SELECT AGE_REPORTED,
AGE_REPORTED_UNIT,
HOSPITAL_KEY,
HOSPITAL_NAME,
INVESTIGATOR_FIRST_NAME,
INVESTIGATOR_LAST_NAME,
INVESTIGATOR_PHONE_NUMBER,

PATIENT_BIRTH_SEX,             	 
PATIENT_CITY,                  	 
PATIENT_COUNTRY,               	 
PATIENT_COUNTY,                	 
PATIENT_CURRENT_SEX,           	 
PATIENT_DECEASED_DATE,         	
PATIENT_DECEASED_INDICATOR,    	 
PATIENT_DOB,                   	
PATIENT_ETHNICITY,             	 
PATIENT_FIRST_NAME,            	 
PATIENT_GENERAL_COMMENTS,      	 
PATIENT_LAST_NAME,             	 
PATIENT_LOCAL_ID,              	 
PATIENT_MARITAL_STATUS,        	 
PATIENT_MIDDLE_NAME,           	 
PATIENT_NAME_SUFFIX,           	 
PATIENT_PHONE_EXT_HOME,        	  
PATIENT_PHONE_EXT_WORK,        	 
PATIENT_PHONE_NUMBER_HOME,     	 
PATIENT_PHONE_NUMBER_WORK,     	 
PATIENT_SSN,                   	 
PATIENT_STATE,                 	 
PATIENT_STREET_ADDRESS_1,      	 
PATIENT_STREET_ADDRESS_2,      	 
PATIENT_WITHIN_CITY_LIMITS,    	 
PATIENT_ZIP,                  
PERSON_AS_REPORTER_KEY,
PATIENT.PERSON_KEY,
PHYSICIAN_FIRST_NAME,
PHYSICIAN_KEY,
PHYSICIAN_LAST_NAME,
PHYSICIAN_PHONE_NUMBER,
PROVIDER_KEY,
RACE_ASIAN_1,                  	 
RACE_ASIAN_2,                  	 
RACE_ASIAN_3,                  	 
RACE_ASIAN_ALL,                	 
RACE_ASIAN_GT3_IND,            	 
RACE_CALCULATED,               	 
RACE_CALC_DETAILS,             	 
RACE_NAT_HI_1,                 	 
RACE_NAT_HI_2,                 	 
RACE_NAT_HI_3,                 	 
RACE_NAT_HI_ALL,               	 
RACE_NAT_HI_GT3_IND,           	 
REPORTER_FIRST_NAME,
REPORTER_LAST_NAME,
REPORTER_PHONE_NUMBER FROM PATIENT PATIENT
INNER  JOIN PROVIDER PROVIDER
	ON PROVIDER.PERSON_KEY= PATIENT.PERSON_KEY
INNER JOIN PHYSICIAN ON 
	PHYSICIAN.PERSON_KEY= PATIENT.PERSON_KEY
INNER JOIN REPORTER ON
	REPORTER.PERSON_KEY=PATIENT.PERSON_KEY
INNER  JOIN ORG_REPORTER 
	ON PATIENT.PERSON_KEY=ORG_REPORTER.PERSON_KEY
INNER  JOIN HOSPITAL 
	ON PATIENT.PERSON_KEY=HOSPITAL.PERSON_KEY;
QUIT;
PROC SQL;
CREATE TABLE BASE AS
SELECT  
EVENT_METRIC.ADD_TIME AS INVESTIGATION_CREATE_DATE 'INVESTIGATION_CREATE_DATE',
EVENT_METRIC.ADD_USER_ID AS INVESTIGATION_CREATED_BY 'INVESTIGATION_CREATED_BY',
EVENT_METRIC.LAST_CHG_USER_ID AS INVESTIGATION_LAST_UPDTD_BY 'INVESTIGATION_LAST_UPDTD_BY',
EVENT_METRIC.LAST_CHG_TIME AS INVESTIGATION_LAST_UPDTD_DATE 'INVESTIGATION_LAST_UPDTD_DATE',
EVENT_METRIC.PROG_AREA_DESC_TXT AS PROGRAM_AREA_DESCRIPTION 'PROGRAM_AREA_DESCRIPTION',
EVENT_METRIC.LOCAL_ID AS INVESTIGATION_LOCAL_ID 'INVESTIGATION_LOCAL_ID',
INVESTIGATION.CASE_OID as PROGRAM_JURISDICTION_OID 'PROGRAM_JURISDICTION_OID',
INVESTIGATION.CASE_RPT_MMWR_WK AS MMWR_WEEK 'MMWR_WEEK',
INVESTIGATION.CASE_RPT_MMWR_YR AS MMWR_YEAR 'MMWR_YEAR',
INVESTIGATION.INV_COMMENTS AS GENERAL_COMMENTS 'GENERAL_COMMENTS',  
INVESTIGATION.INV_LOCAL_ID  AS INVESTIGATION_LOCAL_ID 'INVESTIGATION_LOCAL_ID',
INVESTIGATION.INV_STATE_CASE_ID  AS STATE_CASE_NUMBER 'STATE_CASE_NUMBER',
INVESTIGATION.CITY_COUNTY_CASE_NBR AS city_county_case_number 'city_county_case_number',
INVESTIGATION.INV_START_DT AS INVESTIGATION_START_DATE 'INVESTIGATION_START_DATE',
INVESTIGATION.INVESTIGATION_key as INVESTIGATION_key 'INVESTIGATION_KEY',
INVESTIGATION.INVESTIGATION_STATUS AS INVESTIGATION_STATUS 'INVESTIGATION_STATUS',
INVESTIGATION.INV_CASE_STATUS AS CASE_STATUS 'CASE_STATUS',
INVESTIGATION.JURISDICTION_NM AS JURISDICTION_NAME 'JURISDICTION_NAME',
INVESTIGATION.CITY_COUNTY_CASE_NBR as CITY_COUNTY_CASE_NBR 'CITY_COUNTY_CASE_NBR',
INVESTIGATION.Inv_Rpt_Dt AS DATE_REPORTED 'DATE_REPORTED',
INVESTIGATION.Earliest_Rpt_To_State_Dt AS DATE_SUBMITTED 'DATE_SUBMITTED',
INVESTIGATION.HSPTLIZD_IND AS HOSPITALIZED 'HOSPITALIZED',
INVESTIGATION.HSPTL_ADMISSION_DT AS HOSPITALIZED_ADMISSION_DATE  'HOSPITALIZED_ADMISSION_DATE',
INVESTIGATION.HSPTL_DISCHARGE_DT AS HOSPITALIZED_DISCHARGE_DATE 'HOSPITALIZED_DISCHARGE_DATE',
INVESTIGATION.HSPTL_DURATION_DAYS   AS HOSPITALIZED_DURATION_DAYS 'HOSPITALIZED_DURATION_DAYS',
INVESTIGATION.ILLNESS_ONSET_DT   AS ILLNESS_ONSET_DATE 'ILLNESS_ONSET_DATE',
INVESTIGATION.DIAGNOSIS_DT   AS DIAGNOSIS_DATE 'DIAGNOSIS_DATE',
INVESTIGATION.EARLIEST_RPT_TO_CNTY_DT AS DATE_REPORTED_TO_COUNTY 'DATE_REPORTED_TO_COUNTY',
INVESTIGATION.OUTBREAK_IND AS  OUTBREAK 'OUTBREAK',
INVESTIGATION.OUTBREAK_NAME AS  OUTBREAK_CD 'OUTBREAK_CD',
INVESTIGATION.INV_ASSIGNED_DT AS INVESTIGATOR_ASSIGN_DATE 'INVESTIGATOR_ASSIGN_DATE',
INVESTIGATION.PATIENT_AGE_AT_ONSET_UNIT AS ILLNESS_ONSET_AGE_UNIT 'ILLNESS_ONSET_AGE_UNIT',
INVESTIGATION.PATIENT_AGE_AT_ONSET AS ILLNESS_ONSET_AGE 'ILLNESS_ONSET_AGE',
INVESTIGATION.PATIENT_PREGNANT_IND AS PREGNANT 'PREGNANT',
INVESTIGATION.INVESTIGATION_DEATH_DATE as INVESTIGATION_DEATH_DATE 'INVESTIGATION_DEATH_DATE',
INVESTIGATION.DIE_FRM_THIS_ILLNESS_IND AS DIE_FRM_THIS_ILLNESS_IND 'DIE_FRM_THIS_ILLNESS_IND',
INVESTIGATION.ILLNESS_END_DT AS ILLNESS_END_DATE 'ILLNESS_END_DATE',
INVESTIGATION.ILLNESS_DURATION AS ILLNESS_DURATION 'ILLNESS_DURATION',
INVESTIGATION.ILLNESS_DURATION_UNIT AS ILLNESS_DURATION_UNIT 'ILLNESS_DURATION_UNIT',
INVESTIGATION.DAYCARE_ASSOCIATION_IND AS DAYCARE 'DAYCARE',
INVESTIGATION.FOOD_HANDLR_IND AS FOOD_HANDLER 'FOOD_HANDLER',
INVESTIGATION.DISEASE_IMPORTED_IND AS DISEASE_ACQUIRED_WHERE 'DISEASE_ACQUIRED_WHERE',
INVESTIGATION.IMPORT_FRM_CNTRY AS DISEASE_ACQUIRED_COUNTRY 'DISEASE_ACQUIRED_COUNTRY',
INVESTIGATION.IMPORT_FRM_STATE AS DISEASE_ACQUIRED_STATE 'DISEASE_ACQUIRED_STATE',
INVESTIGATION.IMPORT_FRM_CITY AS DISEASE_ACQUIRED_CITY 'DISEASE_ACQUIRED_CITY',
INVESTIGATION.IMPORT_FRM_CNTY AS DISEASE_ACQUIRED_COUNTY 'DISEASE_ACQUIRED_COUNTY',
INVESTIGATION.TRANSMISSION_MODE AS TRANSMISSION_MODE 'TRANSMISSION_MODE',
INVESTIGATION.DETECTION_METHOD_DESC_TXT AS DETECTION_METHOD 'DETECTION_METHOD',
INVESTIGATION.RPT_SRC_CD_DESC AS REPORTING_SOURCE_TYPE 'REPORTING_SOURCE_TYPE', 
D_TB_PAM.INIT_DRUG_REG_CALC,
D_TB_PAM.TB_PAM_UID, 
D_TB_PAM.CASE_VERIFICATION,                                                                          
D_TB_PAM.CHEST_XRAY_CAVITY_EVIDENCE,                                                                 
D_TB_PAM.CHEST_XRAY_MILIARY_EVIDENCE,                                                                
D_TB_PAM.CHEST_XRAY_RESULT,                                                                          
D_TB_PAM.COMMENTS_FOLLOW_UP_1,                                                                       
D_TB_PAM.COMMENTS_FOLLOW_UP_2, 
D_TB_PAM.CORRECTIONAL_FACIL_CUSTODY_IND,                                                             
D_TB_PAM.CORRECTIONAL_FACIL_RESIDENT,                                                                
D_TB_PAM.CORRECTIONAL_FACIL_TY,                                                                      
D_TB_PAM.COUNT_DATE,                                                                                 
D_TB_PAM.COUNT_STATUS,                                                                               
D_TB_PAM.COUNTRY_OF_VERIFIED_CASE,                                                                   
D_TB_PAM.CT_SCAN_CAVITY_EVIDENCE,                                                                    
D_TB_PAM.CT_SCAN_MILIARY_EVIDENCE,                                                                   
D_TB_PAM.CT_SCAN_RESULT,                                                                             
D_TB_PAM.CULT_TISSUE_COLLECT_DATE,                                                                   
D_TB_PAM.CULT_TISSUE_RESULT,                                                                         
D_TB_PAM.CULT_TISSUE_RESULT_RPT_DATE,                                                                
D_TB_PAM.CULT_TISSUE_RESULT_RPT_LAB_TY,                                                              
D_TB_PAM.CULT_TISSUE_SITE,                                                                           
D_TB_PAM.DATE_ARRIVED_IN_US,                                                                         
D_TB_PAM.DATE_SUBMITTED,                                                                             
D_TB_PAM.DOT,                                                                                        
D_TB_PAM.DOT_NUMBER_WEEKS,                                                                           
D_TB_PAM.EXCESS_ALCOHOL_USE_PAST_YEAR,                                                               
D_TB_PAM.FINAL_ISOLATE_COLLECT_DATE,                                                                 
D_TB_PAM.FINAL_ISOLATE_IS_SPUTUM_IND,                                                   
D_TB_PAM.FINAL_ISOLATE_NOT_SPUTUM,                                                                   
D_TB_PAM.FINAL_SUSCEPT_AMIKACIN,                                                                     
D_TB_PAM.FINAL_SUSCEPT_CAPREOMYCIN,                                                                  
D_TB_PAM.FINAL_SUSCEPT_CIPROFLOXACIN,                                                                
D_TB_PAM.FINAL_SUSCEPT_CYCLOSERINE,                                                                  
D_TB_PAM.FINAL_SUSCEPT_ETHAMBUTOL,                                                                   
D_TB_PAM.FINAL_SUSCEPT_ETHIONAMIDE,                                                                  
D_TB_PAM.FINAL_SUSCEPT_ISONIAZID,                                                                    
D_TB_PAM.FINAL_SUSCEPT_KANAMYCIN,                                                                    
D_TB_PAM.FINAL_SUSCEPT_LEVOFLOXACIN,                                                                 
D_TB_PAM.FINAL_SUSCEPT_MOXIFLOXACIN,                                                                 
D_TB_PAM.FINAL_SUSCEPT_OFLOXACIN,                                                                    
D_TB_PAM.FINAL_SUSCEPT_OTHER,                                                                        
D_TB_PAM.FINAL_SUSCEPT_OTHER_2,                                                                      
D_TB_PAM.FINAL_SUSCEPT_OTHER_2_IND,                                                                  
D_TB_PAM.FINAL_SUSCEPT_OTHER_IND,                                                                    
D_TB_PAM.FINAL_SUSCEPT_OTHER_QUINOLONES,                                                             
D_TB_PAM.FINAL_SUSCEPT_PA_SALICYLIC_ACI,                                                             
D_TB_PAM.FINAL_SUSCEPT_PYRAZINAMIDE,                                                                 
D_TB_PAM.FINAL_SUSCEPT_RIFABUTIN,                                                                    
D_TB_PAM.FINAL_SUSCEPT_RIFAMPIN,                                                                     
D_TB_PAM.FINAL_SUSCEPT_RIFAPENTINE,                                                                  
D_TB_PAM.FINAL_SUSCEPT_STREPTOMYCIN,                                                                 
D_TB_PAM.FINAL_SUSCEPT_TESTING,                                                                      
D_TB_PAM.FIRST_ISOLATE_COLLECT_DATE,                                                                 
D_TB_PAM.FIRST_ISOLATE_IS_SPUTUM_IND,                                                               
D_TB_PAM.FIRST_ISOLATE_NOT_SPUTUM,                                                                   
D_TB_PAM.HOMELESS_IND,
D_TB_PAM.CALC_DISEASE_SITE, 
D_TB_PAM.IGRA_COLLECT_DATE,                                                                          
D_TB_PAM.IGRA_RESULT,                                                                                
D_TB_PAM.IGRA_TEST_TY,                                                                               
D_TB_PAM.IMMIGRATION_STATUS_AT_US_ENTRY,                                                             
D_TB_PAM.INIT_REGIMEN_AMIKACIN as INIT_REGIMEN_AMIKACIN 'INIT_REGIMEN_AMIKACIN',                                                                      
D_TB_PAM.INIT_REGIMEN_CAPREOMYCIN,                                                                   
D_TB_PAM.INIT_REGIMEN_CIPROFLOXACIN,                                                                 
D_TB_PAM.INIT_REGIMEN_CYCLOSERINE,                                                                   
D_TB_PAM.INIT_REGIMEN_ETHAMBUTOL,                                                                    
D_TB_PAM.INIT_REGIMEN_ETHIONAMIDE,                                                                   
D_TB_PAM.INIT_REGIMEN_ISONIAZID,                                                                     
D_TB_PAM.INIT_REGIMEN_KANAMYCIN,                                                                     
D_TB_PAM.INIT_REGIMEN_LEVOFLOXACIN,                                                                  
D_TB_PAM.INIT_REGIMEN_MOXIFLOXACIN,                                                                  
D_TB_PAM.INIT_REGIMEN_OFLOXACIN,                                                                     
D_TB_PAM.INIT_REGIMEN_OTHER_1,                                                                       
D_TB_PAM.INIT_REGIMEN_OTHER_1_IND,                                                                   
D_TB_PAM.INIT_REGIMEN_OTHER_2,                                                                       
D_TB_PAM.INIT_REGIMEN_OTHER_2_IND,                                                                   
D_TB_PAM.INIT_REGIMEN_PA_SALICYLIC_ACID,                                                             
D_TB_PAM.INIT_REGIMEN_PYRAZINAMIDE,                                                                  
D_TB_PAM.INIT_REGIMEN_RIFABUTIN,                                                                     
D_TB_PAM.INIT_REGIMEN_RIFAMPIN,                                                                      
D_TB_PAM.INIT_REGIMEN_RIFAPENTINE,                                                                   
D_TB_PAM.INIT_REGIMEN_START_DATE,                                                                    
D_TB_PAM.INIT_REGIMEN_STREPTOMYCIN,                                                                  
D_TB_PAM.INIT_SUSCEPT_AMIKACIN,                                                                      
D_TB_PAM.INIT_SUSCEPT_CAPREOMYCIN,                                                                   
D_TB_PAM.INIT_SUSCEPT_CIPROFLOXACIN,                                                                 
D_TB_PAM.INIT_SUSCEPT_CYCLOSERINE,                                                                   
D_TB_PAM.INIT_SUSCEPT_ETHAMBUTOL,                                                                    
D_TB_PAM.INIT_SUSCEPT_ETHIONAMIDE,                                                                   
D_TB_PAM.INIT_SUSCEPT_ISONIAZID,                                                                     
D_TB_PAM.INIT_SUSCEPT_KANAMYCIN,                                                                     
D_TB_PAM.INIT_SUSCEPT_LEVOFLOXACIN,                                                                  
D_TB_PAM.INIT_SUSCEPT_MOXIFLOXACIN,                                                                  
D_TB_PAM.INIT_SUSCEPT_OFLOXACIN,                                                                     
D_TB_PAM.INIT_SUSCEPT_OTHER_1,                                                                       
D_TB_PAM.INIT_SUSCEPT_OTHER_1_IND,                                                                   
D_TB_PAM.INIT_SUSCEPT_OTHER_2,                                                                       
D_TB_PAM.INIT_SUSCEPT_OTHER_2_IND,                                                                   
D_TB_PAM.INIT_SUSCEPT_OTHER_QUNINOLONES,                                                             
D_TB_PAM.INIT_SUSCEPT_PA_SALICYLIC_ACID,                                                             
D_TB_PAM.INIT_SUSCEPT_PYRAZINAMIDE,                                                                  
D_TB_PAM.INIT_SUSCEPT_RIFABUTIN,                                                                     
D_TB_PAM.INIT_SUSCEPT_RIFAMPIN,                                                                      
D_TB_PAM.INIT_SUSCEPT_RIFAPENTINE,                                                                   
D_TB_PAM.INIT_SUSCEPT_STREPTOMYCIN,                                                                  
D_TB_PAM.INIT_SUSCEPT_TESTING_DONE,                                                                  
D_TB_PAM.INJECT_DRUG_USE_PAST_YEAR,                                                                  
D_TB_PAM.ISOLATE_ACCESSION_NUM,                                                                      
D_TB_PAM.ISOLATE_SUBMITTED_IND,                                                                      
D_TB_PAM.LINK_REASON_1,                                                                              
D_TB_PAM.LINK_REASON_2,                                                                              
D_TB_PAM.LINK_STATE_CASE_NUM_1,                                                                      
D_TB_PAM.LINK_STATE_CASE_NUM_2,                                                                      
D_TB_PAM.LONGTERM_CARE_FACIL_RESIDENT,                                                               
D_TB_PAM.LONGTERM_CARE_FACIL_TY,                                                                     
D_TB_PAM.MOVE_CITY AS MOVE_CITY 'MOVE_CITY',                                                                                 
D_TB_PAM.MOVE_CITY_2 AS MOVE_CITY_2 'MOVE_CITY_2',                                                                                
D_TB_PAM.MOVED_IND AS MOVED_IND 'MOVED_IND',                                                                                 
D_TB_PAM.NAA_COLLECT_DATE,                                                                           
D_TB_PAM.NAA_RESULT,                                                                                 
D_TB_PAM.NAA_RESULT_RPT_DATE,                                                                        
D_TB_PAM.NAA_RPT_LAB_TY,                                                                             
D_TB_PAM.NAA_SPEC_IS_SPUTUM_IND,                                                                     
D_TB_PAM.NAA_SPEC_NOT_SPUTUM,                                                                        
D_TB_PAM.NO_CONV_DOC_OTHER_REASON,                                                                   
D_TB_PAM.NO_CONV_DOC_REASON,                                                                         
D_TB_PAM.NONINJECT_DRUG_USE_PAST_YEAR,                                                               
D_TB_PAM.OCCUPATION_RISK,                                                                            
D_TB_PAM.OTHER_TB_RISK_FACTORS,                                                                      
D_TB_PAM.PATIENT_BIRTH_COUNTRY,                                                                      
D_TB_PAM.PATIENT_OUTSIDE_US_GT_2_MONTHS,                                                             
D_TB_PAM.PREVIOUS_DIAGNOSIS_IND,                                                                     
D_TB_PAM.PREVIOUS_DIAGNOSIS_YEAR,                                                                    
D_TB_PAM.PRIMARY_GUARD_1_BIRTH_COUNTRY,                                                              
D_TB_PAM.PRIMARY_GUARD_2_BIRTH_COUNTRY,                                                              
D_TB_PAM.PRIMARY_REASON_EVALUATED,                                                                   
D_TB_PAM.PROVIDER_OVERRIDE_COMMENTS,                                                                 
D_TB_PAM.SMR_PATH_CYTO_COLLECT_DATE,                                                                 
D_TB_PAM.SMR_PATH_CYTO_RESULT,                                                                       
D_TB_PAM.SMR_PATH_CYTO_SITE,                                                                         
D_TB_PAM.SPUTUM_CULT_COLLECT_DATE,                                                                   
D_TB_PAM.SPUTUM_CULT_RESULT_RPT_DATE,                                                                
D_TB_PAM.SPUTUM_CULT_RPT_LAB_TY,                                                                     
D_TB_PAM.SPUTUM_CULTURE_CONV_DOCUMENTED,                                                             
D_TB_PAM.SPUTUM_CULTURE_RESULT,                                                                      
D_TB_PAM.SPUTUM_SMEAR_COLLECT_DATE,                                                                  
D_TB_PAM.SPUTUM_SMEAR_RESULT,                                                                        
D_TB_PAM.STATUS_AT_DIAGNOSIS,                                                                        
D_TB_PAM.TB_SPUTUM_CULTURE_NEGATIVE_DAT,                                                             
D_TB_PAM.THERAPY_EXTEND_GT_12_OTHER,                                                                
D_TB_PAM.THERAPY_STOP_CAUSE_OF_DEATH,                                                                
D_TB_PAM.THERAPY_STOP_DATE,                                                                          
D_TB_PAM.THERAPY_STOP_REASON,                                                                        
D_TB_PAM.TRANSNATIONAL_REFERRAL_IND,                                                                 
D_TB_PAM.TST_MM_INDURATION,                                                                          
D_TB_PAM.TST_PLACED_DATE,                                                                            
D_TB_PAM.TST_RESULT,                                                                                 
D_TB_PAM.US_BORN_IND,                                                                                
f_tb_pam.provider_key,
F_TB_PAM.D_MOVE_STATE_GROUP_KEY, 
F_TB_PAM.D_HC_PROV_TY_3_GROUP_KEY,
F_TB_PAM.D_DISEASE_SITE_GROUP_KEY,
F_TB_PAM.D_ADDL_RISK_GROUP_KEY,
F_TB_PAM.D_MOVE_CNTY_GROUP_KEY,
F_TB_PAM.D_GT_12_REAS_GROUP_KEY,
F_TB_PAM.D_MOVE_CNTRY_GROUP_KEY,
F_TB_PAM.D_MOVED_WHERE_GROUP_KEY,
F_TB_PAM.D_SMR_EXAM_TY_GROUP_KEY,
F_TB_PAM.D_OUT_OF_CNTRY_GROUP_KEY,
f_tb_pam.person_key,
f_tb_pam.provider_key
from  
nbs_rdb.f_tb_pam left outer join nbs_rdb.D_TB_PAM on
	f_tb_pam.d_tb_pam_key=D_TB_PAM.d_tb_pam_key
left outer join nbs_rdb.Investigation on 
	 D_TB_PAM.TB_PAM_UID=INVESTIGATION.CASE_UID
left outer JOIN nbs_rdb.EVENT_METRIC
	on EVENT_METRIC.EVENT_UID=D_TB_PAM.TB_PAM_UID
	WHERE EVENT_METRIC.RECORD_STATUS_CD <> 'LOG_DEL'
ORDER BY f_tb_pam.person_key;
quit;
/*data INIT; 
    merge BASE TELE_LOCAT_INFO; 
    by PERSON_KEY; 
 run; */
PROC SQL;
CREATE TABLE BASE_TRANSLATED AS 
	SELECT BASE.*,
			CODE,CODE_SHORT_DESC_TXT AS OUTBREAK_NAME 'OUTBREAK_NAME'
	FROM	BASE base
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE=base.OUTBREAK_CD
			AND CVG.CODE_SET_NM='OUTBREAK_NM';
QUIT;
proc sql;
create table init as select * from 
BASE_TRANSLATED left outer join entity_location 
on entity_location.PERSON_KEY=BASE_TRANSLATED.PERSON_KEY;
quit;
proc sort data=init; by TB_PAM_UID; run;
/*CODE TO BE INTEGRATED*/
data init;
set init;
PAT_DOB=DATEPART(PATIENT_DOB);
RPT_TIME=DATEPART(DATE_REPORTED);
if PATIENT_DOB~=. and DATE_REPORTED ~=. then AGE_IN_DEC = ((RPT_TIME-PAT_DOB)/365.25);
CALC_REPORTED_AGE=floor(AGE_IN_DEC);
/*run;
data init3;
set init2;*/
if CALC_REPORTED_AGE =. then CALC_5_YEAR_AGE_GROUP=.;
else if -1 <=CALC_REPORTED_AGE<5  THEN CALC_5_YEAR_AGE_GROUP= 1;
ELSE if 5<=CALC_REPORTED_AGE<10  THEN CALC_5_YEAR_AGE_GROUP= 2;
ELSE if 10<=CALC_REPORTED_AGE<15  THEN CALC_5_YEAR_AGE_GROUP= 3;
ELSE if 15<=CALC_REPORTED_AGE<20  THEN CALC_5_YEAR_AGE_GROUP= 4;
ELSE if 20<=CALC_REPORTED_AGE<25  THEN CALC_5_YEAR_AGE_GROUP= 5;
ELSE if 25<=CALC_REPORTED_AGE<30  THEN CALC_5_YEAR_AGE_GROUP= 6;
ELSE if 30<=CALC_REPORTED_AGE<35  THEN CALC_5_YEAR_AGE_GROUP= 7;
ELSE if 35<=CALC_REPORTED_AGE<40  THEN CALC_5_YEAR_AGE_GROUP= 8;
ELSE if 40<=CALC_REPORTED_AGE<45  THEN CALC_5_YEAR_AGE_GROUP= 9;
ELSE if 45<=CALC_REPORTED_AGE<50  THEN CALC_5_YEAR_AGE_GROUP= 10;
ELSE if 50<=CALC_REPORTED_AGE<55  THEN CALC_5_YEAR_AGE_GROUP= 11;
ELSE if 55<=CALC_REPORTED_AGE<60  THEN CALC_5_YEAR_AGE_GROUP= 12;
ELSE if 60<=CALC_REPORTED_AGE<65  THEN CALC_5_YEAR_AGE_GROUP= 13;
ELSE if 65<=CALC_REPORTED_AGE<70  THEN CALC_5_YEAR_AGE_GROUP= 14;
ELSE if 70<=CALC_REPORTED_AGE<75  THEN CALC_5_YEAR_AGE_GROUP= 15;
ELSE if 75<=CALC_REPORTED_AGE<80  THEN CALC_5_YEAR_AGE_GROUP= 16;
ELSE if 80<=CALC_REPORTED_AGE<85  THEN CALC_5_YEAR_AGE_GROUP= 17;
ELSE CALC_5_YEAR_AGE_GROUP= 18;

if CALC_REPORTED_AGE =. then CALC_10_YEAR_AGE_GROUP =.;
else if -1 <=CALC_REPORTED_AGE<10  THEN CALC_10_YEAR_AGE_GROUP= 1;
ELSE if 10<=CALC_REPORTED_AGE<20  THEN CALC_10_YEAR_AGE_GROUP= 2;
ELSE if 20<=CALC_REPORTED_AGE<30  THEN CALC_10_YEAR_AGE_GROUP= 3;
ELSE if 30<=CALC_REPORTED_AGE<40  THEN CALC_10_YEAR_AGE_GROUP= 4;
ELSE if 40<=CALC_REPORTED_AGE<50  THEN CALC_10_YEAR_AGE_GROUP= 5;
ELSE if 50<=CALC_REPORTED_AGE<60  THEN CALC_10_YEAR_AGE_GROUP= 6;
ELSE if 60<=CALC_REPORTED_AGE<70  THEN CALC_10_YEAR_AGE_GROUP= 7;
ELSE if 70<=CALC_REPORTED_AGE<80  THEN CALC_10_YEAR_AGE_GROUP= 8;
ELSE if 80<=CALC_REPORTED_AGE THEN CALC_10_YEAR_AGE_GROUP= 9;
RUN;
proc sql;
create table D_GT_12_REAS as select * from nbs_rdb.D_GT_12_REAS order by D_GT_12_REAS_GROUP_KEY, value;
quit;
DATA GT_12_REAS_OUT; 
LENGTH GT_12_REAS_ALL $2000;
LENGTH GT_12_REAS_1 $50;
LENGTH GT_12_REAS_2 $50;
LENGTH GT_12_REAS_3 $50;
LENGTH GT_12_REAS_4 $50;
LENGTH GT_12_REAS_GT3_IND $10;
SET D_GT_12_REAS; BY  D_GT_12_REAS_GROUP_KEY; 

RETAIN GT_12_REAS_ALL;
RETAIN GT_12_REAS_1;
RETAIN GT_12_REAS_2;
RETAIN GT_12_REAS_3;
IF FIRST.D_GT_12_REAS_GROUP_KEY THEN GT_12_REAS_ALL=' ';
IF FIRST.D_GT_12_REAS_GROUP_KEY THEN GT_12_REAS_1=' ';
IF FIRST.D_GT_12_REAS_GROUP_KEY THEN GT_12_REAS_2=' ';
IF FIRST.D_GT_12_REAS_GROUP_KEY THEN GT_12_REAS_3=' ';
IF FIRST.D_GT_12_REAS_GROUP_KEY THEN GT_12_REAS_4=' ';
GT_12_REAS_ALL=CATX(' | ',GT_12_REAS_ALL,VALUE); 
IF LENGTHN(TRIM(GT_12_REAS_1))=0 THEN  GT_12_REAS_1=VALUE;
ELSE IF LENGTHN(TRIM(GT_12_REAS_2))=0 THEN  GT_12_REAS_2=VALUE;
ELSE IF LENGTHN(TRIM(GT_12_REAS_3))=0 THEN  GT_12_REAS_3=VALUE;
ELSE IF LENGTHN(TRIM(GT_12_REAS_4))=0 THEN  GT_12_REAS_4=VALUE;
IF LAST.D_GT_12_REAS_GROUP_KEY; 
IF LENGTHN(COMPRESS(GT_12_REAS_4))>0  THEN GT_12_REAS_GT3_IND='TRUE';
ELSE GT_12_REAS_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_SMR_EXAM_TY as select * from nbs_rdb.D_SMR_EXAM_TY order by D_SMR_EXAM_TY_GROUP_KEY, value;
quit;
DATA SMR_EXAM_TY_OUT; 
LENGTH SMR_EXAM_TY_ALL $2000;
LENGTH SMR_EXAM_TY_1 $50;
LENGTH SMR_EXAM_TY_2 $50;
LENGTH SMR_EXAM_TY_3 $50;
LENGTH SMR_EXAM_TY_4 $50;
LENGTH SMR_EXAM_TY_GT3_IND $10;
SET D_SMR_EXAM_TY; BY  D_SMR_EXAM_TY_GROUP_KEY; 

RETAIN SMR_EXAM_TY_ALL;
RETAIN SMR_EXAM_TY_1;
RETAIN SMR_EXAM_TY_2;
RETAIN SMR_EXAM_TY_3;
IF FIRST.D_SMR_EXAM_TY_GROUP_KEY THEN SMR_EXAM_TY_ALL=' ';
IF FIRST.D_SMR_EXAM_TY_GROUP_KEY THEN SMR_EXAM_TY_1=' ';
IF FIRST.D_SMR_EXAM_TY_GROUP_KEY THEN SMR_EXAM_TY_2=' ';
IF FIRST.D_SMR_EXAM_TY_GROUP_KEY THEN SMR_EXAM_TY_3=' ';
IF FIRST.D_SMR_EXAM_TY_GROUP_KEY THEN SMR_EXAM_TY_4=' ';
SMR_EXAM_TY_ALL=CATX(' | ',SMR_EXAM_TY_ALL,VALUE); 
IF LENGTHN(TRIM(SMR_EXAM_TY_1))=0 THEN  SMR_EXAM_TY_1=VALUE;
ELSE IF LENGTHN(TRIM(SMR_EXAM_TY_2))=0 THEN  SMR_EXAM_TY_2=VALUE;
ELSE IF LENGTHN(TRIM(SMR_EXAM_TY_3))=0 THEN  SMR_EXAM_TY_3=VALUE;
ELSE IF LENGTHN(TRIM(SMR_EXAM_TY_4))=0 THEN  SMR_EXAM_TY_4=VALUE;
IF LAST.D_SMR_EXAM_TY_GROUP_KEY; 
IF LENGTHN(COMPRESS(SMR_EXAM_TY_4))>0  THEN SMR_EXAM_TY_GT3_IND='TRUE';
ELSE SMR_EXAM_TY_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_ADDL_RISK as select * from nbs_rdb.D_ADDL_RISK order by D_ADDL_RISK_group_key, value;
quit;
DATA ADDL_RISK_OUT; 
LENGTH ADDL_RISK_ALL $2000;
LENGTH ADDL_RISK_1 $50;
LENGTH ADDL_RISK_2 $50;
LENGTH ADDL_RISK_3 $50;
LENGTH ADDL_RISK_4 $50;
LENGTH ADDL_RISK_GT3_IND $10;
SET D_ADDL_RISK; BY  D_ADDL_RISK_GROUP_KEY; 

RETAIN ADDL_RISK_ALL;
RETAIN ADDL_RISK_1;
RETAIN ADDL_RISK_2;
RETAIN ADDL_RISK_3;
IF FIRST.D_ADDL_RISK_GROUP_KEY THEN ADDL_RISK_ALL=' ';
IF FIRST.D_ADDL_RISK_GROUP_KEY THEN ADDL_RISK_1=' ';
IF FIRST.D_ADDL_RISK_GROUP_KEY THEN ADDL_RISK_2=' ';
IF FIRST.D_ADDL_RISK_GROUP_KEY THEN ADDL_RISK_3=' ';
IF FIRST.D_ADDL_RISK_GROUP_KEY THEN ADDL_RISK_4=' ';
ADDL_RISK_ALL=CATX(' | ',ADDL_RISK_ALL,VALUE); 
IF LENGTHN(TRIM(ADDL_RISK_1))=0 THEN  ADDL_RISK_1=VALUE;
ELSE IF LENGTHN(TRIM(ADDL_RISK_2))=0 THEN  ADDL_RISK_2=VALUE;
ELSE IF LENGTHN(TRIM(ADDL_RISK_3))=0 THEN  ADDL_RISK_3=VALUE;
ELSE IF LENGTHN(TRIM(ADDL_RISK_4))=0 THEN  ADDL_RISK_4=VALUE;
IF LAST.D_ADDL_RISK_GROUP_KEY; 
IF LENGTHN(COMPRESS(ADDL_RISK_4))>0  THEN ADDL_RISK_GT3_IND='TRUE';
ELSE ADDL_RISK_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_DISEASE_SITE as select * from nbs_rdb.D_DISEASE_SITE order by D_DISEASE_SITE_GROUP_KEY, value;
quit;
DATA DISEASE_SITE_OUT; 
LENGTH DISEASE_SITE_ALL $2000;
LENGTH DISEASE_SITE_1 $50;
LENGTH DISEASE_SITE_2 $50;
LENGTH DISEASE_SITE_3 $50;
LENGTH DISEASE_SITE_4 $50;
LENGTH DISEASE_SITE_GT3_IND $10;
SET D_DISEASE_SITE; BY  D_DISEASE_SITE_GROUP_KEY; 

RETAIN DISEASE_SITE_ALL;
RETAIN DISEASE_SITE_1;
RETAIN DISEASE_SITE_2;
RETAIN DISEASE_SITE_3;
IF FIRST.D_DISEASE_SITE_GROUP_KEY THEN DISEASE_SITE_ALL=' ';
IF FIRST.D_DISEASE_SITE_GROUP_KEY THEN DISEASE_SITE_1=' ';
IF FIRST.D_DISEASE_SITE_GROUP_KEY THEN DISEASE_SITE_2=' ';
IF FIRST.D_DISEASE_SITE_GROUP_KEY THEN DISEASE_SITE_3=' ';
IF FIRST.D_DISEASE_SITE_GROUP_KEY THEN DISEASE_SITE_4=' ';
DISEASE_SITE_ALL=CATX(' | ',DISEASE_SITE_ALL,VALUE); 
IF LENGTHN(TRIM(DISEASE_SITE_1))=0 THEN  DISEASE_SITE_1=VALUE;
ELSE IF LENGTHN(TRIM(DISEASE_SITE_2))=0 THEN  DISEASE_SITE_2=VALUE;
ELSE IF LENGTHN(TRIM(DISEASE_SITE_3))=0 THEN  DISEASE_SITE_3=VALUE;
ELSE IF LENGTHN(TRIM(DISEASE_SITE_4))=0 THEN  DISEASE_SITE_4=VALUE;
IF LAST.D_DISEASE_SITE_GROUP_KEY; 
IF LENGTHN(COMPRESS(DISEASE_SITE_4))>0  THEN DISEASE_SITE_GT3_IND='TRUE';
ELSE DISEASE_SITE_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_HC_PROV_TY_3 as select * from nbs_rdb.D_HC_PROV_TY_3 order by D_HC_PROV_TY_3_GROUP_KEY, value;
quit;
DATA HC_PROV_TY_3_OUT; 
LENGTH HC_PROV_TY_ALL $2000;
LENGTH HC_PROV_TY_1 $50;
LENGTH HC_PROV_TY_2 $50;
LENGTH HC_PROV_TY_3 $50;
LENGTH HC_PROV_TY_4 $50;
LENGTH HC_PROV_TY_GT3_IND $10;
SET D_HC_PROV_TY_3; BY  D_HC_PROV_TY_3_GROUP_KEY; 

RETAIN HC_PROV_TY_ALL;
RETAIN HC_PROV_TY_1;
RETAIN HC_PROV_TY_2;
RETAIN HC_PROV_TY_3;
IF FIRST.D_HC_PROV_TY_3_GROUP_KEY THEN HC_PROV_TY_ALL=' ';
IF FIRST.D_HC_PROV_TY_3_GROUP_KEY THEN HC_PROV_TY_1=' ';
IF FIRST.D_HC_PROV_TY_3_GROUP_KEY THEN HC_PROV_TY_2=' ';
IF FIRST.D_HC_PROV_TY_3_GROUP_KEY THEN HC_PROV_TY_3=' ';
IF FIRST.D_HC_PROV_TY_3_GROUP_KEY THEN HC_PROV_TY_4=' ';
HC_PROV_TY_ALL=CATX(' | ',HC_PROV_TY_ALL,VALUE); 
IF LENGTHN(TRIM(HC_PROV_TY_1))=0 THEN  HC_PROV_TY_1=VALUE;
ELSE IF LENGTHN(TRIM(HC_PROV_TY_2))=0 THEN  HC_PROV_TY_2=VALUE;
ELSE IF LENGTHN(TRIM(HC_PROV_TY_3))=0 THEN  HC_PROV_TY_3=VALUE;
ELSE IF LENGTHN(TRIM(HC_PROV_TY_4))=0 THEN  HC_PROV_TY_4=VALUE;
IF LAST.D_HC_PROV_TY_3_GROUP_KEY; 
IF LENGTHN(COMPRESS(HC_PROV_TY_4))>0  THEN HC_PROV_TY_GT3_IND='TRUE';
ELSE HC_PROV_TY_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_MOVED_WHERE as select * from nbs_rdb.D_MOVED_WHERE order by D_MOVED_WHERE_GROUP_KEY, value;
quit;
DATA MOVED_WHERE_OUT; 
LENGTH MOVED_WHERE_ALL $2000;
LENGTH MOVED_WHERE_1 $50;
LENGTH MOVED_WHERE_2 $50;
LENGTH MOVED_WHERE_3 $50;
LENGTH MOVED_WHERE_4 $50;
LENGTH MOVED_WHERE_GT3_IND $10;
SET D_MOVED_WHERE; BY  D_MOVED_WHERE_GROUP_KEY; 

RETAIN MOVED_WHERE_ALL;
RETAIN MOVED_WHERE_1;
RETAIN MOVED_WHERE_2;
RETAIN MOVED_WHERE_3;
IF FIRST.D_MOVED_WHERE_GROUP_KEY THEN MOVED_WHERE_ALL=' ';
IF FIRST.D_MOVED_WHERE_GROUP_KEY THEN MOVED_WHERE_1=' ';
IF FIRST.D_MOVED_WHERE_GROUP_KEY THEN MOVED_WHERE_2=' ';
IF FIRST.D_MOVED_WHERE_GROUP_KEY THEN MOVED_WHERE_3=' ';
IF FIRST.D_MOVED_WHERE_GROUP_KEY THEN MOVED_WHERE_4=' ';
MOVED_WHERE_ALL=CATX(' | ',MOVED_WHERE_ALL,VALUE); 
IF LENGTHN(TRIM(MOVED_WHERE_1))=0 THEN  MOVED_WHERE_1=VALUE;
ELSE IF LENGTHN(TRIM(MOVED_WHERE_2))=0 THEN  MOVED_WHERE_2=VALUE;
ELSE IF LENGTHN(TRIM(MOVED_WHERE_3))=0 THEN  MOVED_WHERE_3=VALUE;
ELSE IF LENGTHN(TRIM(MOVED_WHERE_4))=0 THEN  MOVED_WHERE_4=VALUE;
IF LAST.D_MOVED_WHERE_GROUP_KEY; 
IF LENGTHN(COMPRESS(MOVED_WHERE_4))>0  THEN MOVED_WHERE_GT3_IND='TRUE';
ELSE MOVED_WHERE_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_OUT_OF_CNTRY as select * from nbs_rdb.D_OUT_OF_CNTRY order by D_OUT_OF_CNTRY_GROUP_KEY, value;
quit;
DATA OUT_OF_CNTRY_OUT; 
LENGTH OUT_OF_CNTRY_ALL $2000;
LENGTH OUT_OF_CNTRY_1 $50;
LENGTH OUT_OF_CNTRY_2 $50;
LENGTH OUT_OF_CNTRY_3 $50;
LENGTH OUT_OF_CNTRY_4 $50;
LENGTH OUT_OF_CNTRY_GT3_IND $10;
SET D_OUT_OF_CNTRY; BY  D_OUT_OF_CNTRY_GROUP_KEY; 

RETAIN OUT_OF_CNTRY_ALL;
RETAIN OUT_OF_CNTRY_1;
RETAIN OUT_OF_CNTRY_2;
RETAIN OUT_OF_CNTRY_3;
IF FIRST.D_OUT_OF_CNTRY_GROUP_KEY THEN OUT_OF_CNTRY_ALL=' ';
IF FIRST.D_OUT_OF_CNTRY_GROUP_KEY THEN OUT_OF_CNTRY_1=' ';
IF FIRST.D_OUT_OF_CNTRY_GROUP_KEY THEN OUT_OF_CNTRY_2=' ';
IF FIRST.D_OUT_OF_CNTRY_GROUP_KEY THEN OUT_OF_CNTRY_3=' ';
IF FIRST.D_OUT_OF_CNTRY_GROUP_KEY THEN OUT_OF_CNTRY_4=' ';
OUT_OF_CNTRY_ALL=CATX(' | ',OUT_OF_CNTRY_ALL,VALUE); 
IF LENGTHN(TRIM(OUT_OF_CNTRY_1))=0 THEN  OUT_OF_CNTRY_1=VALUE;
ELSE IF LENGTHN(TRIM(OUT_OF_CNTRY_2))=0 THEN  OUT_OF_CNTRY_2=VALUE;
ELSE IF LENGTHN(TRIM(OUT_OF_CNTRY_3))=0 THEN  OUT_OF_CNTRY_3=VALUE;
ELSE IF LENGTHN(TRIM(OUT_OF_CNTRY_4))=0 THEN  OUT_OF_CNTRY_4=VALUE;
IF LAST.D_OUT_OF_CNTRY_GROUP_KEY; 
IF LENGTHN(COMPRESS(OUT_OF_CNTRY_4))>0  THEN OUT_OF_CNTRY_GT3_IND='TRUE';
ELSE OUT_OF_CNTRY_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_MOVE_STATE as select * from nbs_rdb.D_MOVE_STATE  order by D_MOVE_STATE_GROUP_KEY, value;
quit;
DATA MOVE_STATE_OUT; 
LENGTH MOVE_STATE_ALL $2000;
LENGTH MOVE_STATE_1 $50;
LENGTH MOVE_STATE_2 $50;
LENGTH MOVE_STATE_3 $50;
LENGTH MOVE_STATE_4 $50;
LENGTH MOVE_STATE_GT3_IND $10;
SET D_MOVE_STATE; BY  D_MOVE_STATE_GROUP_KEY; 

RETAIN MOVE_STATE_ALL;
RETAIN MOVE_STATE_1;
RETAIN MOVE_STATE_2;
RETAIN MOVE_STATE_3;
IF FIRST.D_MOVE_STATE_GROUP_KEY THEN MOVE_STATE_ALL=' ';
IF FIRST.D_MOVE_STATE_GROUP_KEY THEN MOVE_STATE_1=' ';
IF FIRST.D_MOVE_STATE_GROUP_KEY THEN MOVE_STATE_2=' ';
IF FIRST.D_MOVE_STATE_GROUP_KEY THEN MOVE_STATE_3=' ';
IF FIRST.D_MOVE_STATE_GROUP_KEY THEN MOVE_STATE_4=' ';
MOVE_STATE_ALL=CATX(' | ',MOVE_STATE_ALL,VALUE); 
IF LENGTHN(TRIM(MOVE_STATE_1))=0 THEN  MOVE_STATE_1=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_STATE_2))=0 THEN  MOVE_STATE_2=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_STATE_3))=0 THEN  MOVE_STATE_3=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_STATE_4))=0 THEN  MOVE_STATE_4=VALUE;
IF LAST.D_MOVE_STATE_GROUP_KEY; 
IF LENGTHN(COMPRESS(MOVE_STATE_4))>0  THEN MOVE_STATE_GT3_IND='TRUE';
ELSE MOVE_STATE_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_MOVE_CNTRY as select * from nbs_rdb.D_MOVE_CNTRY order by D_MOVE_CNTRY_GROUP_KEY, value;
quit;
DATA MOVE_CNTRY_OUT; 
LENGTH MOVE_CNTRY_ALL $2000;
LENGTH MOVE_CNTRY_1 $50;
LENGTH MOVE_CNTRY_2 $50;
LENGTH MOVE_CNTRY_3 $50;
LENGTH MOVE_CNTRY_4 $50;
LENGTH MOVE_CNTRY_GT3_IND $10;
SET D_MOVE_CNTRY; BY  D_MOVE_CNTRY_GROUP_KEY; 

RETAIN MOVE_CNTRY_ALL;
RETAIN MOVE_CNTRY_1;
RETAIN MOVE_CNTRY_2;
RETAIN MOVE_CNTRY_3;
IF FIRST.D_MOVE_CNTRY_GROUP_KEY THEN MOVE_CNTRY_ALL=' ';
IF FIRST.D_MOVE_CNTRY_GROUP_KEY THEN MOVE_CNTRY_1=' ';
IF FIRST.D_MOVE_CNTRY_GROUP_KEY THEN MOVE_CNTRY_2=' ';
IF FIRST.D_MOVE_CNTRY_GROUP_KEY THEN MOVE_CNTRY_3=' ';
IF FIRST.D_MOVE_CNTRY_GROUP_KEY THEN MOVE_CNTRY_4=' ';
MOVE_CNTRY_ALL=CATX(' | ',MOVE_CNTRY_ALL,VALUE); 
IF LENGTHN(TRIM(MOVE_CNTRY_1))=0 THEN  MOVE_CNTRY_1=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_CNTRY_2))=0 THEN  MOVE_CNTRY_2=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_CNTRY_3))=0 THEN  MOVE_CNTRY_3=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_CNTRY_4))=0 THEN  MOVE_CNTRY_4=VALUE;
IF LAST.D_MOVE_CNTRY_GROUP_KEY; 
IF LENGTHN(COMPRESS(MOVE_CNTRY_4))>0  THEN MOVE_CNTRY_GT3_IND='TRUE';
ELSE MOVE_CNTRY_GT3_IND='FALSE';
RUN; 
proc sql;
create table D_MOVE_CNTY as select * from nbs_rdb.D_MOVE_CNTY order by D_MOVE_CNTY_GROUP_KEY, value;
quit;
PROC TRANSPOSE DATA=D_MOVE_CNTY OUT=D_MOVE_CNTY_OUT;
    BY D_MOVE_CNTY_GROUP_KEY;
	VAR VALUE;
RUN;
DATA MOVE_CNTY_OUT; 
LENGTH MOVE_CNTY_ALL $2000;
LENGTH MOVE_CNTY_1 $50;
LENGTH MOVE_CNTY_2 $50;
LENGTH MOVE_CNTY_3 $50;
LENGTH MOVE_CNTY_4 $50;
LENGTH MOVE_CNTY_GT3_IND $10;
SET D_MOVE_CNTY; BY  D_MOVE_CNTY_GROUP_KEY; 

RETAIN MOVE_CNTY_ALL;
RETAIN MOVE_CNTY_1;
RETAIN MOVE_CNTY_2;
RETAIN MOVE_CNTY_3;
IF FIRST.D_MOVE_CNTY_GROUP_KEY THEN MOVE_CNTY_ALL=' ';
IF FIRST.D_MOVE_CNTY_GROUP_KEY THEN MOVE_CNTY_1=' ';
IF FIRST.D_MOVE_CNTY_GROUP_KEY THEN MOVE_CNTY_2=' ';
IF FIRST.D_MOVE_CNTY_GROUP_KEY THEN MOVE_CNTY_3=' ';
IF FIRST.D_MOVE_CNTY_GROUP_KEY THEN MOVE_CNTY_4=' ';
MOVE_CNTY_ALL=CATX(' | ',MOVE_CNTY_ALL,VALUE); 
IF LENGTHN(TRIM(MOVE_CNTY_1))=0 THEN  MOVE_CNTY_1=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_CNTY_2))=0 THEN  MOVE_CNTY_2=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_CNTY_3))=0 THEN  MOVE_CNTY_3=VALUE;
ELSE IF LENGTHN(TRIM(MOVE_CNTY_4))=0 THEN  MOVE_CNTY_4=VALUE;
IF LAST.D_MOVE_CNTY_GROUP_KEY; 
IF LENGTHN(COMPRESS(MOVE_CNTY_4))>0  THEN MOVE_CNTY_GT3_IND='TRUE';
ELSE MOVE_CNTY_GT3_IND='FALSE';
RUN; 
proc sql;
create table CONFIRMATION_METHOD as 
select 
confirmation_method.*, confirmation_method_group.investigation_key, confirmation_method_group.confirmation_dt from 
nbs_rdb.confirmation_method, nbs_rdb.confirmation_method_group, nbs_rdb.investigation, nbs_rdb.f_tb_pam
where 
confirmation_method_group.confirmation_method_key= confirmation_method.confirmation_method_key
and confirmation_method_group.investigation_key =investigation.investigation_key
and f_tb_pam.investigation_key=investigation.investigation_key 
and investigation.record_status_cd='ACTIVE'
order by confirmation_method_group.investigation_key;
quit;
PROC TRANSPOSE DATA=CONFIRMATION_METHOD OUT=CONFIRMATION_METHOD_BASE;
    BY investigation_key;
	COPY investigation_key confirmation_dt;
	VAR CONFIRMATION_METHOD_DESC;
RUN;
data CONFIRMATION_METHOD_BASE;
set CONFIRMATION_METHOD_BASE;
LENGTH CONFIRMATION_METHOD_ALL $3000;
CONFIRMATION_METHOD_ALL = catx(" | ", of COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,COL10,COL11,COL12,COL13);
x = index(CONFIRMATION_METHOD_ALL, ' | .');
if x > 0 then CONFIRMATION_METHOD_ALL = substr(CONFIRMATION_METHOD_ALL, 1, x);
if lengthn(CONFIRMATION_METHOD_ALL)>0 then x1 = lengthn(CONFIRMATION_METHOD_ALL);
else x1= -1;
if x= x1 then CONFIRMATION_METHOD_ALL = substr(CONFIRMATION_METHOD_ALL, 1, (x-1));
run;
DATA CONFIRMATION_METHOD_BASE;
SET CONFIRMATION_METHOD_BASE;
LENGTH CONFIRMATION_METHOD_1 $50;
LENGTH CONFIRMATION_METHOD_2 $50;
LENGTH CONFIRMATION_METHOD_3 $50;
LENGTH CONFIRMATION_METHOD_4 $50;
LENGTH CONFIRMATION_METHOD_GT3_IND $50;
if lengthn(COL1) gt 2 then CONFIRMATION_METHOD_1=COL1;
if lengthn(COL2) gt 2 then CONFIRMATION_METHOD_2=COL2;
if lengthn(COL3) gt 2 then CONFIRMATION_METHOD_3=COL3;
if lengthn(COL4) gt 2 then CONFIRMATION_METHOD_4=COL4;
if(lengthn(compress(CONFIRMATION_METHOD_4))>2) then CONFIRMATION_METHOD_GT3_IND='True';
else CONFIRMATION_METHOD_GT3_IND='False';
run;
PROC SQL;
CREATE TABLE CONFIRMATION_METHOD_OUT AS 
SELECT CONFIRMATION_METHOD_1,
CONFIRMATION_METHOD_2,
CONFIRMATION_METHOD_3,
CONFIRMATION_METHOD_GT3_IND,
CONFIRMATION_METHOD_ALL, 
CONFIRMATION_DT,
INVESTIGATION_KEY
FROM CONFIRMATION_METHOD_BASE
WHERE LENGTHN(_LABEL_)>0;
QUIT;
PROC SQL;
CREATE TABLE TB_DATAMART_init AS 
SELECT init.*,
GT_12_REAS_1, GT_12_REAS_2, GT_12_REAS_3, 
SMR_EXAM_TY_1,SMR_EXAM_TY_2,SMR_EXAM_TY_3,
ADDL_RISK_1,ADDL_RISK_2,ADDL_RISK_3,
DISEASE_SITE_1,DISEASE_SITE_2,DISEASE_SITE_3,
HC_PROV_TY_1,HC_PROV_TY_2,HC_PROV_TY_3,
MOVED_WHERE_1,MOVED_WHERE_2,MOVED_WHERE_3,
OUT_OF_CNTRY_1,OUT_OF_CNTRY_2,OUT_OF_CNTRY_3,
MOVE_STATE_1,MOVE_STATE_2,MOVE_STATE_3,
MOVE_CNTRY_1,MOVE_CNTRY_2,MOVE_CNTRY_3,
MOVE_CNTY_1,MOVE_CNTY_2,MOVE_CNTY_3,
GT_12_REAS_GT3_IND,
SMR_EXAM_TY_GT3_IND,
ADDL_RISK_GT3_IND,
DISEASE_SITE_GT3_IND,
HC_PROV_TY_GT3_IND,
MOVED_WHERE_GT3_IND,
OUT_OF_CNTRY_GT3_IND,
MOVE_STATE_GT3_IND,
MOVE_CNTRY_GT3_IND,
MOVE_CNTY_GT3_IND,
OUT_OF_CNTRY_ALL, DISEASE_SITE_ALL, 
SMR_EXAM_TY_ALL, ADDL_RISK_ALL, MOVE_CNTY_OUT.MOVE_CNTY_ALL,
MOVE_STATE_ALL, MOVE_CNTRY_OUT.MOVE_CNTRY_ALL, GT_12_REAS_ALL, 
HC_PROV_TY_ALL, MOVED_WHERE_ALL,
CONFIRMATION_METHOD_1,
CONFIRMATION_METHOD_2,
CONFIRMATION_METHOD_3,
CONFIRMATION_METHOD_GT3_IND,
CONFIRMATION_METHOD_ALL,
CONFIRMATION_DT as CONFIRMATION_DATE 'CONFIRMATION_DATE'
FROM INIT 
LEFT OUTER JOIN GT_12_REAS_OUT
ON INIT.D_GT_12_REAS_GROUP_KEY=GT_12_REAS_OUT.D_GT_12_REAS_GROUP_KEY 

LEFT OUTER JOIN SMR_EXAM_TY_OUT
ON INIT.D_SMR_EXAM_TY_GROUP_KEY=SMR_EXAM_TY_OUT.D_SMR_EXAM_TY_GROUP_KEY 

LEFT OUTER JOIN ADDL_RISK_OUT
ON INIT.D_ADDL_RISK_GROUP_KEY=ADDL_RISK_OUT.D_ADDL_RISK_GROUP_KEY 

LEFT OUTER JOIN DISEASE_SITE_OUT
ON INIT.D_DISEASE_SITE_GROUP_KEY=DISEASE_SITE_OUT.D_DISEASE_SITE_GROUP_KEY 

LEFT OUTER JOIN HC_PROV_TY_3_OUT
ON INIT.D_HC_PROV_TY_3_GROUP_KEY=HC_PROV_TY_3_OUT.D_HC_PROV_TY_3_GROUP_KEY 

LEFT OUTER JOIN MOVED_WHERE_OUT
ON INIT.D_MOVED_WHERE_GROUP_KEY=MOVED_WHERE_OUT.D_MOVED_WHERE_GROUP_KEY 

LEFT OUTER JOIN OUT_OF_CNTRY_OUT
ON INIT.D_OUT_OF_CNTRY_GROUP_KEY=OUT_OF_CNTRY_OUT.D_OUT_OF_CNTRY_GROUP_KEY 

LEFT OUTER JOIN MOVE_STATE_OUT
ON INIT.D_MOVE_STATE_GROUP_KEY=MOVE_STATE_OUT.D_MOVE_STATE_GROUP_KEY 

LEFT OUTER JOIN MOVE_CNTRY_OUT
ON INIT.D_MOVE_CNTRY_GROUP_KEY=MOVE_CNTRY_OUT.D_MOVE_CNTRY_GROUP_KEY 

LEFT OUTER JOIN MOVE_CNTY_OUT
ON INIT.D_MOVE_CNTY_GROUP_KEY=MOVE_CNTY_OUT.D_MOVE_CNTY_GROUP_KEY
LEFT OUTER JOIN CONFIRMATION_METHOD_OUT
ON INIT.INVESTIGATION_KEY=CONFIRMATION_METHOD_OUT.INVESTIGATION_KEY;
QUIT;

proc sql;
create table TB_DATAMART_not_event as 
select *,RDB_DATE.date_mm_dd_yyyy  as notification_sent_date ,notifUser.first_nm as notif_first_nm, notifUser.last_nm as notif_last_nm,
createUser.first_nm as createUser_first_nm, createUser.last_nm as createUser_last_nm,
editUser.first_nm as editUser_first_nm, editUser.last_nm as editUser_last_nm
from TB_DATAMART_init  left outer join nbs_rdb.notification_event
on TB_DATAMART_init.person_key= notification_event.patient_key
left outer join nbs_rdb.notification
on notification_event.notification_key= notification.notification_key
left outer join nbs_rdb.RDB_DATE
on notification_event.NOTIFICATION_SENT_DT_KEY= RDB_DATE.DATE_key
left outer join nbs_rdb.user_profile notifUser
on notification.notification_submitted_by=notifUser.NEDSS_ENTRY_ID
left outer join nbs_rdb.user_profile createUser
on TB_DATAMART_init.INVESTIGATION_CREATED_BY=createUser.NEDSS_ENTRY_ID
left outer join nbs_rdb.user_profile editUser
on TB_DATAMART_init.INVESTIGATION_LAST_UPDTD_BY=editUser.NEDSS_ENTRY_ID;
quit;
data TB_DATAMART_not_event;
set TB_DATAMART_not_event;
drop  INVESTIGATION_CREATED_BY;
drop INVESTIGATION_LAST_UPDTD_BY;
run;
data TB_DATAMART_not_event;
set TB_DATAMART_not_event;
if lengthn(trim(notif_first_nm))> 0 and lengthn(trim(notif_last_nm))>0  then Notification_Submitter = trim(notif_last_nm)|| ',' ||trim(notif_first_nm);
else if lengthn(trim(notif_last_nm))>0 then Notification_Submitter = trim(notif_last_nm);
else if lengthn(trim(notif_first_nm))>0 then Notification_Submitter = trim(notif_first_nm);
if lengthn(trim(createUser_first_nm))> 0 and lengthn(trim(createUser_last_nm))>0  then INVESTIGATION_CREATED_BY = trim(createUser_last_nm)|| ',' ||trim(createUser_first_nm);
else if lengthn(trim(createUser_last_nm))>0 then INVESTIGATION_CREATED_BY = trim(createUser_last_nm);
else if lengthn(trim(createUser_first_nm))>0 then INVESTIGATION_CREATED_BY= trim(createUser_first_nm);
if lengthn(trim(editUser_first_nm))> 0 and lengthn(trim(editUser_last_nm))>0  then INVESTIGATION_LAST_UPDTD_BY = trim(editUser_last_nm)|| ',' ||trim(editUser_first_nm);
else if lengthn(trim(editUser_last_nm))>0 then INVESTIGATION_LAST_UPDTD_BY = trim(editUser_last_nm);
else if lengthn(trim(editUser_first_nm))>0 then INVESTIGATION_LAST_UPDTD_BY = trim(editUser_first_nm);
run;
proc sql;
create table TB_DATAMART AS
select 	* 	from TB_DATAMART_not_event where investigation_key >0;
quit;
%dbload (TB_DATAMART, TB_DATAMART);
