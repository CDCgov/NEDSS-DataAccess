OPTIONS SORTPGM=BEST;
OPTIONS COMPRESS=YES;

PROC SQL NOPRINT;
	CREATE TABLE MORBKEYS AS 
	SELECT MORB_RPT_KEY, MORB_RPT_UID FROM NBS_RDB.MORBIDITY_REPORT 
	WHERE MORB_RPT_KEY <> 1 AND RECORD_STATUS_CD='ACTIVE';

CREATE TABLE MORB_PATIENT0 AS
	SELECT  
		MR.MORB_RPT_KEY AS MORBIDITY_REPORT_KEY, 
		MRE.PATIENT_KEY AS PERSON_KEY,
		MR.MORB_RPT_LOCAL_ID AS MORBIDITY_REPORT_LOCAL_ID, 
		MR.JURISDICTION_NM AS JURISDICTION_NAME, 
		MR.MORB_RPT_TYPE, 
		MR.MORB_RPT_DELIVERY_METHOD, 
		MR.PH_RECEIVE_DT AS  PH_RECEIVE_DT, 
		MR.DIAGNOSIS_DT AS  DIAGNOSIS_DATE, 
		MR.HSPTL_ADMISSION_DT AS  HOSPITAL_ADMIN_DATE, 
		MR.NURSING_HOME_ASSOCIATE_IND, 
		MR.HEALTHCARE_ORG_ASSOCIATE_IND, 
		MR.SUSPECT_FOOD_WTRBORNE_ILLNESS, 
		MR.MORB_RPT_OTHER_SPECIFY AS  OTHER_EPI, 
		MR.MORB_RPT_OID AS  PROGRAM_JURISDICTION_OID, 
		MR.DIE_FROM_ILLNESS_IND,
		MR.HOSPITALIZED_IND,
		MR.PREGNANT_IND,
		MR.FOOD_HANDLER_IND,
		MR.DAYCARE_IND,
		MR.MORB_RPT_COMMENTS AS  MORB_RPT_COMMENTS,
		MR.ELECTRONIC_IND AS  ELECTRONIC_IND_CD,	
		MRE.MORB_RPT_DT_KEY, 
		MRE.ILLNESS_ONSET_DT_KEY, 
		MRE.HSPTL_DISCHARGE_DT_KEY, 
		MRE.CONDITION_KEY,
		EM.PROG_AREA_DESC_TXT AS PROGRAM_AREA_DESCRIPTION, 
		EM.ADD_TIME AS MORB_REPORT_CREATE_DATE,
		EM.ADD_USER_ID,
		EM.LAST_CHG_TIME AS MORB_REPORT_LAST_UPDATED_DATE, 
		EM.LAST_CHG_USER_ID,
		P.PATIENT_LOCAL_ID AS  PATIENT_LOCAL_ID, 
		P.PATIENT_GENERAL_COMMENTS AS  PATIENT_GENERAL_COMMENTS, 
		P.PATIENT_DOB AS  PATIENT_DOB, 
		P.PATIENT_AGE_REPORTED AS  AGE_REPORTED 'AGE_REPORTED', 
		P.PATIENT_AGE_REPORTED_UNIT AS AGE_REPORTED_UNIT 'AGE_REPORTED_UNIT', 
		P.PATIENT_CURRENT_SEX AS PATIENT_CURRENT_SEX 'PATIENT_CURRENT_SEX',
		P.PATIENT_DECEASED_INDICATOR AS PATIENT_DECEASED_INDICATOR 'PATIENT_DECEASED_INDICATOR', 
		P.PATIENT_DECEASED_DATE AS  PATIENT_DECEASED_DATE 'PATIENT_DECEASED_DATE', 
		P.PATIENT_MARITAL_STATUS AS PATIENT_MARITAL_STATUS 'PATIENT_MARITAL_STATUS', 
		P.PATIENT_SSN AS  PATIENT_SSN, 
		P.PATIENT_ETHNICITY AS PATIENT_ETHNICITY 'PATIENT_ETHNICITY', 
		P.PATIENT_FIRST_NAME AS  PATIENT_FIRST_NAME 'PATIENT_FIRST_NAME', 
		P.PATIENT_MIDDLE_NAME AS  PATIENT_MIDDLE_NAME 'PATIENT_MIDDLE_NAME', 
		P.PATIENT_LAST_NAME AS  PATIENT_LAST_NAME 'PATIENT_LAST_NAME', 
		P.PATIENT_NAME_SUFFIX AS PATIENT_NAME_SUFFIX 'PATIENT_NAME_SUFFIX',
		P.PATIENT_STREET_ADDRESS_1 AS PATIENT_STREET_ADDRESS_1 'PATIENT_STREET_ADDRESS_1',
		P.PATIENT_STREET_ADDRESS_2 AS PATIENT_STREET_ADDRESS_2 'PATIENT_STREET_ADDRESS_2',
		P.PATIENT_CITY AS PATIENT_CITY 'PATIENT_CITY',
		P.PATIENT_STATE AS PATIENT_STATE 'PATIENT_STATE',
		P.PATIENT_ZIP AS PATIENT_ZIP 'PATIENT_ZIP',
		P.PATIENT_COUNTY AS PATIENT_COUNTY 'PATIENT_COUNTY',
		P.PATIENT_COUNTRY AS PATIENT_COUNTRY 'PATIENT_COUNTRY',	
		P.PATIENT_PHONE_HOME AS   PATIENT_PHONE_NUMBER_HOME 'PATIENT_PHONE_NUMBER_HOME',
		P.PATIENT_PHONE_EXT_HOME AS  PATIENT_PHONE_EXT_HOME 'PATIENT_PHONE_EXT_HOME',
		P.PATIENT_PHONE_WORK AS PATIENT_PHONE_NUMBER_WORK 'PATIENT_PHONE_NUMBER_WORK',
		P.PATIENT_PHONE_EXT_WORK AS PATIENT_PHONE_EXT_WORK 'PATIENT_PHONE_EXT_WORK',
		P.PATIENT_RACE_CALCULATED AS RACE_CALCULATED 'RACE_CALCULATED',
		P.PATIENT_RACE_CALC_DETAILS AS RACE_CALCULATED_DETAILS 'RACE_CALCULATED_DETAILS'

	FROM nbs_rdb.MORBIDITY_REPORT MR INNER JOIN nbs_rdb.MORBIDITY_REPORT_EVENT MRE ON MR.MORB_RPT_KEY = MRE.MORB_RPT_KEY INNER JOIN
	nbs_rdb.D_PATIENT P ON MRE.PATIENT_KEY = P.PATIENT_KEY INNER JOIN
	nbs_rdb.EVENT_METRIC EM ON MR.MORB_RPT_UID = EM.EVENT_UID
	WHERE MR.MORB_RPT_KEY <> 1 AND MR.RECORD_STATUS_CD='ACTIVE'
	ORDER BY MR.MORB_RPT_KEY;
QUIT;

/* LOOKUP THE MORB_RPT_DT_KEY, ILLNESS_ONSET_DT_KEY, HSPTL_DISCHARGE_DT_KEY AGAINST RDB_DATE AND RETRIEVE THE ACTUAL DATES  */
DATA RDBDATE(INDEX = (DATE_KEY) KEEP=DATE_MM_DD_YYYY DATE_KEY);
	SET NBS_RDB.RDB_DATE;
RUN;
PROC SQL;
CREATE TABLE MORB_PATIENT AS
	SELECT A.*, B.CONDITION_DESC AS CONDITION_NAME 'CONDITION_NAME'
	FROM MORB_PATIENT0 A INNER JOIN NBS_RDB.CONDITION B ON A.CONDITION_KEY = B.CONDITION_KEY;
QUIT;
PROC SQL;
	CREATE TABLE LOOKUP1 AS
		SELECT A.*, B.DATE_MM_DD_YYYY AS MORBIDITY_REPORT_DATE 'MORBIDITY_REPORT_DATE'
		FROM MORB_PATIENT A INNER JOIN RDBDATE B ON A.MORB_RPT_DT_KEY = B.DATE_KEY;
QUIT;
PROC SQL;
	CREATE TABLE LOOKUP2 AS
		SELECT A.*, B.DATE_MM_DD_YYYY AS ILLNESS_ONSET_DATE 'ILLNESS_ONSET_DATE'
		FROM LOOKUP1 A INNER JOIN RDBDATE B ON A.ILLNESS_ONSET_DT_KEY = B.DATE_KEY;
QUIT;
PROC SQL;
	CREATE TABLE LOOKUP3 AS
		SELECT A.*, B.DATE_MM_DD_YYYY AS HOSPITAL_DISCHARGE_DATE 'HOSPITAL_DISCHARGE_DATE'
		FROM LOOKUP2 A INNER JOIN RDBDATE B ON A.HSPTL_DISCHARGE_DT_KEY = B.DATE_KEY;
QUIT;

DATA MORB_PATIENT(DROP=MORB_RPT_DT_KEY ILLNESS_ONSET_DT_KEY HSPTL_DISCHARGE_DT_KEY);
	SET LOOKUP3;
RUN;
/* TRANSLATE CODES TO DESCRIPTIONS BY AN SRT LOOKUP */
PROC SQL NOPRINT;
	CREATE TABLE SRTLOOKUP AS SELECT CODE, CODE_DESC_TXT,CODE_SET_NM,CODE_SHORT_DESC_TXT 
	FROM NBS_SRT.CODE_VALUE_GENERAL 
	WHERE CODE_SET_NM IN('MORB_RPT_TYPE','MRB_RPT_METH','P_NM_SFX','AGE_UNIT','YNU');
QUIT;
DATA SRTLOOKUP(INDEX = (CODE));
	SET SRTLOOKUP;
RUN;

PROC SQL NOPRINT;
	CREATE TABLE DESC_FOR_CODES AS
		SELECT A.*, 
		B.CODE_DESC_TXT AS MORBIDITY_REPORT_TYPE 'MORBIDITY_REPORT_TYPE',
		C.CODE_SHORT_DESC_TXT AS DELIVERY_METHOD 'DELIVERY_METHOD',
		E.CODE_DESC_TXT AS DIE_FROM_ILLNESS 'DIE_FROM_ILLNESS',
		F.CODE_DESC_TXT AS HOSPITALIZED 'HOSPITALIZED',
		G.CODE_DESC_TXT AS PREGNANT 'PREGNANT',
		H.CODE_DESC_TXT AS FOOD_HANDLER 'FOOD_HANDLER',
		I.CODE_DESC_TXT AS DAYCARE 'DAYCARE',
		J.CODE_DESC_TXT AS NURSING_HOME 'NURSING_HOME',
		K.CODE_DESC_TXT AS HEALTHCARE_ORGANIZATION 'HEALTHCARE_ORGANIZATION',
		L.CODE_DESC_TXT AS FOOD_WATERBORNE_ILLNESS 'FOOD_WATERBORNE_ILLNESS'
		FROM MORB_PATIENT A 
		LEFT OUTER JOIN SRTLOOKUP B ON A.MORB_RPT_TYPE = B.CODE AND B.CODE_SET_NM='MORB_RPT_TYPE'
		LEFT OUTER JOIN SRTLOOKUP C ON A.MORB_RPT_DELIVERY_METHOD = C.CODE AND C.CODE_SET_NM='MRB_RPT_METH'
		LEFT OUTER JOIN SRTLOOKUP E ON A.DIE_FROM_ILLNESS_IND = E.CODE AND E.CODE_SET_NM='YNU'
		LEFT OUTER JOIN SRTLOOKUP F ON A.HOSPITALIZED_IND = F.CODE AND F.CODE_SET_NM='YNU'
		LEFT OUTER JOIN SRTLOOKUP G ON A.PREGNANT_IND = G.CODE AND G.CODE_SET_NM='YNU'
		LEFT OUTER JOIN SRTLOOKUP H ON A.FOOD_HANDLER_IND = H.CODE AND H.CODE_SET_NM='YNU'
		LEFT OUTER JOIN SRTLOOKUP I ON A.DAYCARE_IND = I.CODE AND I.CODE_SET_NM='YNU'
		LEFT OUTER JOIN SRTLOOKUP J ON A.NURSING_HOME_ASSOCIATE_IND = J.CODE AND J.CODE_SET_NM='YNU'
		LEFT OUTER JOIN SRTLOOKUP K ON A.HEALTHCARE_ORG_ASSOCIATE_IND = K.CODE AND K.CODE_SET_NM='YNU'
		LEFT OUTER JOIN SRTLOOKUP L ON A.SUSPECT_FOOD_WTRBORNE_ILLNESS = L.CODE AND L.CODE_SET_NM='YNU';
QUIT;
DATA MORB_ROOT(DROP=CONDITION_KEY MORB_RPT_TYPE MORB_RPT_DELIVERY_METHOD DIE_FROM_ILLNESS_IND HOSPITALIZED_IND PREGNANT_IND FOOD_HANDLER_IND DAYCARE_IND NURSING_HOME_ASSOCIATE_IND HEALTHCARE_ORG_ASSOCIATE_IND 
		SUSPECT_FOOD_WTRBORNE_ILLNESS AGE_REPORT_UNIT_CD PERSON_CURR_GENDER PATIENT_DECEASED_IND MARITAL_STATUS PATIENT_HISPANIC_IND);
	SET DESC_FOR_CODES;
RUN;
PROC SORT DATA=MORB_ROOT; BY MORBIDITY_REPORT_KEY; RUN;
proc datasets memtype=DATA;
	DELETE MORB_PATIENT0;DELETE MORB_PATIENT; 
	DELETE DESC_FOR_CODES; DELETE SRTLOOKUP;
run;
/* JOIN MORBIDITY_REPORT, EVENT_METRIC AND INVESTIGATION TABLES */
PROC SQL NOPRINT;
	CREATE TABLE ASSOCIATED_INVS AS
		SELECT 	M.MORB_RPT_KEY AS MORBIDITY_REPORT_KEY,
				I.INVESTIGATION_KEY AS INVESTIGATION_KEY, 
				I.INV_CASE_STATUS AS CASE_STATUS
		FROM  MORBKEYS M INNER JOIN NBS_RDB.MORBIDITY_REPORT_EVENT MRE ON M.MORB_RPT_KEY = MRE.MORB_RPT_KEY 
		INNER JOIN NBS_RDB.INVESTIGATION I ON MRE.INVESTIGATION_KEY = I.INVESTIGATION_KEY
		WHERE I.INVESTIGATION_KEY <> 1
		ORDER BY M.MORB_RPT_KEY;
QUIT;

DATA ASSOCIATED_INVS1; 
    MERGE MORB_ROOT ASSOCIATED_INVS; 
    BY MORBIDITY_REPORT_KEY; 
RUN; 

DATA STEP2;
	SET ASSOCIATED_INVS1;
	BY MORBIDITY_REPORT_KEY;
	IF INVESTIGATION_KEY ~=. THEN INVESTIGATION_CREATED_IND = 'Yes';
	IF INVESTIGATION_KEY =. THEN INVESTIGATION_CREATED_IND = 'No';
RUN;

proc datasets memtype=DATA;
	DELETE ASSOCIATED_INVS; DELETE ASSOCIATED_INVS1; DELETE PATIENT_HOME_PH; DELETE PATIENT_TELE_INFO; DELETE PATIENT_WORK_PH; DELETE PAT_TELE_LOC_INFO; DELETE PAT_LOC_RACE;
run;
PROC SQL NOPRINT;
/* PROVIDER's Information*/
	CREATE TABLE PROVIDER_INFO AS 
		SELECT MRE.MORB_RPT_KEY AS MORBIDITY_REPORT_KEY,
		P.PROVIDER_LAST_NAME AS PROVIDER_LAST_NAME 'PROVIDER_LAST_NAME', 
		P.PROVIDER_FIRST_NAME AS PROVIDER_FIRST_NAME 'PROVIDER_FIRST_NAME',  
		P.PROVIDER_STREET_ADDRESS_1 AS PROVIDER_STREET_ADDR_1 'PROVIDER_STREET_ADDR_1', 
		P.PROVIDER_STREET_ADDRESS_2 AS PROVIDER_STREET_ADDR_2 'PROVIDER_STREET_ADDR_2', 
		P.PROVIDER_CITY AS PROVIDER_CITY 'PROVIDER_CITY', 
		P.PROVIDER_STATE AS PROVIDER_STATE 'PROVIDER_STATE', 
		P.PROVIDER_ZIP AS PROVIDER_ZIP 'PROVIDER_ZIP',
		P.PROVIDER_PHONE_WORK AS PROVIDER_PHONE 'PROVIDER_PHONE',
		P.PROVIDER_PHONE_EXT_WORK  AS PROVIDER_PHONE_EXT 'PROVIDER_PHONE_EXT'
		FROM NBS_RDB.MORBIDITY_REPORT_EVENT AS MRE LEFT OUTER JOIN NBS_RDB.D_PROVIDER AS P
		ON P.PROVIDER_KEY = MRE.PHYSICIAN_KEY
		WHERE (MRE.MORB_RPT_KEY <> 1) AND (MRE.RECORD_STATUS_CD = 'ACTIVE') ;

/* REPORTER's Information*/
	CREATE TABLE REPORTER_INFO AS 
		SELECT MRE.MORB_RPT_KEY AS MORBIDITY_REPORT_KEY,
		P.PROVIDER_LAST_NAME AS REPORTER_LAST_NAME 'REPORTER_LAST_NAME', 
		P.PROVIDER_FIRST_NAME AS REPORTER_FIRST_NAME 'REPORTER_FIRST_NAME',  
		P.PROVIDER_STREET_ADDRESS_1 AS REPORTER_STREET_ADDR_1 'REPORTER_STREET_ADDR_1', 
		P.PROVIDER_STREET_ADDRESS_2 AS REPORTER_STREET_ADDR_2 'REPORTER_STREET_ADDR_2', 
		P.PROVIDER_CITY AS REPORTER_CITY 'REPORTER_CITY', 
		P.PROVIDER_STATE AS REPORTER_STATE 'REPORTER_STATE', 
		P.PROVIDER_ZIP AS REPORTER_ZIP 'REPORTER_ZIP',
		P.PROVIDER_PHONE_WORK AS REPORTER_PHONE 'REPORTER_PHONE',
		P.PROVIDER_PHONE_EXT_WORK AS REPORTER_PHONE_EXT 'REPORTER_PHONE_EXT'
		FROM NBS_RDB.MORBIDITY_REPORT_EVENT AS MRE LEFT OUTER JOIN NBS_RDB.D_PROVIDER AS P
		ON P.PROVIDER_KEY = MRE.REPORTER_KEY 
		WHERE (MRE.MORB_RPT_KEY <> 1) AND (MRE.RECORD_STATUS_CD = 'ACTIVE')  ;
QUIT;
PROC SORT DATA=PROVIDER_INFO;
	BY MORBIDITY_REPORT_KEY;
RUN;
PROC SORT DATA=REPORTER_INFO;
	BY MORBIDITY_REPORT_KEY;
RUN;
/* REPORTING FACILITY's Information */
PROC SQL;
	CREATE TABLE REPORTING_FACILITY_INFO AS
		SELECT MRE.MORB_RPT_KEY AS MORBIDITY_REPORT_KEY,
		O.ORGANIZATION_UID AS REPORTING_FACILITY_UID 'REPORTING_FACILITY_UID',
		O.ORGANIZATION_NAME AS REPORT_FAC_NAME 'REPORT_FAC_NAME', 
		O.ORGANIZATION_STREET_ADDRESS_1 AS REPORT_FAC_STREET_ADDR_1 'REPORT_FAC_STREET_ADDR_1', 
		O.ORGANIZATION_STREET_ADDRESS_2 AS REPORT_FAC_STREET_ADDR_2 'REPORT_FAC_STREET_ADDR_2', 
		O.ORGANIZATION_CITY AS REPORT_FAC_CITY 'REPORT_FAC_CITY', 
		O.ORGANIZATION_STATE AS REPORT_FAC_STATE 'REPORT_FAC_STATE', 
		O.ORGANIZATION_ZIP AS REPORT_FAC_ZIP 'REPORT_FAC_ZIP',
		O.ORGANIZATION_PHONE_WORK AS REPORT_FAC_PHONE 'REPORT_FAC_PHONE',
		O.ORGANIZATION_PHONE_EXT_WORK AS REPORT_FAC_PHONE_EXT 'REPORT_FAC_PHONE_EXT'
		FROM NBS_RDB.MORBIDITY_REPORT_EVENT MRE INNER JOIN NBS_RDB.D_ORGANIZATION O ON MRE.MORB_RPT_SRC_ORG_KEY = O.ORGANIZATION_KEY 
		WHERE  MRE.MORB_RPT_KEY <> 1 AND MRE.RECORD_STATUS_CD='ACTIVE' ORDER BY MRE.MORB_RPT_KEY;

/* HOSPITAL's Information (HSPTL_KEY) */
	CREATE TABLE HOSPITAL_INFO AS
		SELECT MRE.MORB_RPT_KEY AS MORBIDITY_REPORT_KEY,
		O.ORGANIZATION_NAME AS HOSPITAL_FAC_NAME 'HOSPITAL_FAC_NAME', 
		O.ORGANIZATION_STREET_ADDRESS_1 AS HOSPITAL_FAC_STREET_ADDR_1 'HOSPITAL_FAC_STREET_ADDR_1', 
		O.ORGANIZATION_STREET_ADDRESS_2 AS HOSPITAL_FAC_STREET_ADDR_2 'HOSPITAL_FAC_STREET_ADDR_2', 
		O.ORGANIZATION_CITY AS HOSPITAL_FAC_CITY 'HOSPITAL_FAC_CITY', 
		O.ORGANIZATION_STATE AS HOSPITAL_FAC_STATE 'HOSPITAL_FAC_STATE', 
		O.ORGANIZATION_ZIP  AS HOSPITAL_FAC_ZIP 'HOSPITAL_FAC_ZIP',
		O.ORGANIZATION_PHONE_WORK AS HOSPITAL_FAC_PHONE 'HOSPITAL_FAC_PHONE',
		O.ORGANIZATION_PHONE_EXT_WORK AS HOSPITAL_FAC_PHONE_EXT 'HOSPITAL_FAC_PHONE_EXT'     
		FROM NBS_RDB.MORBIDITY_REPORT_EVENT MRE  INNER JOIN NBS_RDB.D_ORGANIZATION O ON O.ORGANIZATION_KEY = MRE.HSPTL_KEY
		WHERE MRE.MORB_RPT_KEY <> 1 AND MRE.HSPTL_KEY <> 1  AND MRE.RECORD_STATUS_CD='ACTIVE'
		ORDER BY MRE.MORB_RPT_KEY;
QUIT;
/* MERGE WITH PROVIDER, REPORTER, REP FACILITY & HOSPITAL */
DATA STEP3; 
    MERGE STEP2 PROVIDER_INFO REPORTER_INFO REPORTING_FACILITY_INFO HOSPITAL_INFO; 
    BY MORBIDITY_REPORT_KEY; 
RUN; 

proc datasets memtype=DATA;
   DELETE STEP2; DELETE PROVIDER_INFO; DELETE REPORTER_INFO; DELETE REPORTING_FACILITY_INFO; DELETE HOSPITAL_INFO; 
run;

/* ***** ONLY 3 LABRESULTS ASSOCIATED TO MORB WILL BE PIVOTED, IF MORE THAN 3, LAB_GT3_CREATED_IND WILL BE POPULATED WITH 'YES', OTHERWISE 'NO' */
/* Retrieve LabTest LocalIDs(inturn used to retrieve resultedTests) associated with MorbKeys */
PROC SQL NOPRINT;
	CREATE TABLE MORB2LABKEYS AS
		SELECT M.MORB_RPT_KEY, LT.LAB_RPT_LOCAL_ID
		FROM MORBKEYS M INNER JOIN
		nbs_rdb.LAB_TEST_RESULT LTR ON M.MORB_RPT_KEY = LTR.MORB_RPT_KEY INNER JOIN
		nbs_rdb.LAB_TEST LT ON LTR.LAB_TEST_KEY = LT.LAB_TEST_KEY
		ORDER BY LT.LAB_RPT_LOCAL_ID;
QUIT;
/* initialize LAB_GT3_CREATED_IND to 'No' for all morbs  */
PROC SQL NOPRINT;
	CREATE TABLE LAB_LT3 AS
		SELECT DISTINCT MORB_RPT_KEY, 'No ' AS LAB_GT3_CREATED_IND FROM MORB2LABKEYS;
QUIT;
/* Retrieve the CLINICAL_INFORMATION(UI: Specimen Information LAB165) from the OT(existing bug) instead of RT*/
PROC SQL NOPRINT;
	CREATE TABLE SPECIMEN_INFORMATION AS
		SELECT LT.LAB_RPT_LOCAL_ID, LT.CLINICAL_INFORMATION AS SPECIMEN_SOURCE_ 'SPECIMEN_SOURCE_'
		FROM NBS_RDB.LAB_TEST LT WHERE LT.LAB_RPT_LOCAL_ID IN(SELECT LAB_RPT_LOCAL_ID FROM MORB2LABKEYS) 
		AND LT.LAB_TEST_TYPE='Order' ORDER BY LAB_TEST.LAB_RPT_LOCAL_ID;
QUIT;
DATA MORB2SPECIMENINFO;
	MERGE MORB2LABKEYS SPECIMEN_INFORMATION;
	BY LAB_RPT_LOCAL_ID;
RUN;

/* Retrieve the LabResults with a match of the LocalIds generated in the above MORB2LABKEYS table*/
PROC SQL NOPRINT;
	CREATE TABLE LABRESULTS AS
		SELECT LT.LAB_RPT_LOCAL_ID, LT.SPECIMEN_COLLECTION_DT AS SPECIMEN_COLLECTION_DATE_ 'SPECIMEN_COLLECTION_DATE_', 
		LT.LAB_TEST_CD_DESC AS RESULTED_TEST_NAME_ 'RESULTED_TEST_NAME_', 
/*		LT.CLINICAL_INFORMATION AS SPECIMEN_SOURCE_ 'SPECIMEN_SOURCE_', */
		LT.LAB_TEST_DT AS LAB_REPORT_DATE_ 'LAB_REPORT_DATE_',
		LRV.TEST_RESULT_VAL_CD_DESC AS RESULTED_TEST_RESULT_ 'RESULTED_TEST_RESULT_', 
		LRV.NUMERIC_RESULT, 
		LRV.RESULT_UNITS, 
		LRV.LAB_RESULT_TXT_VAL AS RESULTED_TEST_TEXT_RESULT_ 'RESULTED_TEST_TEXT_RESULT_', 
		LRC.LAB_RESULT_COMMENTS AS LAB_RESULT_COMMENTS_ 'LAB_RESULT_COMMENTS_'
		FROM NBS_RDB.LAB_TEST LT INNER JOIN	NBS_RDB.LAB_TEST_RESULT LTR ON LT.LAB_TEST_KEY = LTR.LAB_TEST_KEY 
		INNER JOIN NBS_RDB.LAB_RESULT_VAL LRV ON LTR.TEST_RESULT_GRP_KEY = LRV.TEST_RESULT_GRP_KEY 
		INNER JOIN NBS_RDB.LAB_RESULT_COMMENT LRC ON LTR.RESULT_COMMENT_GRP_KEY = LRC.RESULT_COMMENT_GRP_KEY
		WHERE LAB_RPT_LOCAL_ID IN(SELECT LAB_RPT_LOCAL_ID FROM MORB2LABKEYS) AND LAB_TEST_TYPE='Result'
		ORDER BY LAB_TEST.LAB_RPT_LOCAL_ID;
QUIT;
/* Concat NUMERIC_RESULT and RESULT_UNITS to RESULTED_TEST_NUMERIC_CONCAT_*/
DATA LABRESULTS(DROP=NUMERIC_RESULT RESULT_UNITS);
	SET LABRESULTS;
	RESULTED_TEST_NUMERIC_CONCAT_=TRIM(NUMERIC_RESULT)||' '||TRIM(RESULT_UNITS);
RUN;

DATA MORB2LABRESULTS;
	MERGE MORB2LABKEYS LABRESULTS;
	BY LAB_RPT_LOCAL_ID;
RUN;
PROC SORT DATA=MORB2LABRESULTS;
	BY MORB_RPT_KEY;
RUN;
PROC SORT DATA=MORB2SPECIMENINFO;
	BY MORB_RPT_KEY;
RUN;

/* Merge LabResults with Specimen Information now*/
DATA MORB2LRESULTS(DROP=LAB_RPT_LOCAL_ID);
	MERGE MORB2LABRESULTS MORB2SPECIMENINFO;
	BY MORB_RPT_KEY;
RUN;

proc datasets memtype=DATA;
	DELETE MORB2LABKEYS; DELETE SPECIMEN_INFORMATION; DELETE MORB2SPECIMENINFO; DELETE LABRESULTS; DELETE MORB2LABRESULTS;
run;

PROC SQL NOPRINT;
	INSERT INTO MORB2LRESULTS VALUES(9999999,1,'',1,'','','','','') VALUES(9999999,1,'',1,'','','','','') VALUES(9999999,1,'',1,'','','','','');
QUIT;

DATA DM_BR05;
	SET MORB2LRESULTS;
	BY MORB_RPT_KEY;
   IF FIRST.MORB_RPT_KEY THEN COUNTER=1 ; 
       ELSE COUNTER + 1; 
RUN;
/* temp step to see */
DATA LAB_GT3(KEEP=MORB_RPT_KEY LAB_GT3_CREATED_IND);
	SET DM_BR05;
	FORMAT LAB_GT3_CREATED_IND $5.;
	IF COUNTER > 3 THEN LAB_GT3_CREATED_IND='Yes';
	IF COUNTER > 3 THEN OUTPUT;
RUN;
DATA LAB_GT3;
	SET LAB_GT3;
	BY MORB_RPT_KEY;
	IF FIRST.MORB_RPT_KEY;
RUN;
DATA LAB_GT3_IND;
	MERGE LAB_LT3 LAB_GT3;
	BY MORB_RPT_KEY;
	FORMAT LAB_GT3_CREATED_IND $5.;
RUN;
DATA DM_BR05;
	SET DM_BR05;
	IF COUNTER <= 3 THEN OUTPUT;
RUN;

PROC TRANSPOSE DATA=DM_BR05 OUT= DM_BR05_T;
    BY MORB_RPT_KEY COUNTER;
	VAR SPECIMEN_COLLECTION_DATE_ RESULTED_TEST_NAME_ LAB_REPORT_DATE_ RESULTED_TEST_RESULT_ RESULTED_TEST_TEXT_RESULT_ LAB_RESULT_COMMENTS_ RESULTED_TEST_NUMERIC_CONCAT_ SPECIMEN_SOURCE_;
RUN;

DATA DM_BR05_T;                                     
   SET DM_BR05_T;                                   
   IDVAR=CATS(_NAME_,COUNTER);
RUN;        

PROC TRANSPOSE DATA=DM_BR05_T                       
                OUT=DM_BR05_T(DROP=_NAME_);         
   VAR COL1;                                   
   ID IDVAR;        
   BY MORB_RPT_KEY;
RUN; 
PROC SQL NOPRINT;
	DELETE FROM DM_BR05_T WHERE MORB_RPT_KEY=9999999;
RUN;
DATA DM_BR05_T(RENAME=(MORB_RPT_KEY=MORBIDITY_REPORT_KEY));
	MERGE DM_BR05_T LAB_GT3_IND;
	BY MORB_RPT_KEY;
RUN;
proc datasets memtype=DATA;
	DELETE LAB_GT3; DELETE LAB_GT3_IND; DELETE LAB_LT3; DELETE MORB2LRESULTS; DELETE DM_BR05;
run;
DATA STEP4;
	MERGE STEP3 DM_BR05_T;
	BY MORBIDITY_REPORT_KEY;
RUN;
DATA STEP4;
	SET STEP4;
	IF LAB_GT3_CREATED_IND='' THEN LAB_GT3_CREATED_IND='No';
RUN;
PROC DATASETS MEMTYPE=DATA;
	DELETE STEP3; DELETE DM_BR05_T;
RUN;

/* ***** ONLY 3 TREATMENTS ASSOCIATED TO MORB WILL BE PIVOTED, IF MORE THAN 3, TREATMENT_GT3_CREATED_IND WILL BE POPULATED WITH 'YES', OTHERWISE 'NO' */
/* Retrieve Treatments Associated to the Morbidity Report */
PROC SQL NOPRINT;
	CREATE TABLE MORB2TREATMENT AS
		SELECT M.MORB_RPT_KEY, 
		RD.DATE_MM_DD_YYYY AS TREATMENT_DATE_ 'TREATMENT_DATE_',
		T.TREATMENT_NM AS TREATMENT_NAME_ 'TREATMENT_NAME_', 
		T.TREATMENT_COMMENTS AS TREATMENT_COMMENTS_ 'TREATMENT_COMMENTS_', 
		T.CUSTOM_TREATMENT AS TREATMENT_CUSTOM_NAME_ 'TREATMENT_CUSTOM_NAME_'
		FROM NBS_RDB.TREATMENT_EVENT TE INNER JOIN MORBKEYS M ON TE.MORB_RPT_KEY = M.MORB_RPT_KEY 
		INNER JOIN NBS_RDB.TREATMENT T ON TE.TREATMENT_KEY = T.TREATMENT_KEY 
		INNER JOIN NBS_RDB.RDB_DATE RD ON TE.TREATMENT_DT_KEY = RD.DATE_KEY
		ORDER BY M.MORB_RPT_KEY, T.TREATMENT_KEY;
QUIT;
/* initialize TREATMENT_GT3_CREATED_IND to 'No' for all morbs  */
PROC SQL NOPRINT;
	CREATE TABLE TRT_LT3 AS
		SELECT DISTINCT MORB_RPT_KEY, 'No ' AS TREATMENT_GT3_CREATED_IND FROM MORB2TREATMENT;
QUIT;
PROC SQL NOPRINT;
	INSERT INTO MORB2TREATMENT VALUES(9999999,1,'','','') VALUES(9999999,1,'','','') VALUES(9999999,1,'','','');
QUIT;

DATA DM_BR05_TRT;
	SET MORB2TREATMENT;
	BY MORB_RPT_KEY;
   	IF FIRST.MORB_RPT_KEY THEN COUNTER=1 ; 
    	ELSE COUNTER + 1; 
RUN;
/* temp step to see */
DATA TRT_GT3(KEEP=MORB_RPT_KEY TREATMENT_GT3_CREATED_IND);
	SET DM_BR05_TRT;
	FORMAT TREATMENT_GT3_CREATED_IND $5.;
	IF COUNTER > 3 THEN TREATMENT_GT3_CREATED_IND='Yes';
	IF COUNTER > 3 THEN OUTPUT;
RUN;
DATA TRT_GT3;
	SET TRT_GT3;
	BY MORB_RPT_KEY;
	IF FIRST.MORB_RPT_KEY;
RUN;
DATA TRT_GT3_IND;
	MERGE TRT_LT3 TRT_GT3;
	BY MORB_RPT_KEY;
	FORMAT TREATMENT_GT3_CREATED_IND $5.;
RUN;
DATA DM_BR05_TRT;
	SET DM_BR05_TRT;
	IF COUNTER <= 3 THEN OUTPUT;
RUN;

PROC TRANSPOSE DATA=DM_BR05_TRT OUT= DM_BR05T_TRT;
    BY MORB_RPT_KEY COUNTER;
	VAR TREATMENT_DATE_ TREATMENT_NAME_ TREATMENT_COMMENTS_ TREATMENT_CUSTOM_NAME_;
RUN;

DATA DM_BR05T_TRT;                                     
   SET DM_BR05T_TRT;                                   
   IDVAR=CATS(_NAME_,COUNTER);
RUN;        

PROC TRANSPOSE DATA=DM_BR05T_TRT
                OUT=DM_BR05T_TRT(DROP=_NAME_);         
   VAR COL1;                                   
   ID IDVAR;        
   BY MORB_RPT_KEY;
RUN; 
PROC SQL NOPRINT;
	DELETE FROM DM_BR05T_TRT WHERE MORB_RPT_KEY=9999999;
RUN;
DATA DM_BR05T_TRT(RENAME=(MORB_RPT_KEY=MORBIDITY_REPORT_KEY));
	MERGE DM_BR05T_TRT TRT_GT3_IND;
	BY MORB_RPT_KEY;
RUN;
proc datasets memtype=DATA;
	DELETE TRT_GT3; DELETE TRT_GT3_IND; DELETE TRT_LT3; DELETE MORB2TREATMENT; DELETE DM_BR05_TRT;
run;
DATA STEP5;
	MERGE STEP4 DM_BR05T_TRT;
	BY MORBIDITY_REPORT_KEY;
RUN;
DATA STEP5;
	SET STEP5;
	IF TREATMENT_GT3_CREATED_IND='' THEN TREATMENT_GT3_CREATED_IND='No';
RUN;
proc datasets memtype=DATA;
	DELETE STEP4; DELETE DM_BR05T_TRT;
run;
/* CONVERT STRINGS TO DATES (THOSE THAT GOT MODIFIED WHILE TRANSPOSED */
DATA FINAL_MORB01;
	SET STEP5;
	FORMAT SPECIMEN_COLLECTION_DATE_1D SPECIMEN_COLLECTION_DATE_2D SPECIMEN_COLLECTION_DATE_3D LAB_REPORT_DATE_1D LAB_REPORT_DATE_2D LAB_REPORT_DATE_3D TREATMENT_DATE_1D TREATMENT_DATE_2D TREATMENT_DATE_3D DATETIME.;
	SPECIMEN_COLLECTION_DATE_1D = INPUT(LEFT(TRIM(SPECIMEN_COLLECTION_DATE_1)),DATETIME.);
	SPECIMEN_COLLECTION_DATE_2D = INPUT(LEFT(TRIM(SPECIMEN_COLLECTION_DATE_2)),DATETIME.);
	SPECIMEN_COLLECTION_DATE_3D = INPUT(LEFT(TRIM(SPECIMEN_COLLECTION_DATE_3)),DATETIME.);
	LAB_REPORT_DATE_1D = INPUT(LEFT(TRIM(LAB_REPORT_DATE_1)),DATETIME.);
	LAB_REPORT_DATE_2D = INPUT(LEFT(TRIM(LAB_REPORT_DATE_2)),DATETIME.);
	LAB_REPORT_DATE_3D = INPUT(LEFT(TRIM(LAB_REPORT_DATE_3)),DATETIME.);
	TREATMENT_DATE_1D = INPUT(LEFT(TRIM(TREATMENT_DATE_1)),DATETIME.);
	TREATMENT_DATE_2D = INPUT(LEFT(TRIM(TREATMENT_DATE_2)),DATETIME.);
	TREATMENT_DATE_3D = INPUT(LEFT(TRIM(TREATMENT_DATE_3)),DATETIME.);
RUN;
DATA FINAL_MORB02(DROP=SPECIMEN_COLLECTION_DATE_1 SPECIMEN_COLLECTION_DATE_2 SPECIMEN_COLLECTION_DATE_3 LAB_REPORT_DATE_1 LAB_REPORT_DATE_2 LAB_REPORT_DATE_3 TREATMENT_DATE_1 TREATMENT_DATE_2 TREATMENT_DATE_3);
	SET FINAL_MORB01;
RUN;
/* Retrieve UserNames from UserIds*/
PROC SQL NOPRINT;
	CREATE TABLE FM02 AS
	SELECT MP.*, LEFT(TRIM(U.FIRST_NM))||' '|| LEFT(TRIM(U.LAST_NM)) AS MORB_REPORT_CREATED_BY
	FROM FINAL_MORB02 MP LEFT OUTER JOIN NBS_RDB.USER_PROFILE U ON MP.ADD_USER_ID = U.NEDSS_ENTRY_ID;

	CREATE TABLE FM03 AS
	SELECT MP.*, LEFT(TRIM(U.FIRST_NM))||' '|| LEFT(TRIM(U.LAST_NM)) AS MORB_REPORT_LAST_UPDATED_BY
	FROM FM02 MP LEFT OUTER JOIN NBS_RDB.USER_PROFILE U ON MP.LAST_CHG_USER_ID = U.NEDSS_ENTRY_ID;
QUIT;

DATA FM03(DROP=ADD_USER_ID LAST_CHG_USER_ID);
	SET FM03;
RUN;
/* ELECTRONIC_IND ALSO COMPRISES EXTERNAL, SO IF ELECTRONIC_IND='E' DECODE TO EXTERNAL_IND='YES' ANY OTHER VALUE DECODE TO EXTERNAL_IND='NO'*/
DATA FM04;
	SET FM03;
	IF ELECTRONIC_IND_CD = 'E' THEN EXTERNAL_IND = 'Yes';
	IF ELECTRONIC_IND_CD ~='E' THEN EXTERNAL_IND = 'No';
RUN;

DATA FINAL_MORB(RENAME=(SPECIMEN_COLLECTION_DATE_1D=SPECIMEN_COLLECTION_DATE_1 SPECIMEN_COLLECTION_DATE_2D=SPECIMEN_COLLECTION_DATE_2 SPECIMEN_COLLECTION_DATE_3D=SPECIMEN_COLLECTION_DATE_3
	LAB_REPORT_DATE_1D=LAB_REPORT_DATE_1 LAB_REPORT_DATE_2D=LAB_REPORT_DATE_2 LAB_REPORT_DATE_3D=LAB_REPORT_DATE_3
	TREATMENT_DATE_1D=TREATMENT_DATE_1 TREATMENT_DATE_2D=TREATMENT_DATE_2 TREATMENT_DATE_3D=TREATMENT_DATE_3));
	SET FM04;
RUN;
proc datasets memtype=DATA;
	DELETE MORBKEYS; DELETE STEP5; DELETE FINAL_MORB01; DELETE FINAL_MORB02; DELETE FM02; DELETE FM03; DELETE FM04;
run;

PROC SQL NOPRINT;
CREATE TABLE RDBDATA.MORBIDITY_REPORT_DATAMART AS
SELECT
	MORBIDITY_REPORT_KEY,
	MORBIDITY_REPORT_LOCAL_ID,
	PATIENT_LOCAL_ID,
	PATIENT_GENERAL_COMMENTS,
	PATIENT_FIRST_NAME,
	PATIENT_MIDDLE_NAME,
	PATIENT_LAST_NAME,
	PATIENT_NAME_SUFFIX,
	PATIENT_STREET_ADDRESS_1,
	PATIENT_STREET_ADDRESS_2,
	PATIENT_CITY,
	PATIENT_STATE,
	PATIENT_ZIP,
	PATIENT_COUNTY,
	PATIENT_COUNTRY,
	PATIENT_PHONE_NUMBER_HOME,
	PATIENT_PHONE_EXT_HOME,
	PATIENT_PHONE_NUMBER_WORK,
	PATIENT_PHONE_EXT_WORK,
	PATIENT_DOB,
	AGE_REPORTED,
	AGE_REPORTED_UNIT,
	PATIENT_CURRENT_SEX,
	PATIENT_DECEASED_INDICATOR,
	PATIENT_DECEASED_DATE,
	PATIENT_MARITAL_STATUS,
	PATIENT_SSN,
	PATIENT_ETHNICITY,
	RACE_CALCULATED,
	RACE_CALCULATED_DETAILS,
	CONDITION_NAME,
	PROGRAM_AREA_DESCRIPTION,
	JURISDICTION_NAME,
	MORBIDITY_REPORT_TYPE,
	DELIVERY_METHOD,
	MORBIDITY_REPORT_DATE,
	PH_RECEIVE_DT,
	REPORT_FAC_NAME,
	REPORT_FAC_STREET_ADDR_1,
	REPORT_FAC_STREET_ADDR_2,
	REPORT_FAC_CITY,
	REPORT_FAC_STATE,
	REPORT_FAC_ZIP,
	REPORT_FAC_PHONE,
	REPORT_FAC_PHONE_EXT,
	PROVIDER_FIRST_NAME,
	PROVIDER_LAST_NAME,
	PROVIDER_STREET_ADDR_1,
	PROVIDER_STREET_ADDR_2,
	PROVIDER_CITY,
	PROVIDER_STATE,
	PROVIDER_ZIP,
	PROVIDER_PHONE,
	PROVIDER_PHONE_EXT,
	REPORTER_FIRST_NAME,
	REPORTER_LAST_NAME,
	REPORTER_STREET_ADDR_1,
	REPORTER_STREET_ADDR_2,
	REPORTER_CITY,
	REPORTER_STATE,
	REPORTER_ZIP,
	REPORTER_PHONE,
	REPORTER_PHONE_EXT,
	ILLNESS_ONSET_DATE,
	DIAGNOSIS_DATE,
	DIE_FROM_ILLNESS,
	HOSPITALIZED,
	HOSPITAL_ADMIN_DATE,
	HOSPITAL_DISCHARGE_DATE,
	HOSPITAL_FAC_NAME,
	HOSPITAL_FAC_STREET_ADDR_1,
	HOSPITAL_FAC_STREET_ADDR_2,
	HOSPITAL_FAC_CITY,
	HOSPITAL_FAC_STATE,
	HOSPITAL_FAC_ZIP,
	HOSPITAL_FAC_PHONE,
	HOSPITAL_FAC_PHONE_EXT,
	PREGNANT,
	FOOD_HANDLER,
	DAYCARE,
	NURSING_HOME,
	HEALTHCARE_ORGANIZATION,
	FOOD_WATERBORNE_ILLNESS,
	OTHER_EPI,
	SPECIMEN_COLLECTION_DATE_1,
	LAB_REPORT_DATE_1,
	RESULTED_TEST_NAME_1,
	SPECIMEN_SOURCE_1,
	RESULTED_TEST_RESULT_1,
	RESULTED_TEST_NUMERIC_CONCAT_1,
	RESULTED_TEST_TEXT_RESULT_1,
	LAB_RESULT_COMMENTS_1,
	SPECIMEN_COLLECTION_DATE_2,
	LAB_REPORT_DATE_2,
	RESULTED_TEST_NAME_2,
	SPECIMEN_SOURCE_2,
	RESULTED_TEST_RESULT_2,
	RESULTED_TEST_NUMERIC_CONCAT_2,
	RESULTED_TEST_TEXT_RESULT_2,
	LAB_RESULT_COMMENTS_2,
	SPECIMEN_COLLECTION_DATE_3,
	LAB_REPORT_DATE_3,
	RESULTED_TEST_NAME_3,
	SPECIMEN_SOURCE_3,
	RESULTED_TEST_RESULT_3,
	RESULTED_TEST_NUMERIC_CONCAT_3,
	RESULTED_TEST_TEXT_RESULT_3,
	LAB_RESULT_COMMENTS_3,
	LAB_GT3_CREATED_IND,
	TREATMENT_DATE_1,
	TREATMENT_NAME_1,
	TREATMENT_COMMENTS_1,
	TREATMENT_CUSTOM_NAME_1,
	TREATMENT_DATE_2,
	TREATMENT_NAME_2,
	TREATMENT_COMMENTS_2,
	TREATMENT_CUSTOM_NAME_2,
	TREATMENT_DATE_3,
	TREATMENT_NAME_3,
	TREATMENT_COMMENTS_3,
	TREATMENT_CUSTOM_NAME_3,
	TREATMENT_GT3_CREATED_IND,
	MORB_RPT_COMMENTS,
	INVESTIGATION_KEY,
	INVESTIGATION_CREATED_IND,
	CASE_STATUS,
	REPORTING_FACILITY_UID,
	PROGRAM_JURISDICTION_OID,
	MORB_REPORT_CREATE_DATE,
	MORB_REPORT_CREATED_BY,
	MORB_REPORT_LAST_UPDATED_DATE,
	MORB_REPORT_LAST_UPDATED_BY,
	EXTERNAL_IND	
	FROM FINAL_MORB
	ORDER BY MORB_REPORT_CREATE_DATE;
QUIT;

%dbload (MORBIDITY_REPORT_DATAMART, RDBDATA.MORBIDITY_REPORT_DATAMART);
QUIT;

PROC DATASETS LIB=WORK MEMTYPE=DATA
	KILL;
RUN;
quit;
