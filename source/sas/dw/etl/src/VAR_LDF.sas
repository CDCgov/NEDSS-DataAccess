%macro VAR_LDF;
PROC SQL;
DROP TABLE NBS_RDB.VAR_PAM_LDF;
create table LDF_BASE as 
select DATAMART_COLUMN_NM, NBS_Case_Answer.ANSWER_TXT, NBS_Case_Answer.ACT_UID LENGTH =8 AS VAR_PAM_UID  'VAR_PAM_UID', 
NBS_Case_Answer.ADD_USER_ID, NBS_QUESTION.CODE_SET_GROUP_ID, 
NBS_Case_Answer.ADD_TIME, NBS_Case_Answer.LAST_CHG_USER_ID, NBS_Case_Answer.LAST_CHG_TIME 
FROM NBS_ODS.NBS_QUESTION   LEFT OUTER JOIN NBS_ODS.NBS_Case_Answer ON
nbs_question.nbs_question_uid=NBS_Case_Answer.nbs_question_uid
left outer join nbs_ods.nbs_UI_Metadata on 
nbs_question.nbs_question_uid=nbs_UI_Metadata.nbs_question_uid
where ldf_status_cd in ('LDF_UPDATE', 'LDF_CREATE', 'LDF_PROCESSED')
and nbs_UI_Metadata.investigation_form_cd ='INV_FORM_VAR'
and nbs_UI_Metadata.record_status_cd in ('Active', 'Inactive');
QUIT;
PROC SQL;
CREATE TABLE LDF_BASE_CODED  AS 
	SELECT TB.*, a.CODE_SET_GROUP_ID, a.code_set_nm, class_cd 
	FROM LDF_BASE TB LEFT OUTER JOIN
	nbs_srt.codeset_group_metadata A ON
	A.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID
	 left outer join nbs_srt.codeset b on
	a.code_set_nm= b.code_set_nm;
QUIT;
PROC SQL;
CREATE TABLE LDF_BASE_CODED_TRANSLATED AS 
	SELECT 	DATAMART_COLUMN_NM, ANSWER_TXT,  VAR_PAM_UID, 
			VAR.ADD_USER_ID, VAR.ADD_TIME, VAR.LAST_CHG_USER_ID, VAR.LAST_CHG_TIME, 
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time, VAR.CODE_SET_NM, VAR.CLASS_CD
	FROM	LDF_BASE_CODED VAR
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=VAR.CODE_SET_NM
			AND CVG.CODE=VAR.ANSWER_TXT
			AND VAR.CLASS_CD='code_value_general'
			/*WHERE VAR.CODE_SET_NM NOT IN ('PSL_CNTRY','PHVS_STATE_CCD_ALPH','STATE_CCD')*/
	ORDER BY VAR_PAM_UID, answer_txt;
QUIT;
data LDF_BASE_CODED_TRANSLATED;
set LDF_BASE_CODED_TRANSLATED;
if lengthn(CODE_SHORT_DESC_TXT)>0 then answer_txt= CODE_SHORT_DESC_TXT;
else answer_txt= answer_txt;
run;
PROC SQL;
CREATE TABLE LDF_BASE_CLINICAL_TRANSLATED AS 
	SELECT 	DATAMART_COLUMN_NM, ANSWER_TXT,  VAR_PAM_UID, 
			ADD_USER_ID, ADD_TIME, LAST_CHG_USER_ID, LAST_CHG_TIME, 
			VAR.CODE,CVG.CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time, VAR.CODE_SET_NM, VAR.CLASS_CD
	FROM	LDF_BASE_CODED_TRANSLATED VAR
			LEFT JOIN NBS_SRT.CODE_VALUE_CLINICAL CVG
			ON CVG.CODE_SET_NM=VAR.CODE_SET_NM
			AND CVG.CODE=VAR.ANSWER_TXT
			AND VAR.CLASS_CD='code_value_clinical'
	ORDER BY VAR_PAM_UID, answer_txt;
QUIT;
data LDF_BASE_CLINICAL_TRANSLATED;
set LDF_BASE_CLINICAL_TRANSLATED;
if lengthn(CODE_SHORT_DESC_TXT)>0 then answer_txt= CODE_SHORT_DESC_TXT;
else answer_txt= answer_txt;
run;
PROC SQL;
CREATE TABLE LDF_BASE_STATE_TRANSLATED AS 
	SELECT 	DATAMART_COLUMN_NM, ANSWER_TXT,  VAR_PAM_UID, 
			ADD_USER_ID, ADD_TIME, LAST_CHG_USER_ID, LAST_CHG_TIME, 
			VAR.CODE,CVG.CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time, VAR.CODE_SET_NM, VAR.CLASS_CD
	FROM	LDF_BASE_CLINICAL_TRANSLATED VAR
			LEFT OUTER JOIN NBS_SRT.V_STATE_CODE CVG
			ON CVG.CODE_SET_NM=VAR.CODE_SET_NM
			AND CVG.STATE_CD=VAR.ANSWER_TXT
			AND VAR.CLASS_CD IN ('STATE_CCD', 'V_state_code')
			ORDER BY VAR_PAM_UID, answer_txt;
QUIT;
data  LDF_BASE_STATE_TRANSLATED;
set  LDF_BASE_STATE_TRANSLATED;
if lengthn(CODE_SHORT_DESC_TXT)>0 then answer_txt= CODE_SHORT_DESC_TXT;
else answer_txt= answer_txt;
run;
PROC SQL;
CREATE TABLE LDF_BASE_COUNTRY_TRANSLATED AS 
	SELECT 	DATAMART_COLUMN_NM, ANSWER_TXT,  VAR_PAM_UID, 
			ADD_USER_ID, ADD_TIME, LAST_CHG_USER_ID, LAST_CHG_TIME, 
			VAR.CODE, CVG.CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time,VAR.CODE_SET_NM, VAR.CLASS_CD
	FROM	LDF_BASE_STATE_TRANSLATED VAR
			LEFT JOIN NBS_SRT.COUNTRY_CODE CVG
			ON CVG.CODE_SET_NM=VAR.CODE_SET_NM
			AND CVG.CODE=VAR.ANSWER_TXT
			AND VAR.CLASS_CD IN ('COUNTRY_CODE')
			ORDER BY VAR_PAM_UID, answer_txt;
QUIT;
data LDF_BASE_COUNTRY_TRANSLATED;
set LDF_BASE_COUNTRY_TRANSLATED;
if lengthn(CODE_SHORT_DESC_TXT)>0 then answer_txt= CODE_SHORT_DESC_TXT;
else answer_txt= answer_txt;
run;
proc sort data= LDF_BASE_COUNTRY_TRANSLATED; by VAR_pam_uid datamart_column_nm; 
run;
data  LDF_BASE_COUNTRY_TRANSLATED; 
length x $4000; 
set  LDF_BASE_COUNTRY_TRANSLATED; by VAR_pam_uid datamart_column_nm; 
retain x; 
if  first.datamart_column_nm then x=' '; x=catx(' | ',x,answer_txt); 
if last.datamart_column_nm; 

if lengthn(x)>0 then answer_txt=x;
run; 
PROC TRANSPOSE DATA=  LDF_BASE_COUNTRY_TRANSLATED OUT=  LDF_TRANSLATED;
    BY VAR_PAM_UID;
	COPY ADD_TIME;
	ID DATAMART_COLUMN_NM;
	VAR ANSWER_TXT;
RUN;
PROC SQL;
CREATE TABLE LDF_BASE2 AS 
SELECT D_VAR_PAM.VAR_PAM_UID,LDF_TRANSLATED.*
FROM NBS_RDB.D_VAR_PAM left outer join  LDF_TRANSLATED on
D_VAR_PAM.VAR_PAM_UID=  LDF_TRANSLATED.VAR_PAM_UID
WHERE LENGTHN(_LABEL_)>0;
QUIT;
DATA LDF_BASE2;
SET LDF_BASE2;
DROP _NAME_;
DROP _LABEL_;
RUN;
PROC SQL;
CREATE TABLE LDF_BASE3 AS 
SELECT INVESTIGATION.INVESTIGATION_KEY,LDF_BASE2.*
FROM LDF_BASE2 left outer join NBS_RDB.INVESTIGATION 
ON LDF_BASE2.VAR_PAM_UID=INVESTIGATION.case_uid;
QUIT;
PROC SORT DATA=LDF_BASE3 nodupkey; BY INVESTIGATION_key; RUN;

PROC SQL;
CREATE TABLE NBS_RDB.VAR_PAM_LDF AS SELECT * FROM LDF_BASE3;
QUIT;
%mend VAR_LDF;
PROC SQL;
CREATE TABLE VAR_PORT_IND 
AS
select PORT_REQ_IND_CD from nbs_srt.condition_code where condition_cd ='10030';
QUIT;
DATA _null_;
  set VAR_PORT_IND;
  if PORT_REQ_IND_CD='T' then call execute('%VAR_LDF');
RUN;
