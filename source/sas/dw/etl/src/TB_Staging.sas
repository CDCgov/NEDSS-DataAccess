/*%MACRO DBLOAD (DBTABLE, DSNAME);
 PROC APPEND FORCE BASE=NBS_RDB.&DBTABLE DATA=&DSNAME;
 RUN;
 QUIT; 
%MEND DBLOAD;
%macro assign_key (ds, key);
 data &ds;
  retain &key 1;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_key;
%macro assign_additional_key (ds, key);
 data &ds;
  retain &key 1;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_key;

%macro assign_key2 (ds, key);
 data &ds;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_key;
PROC SQL;
CREATE TABLE ACTIVITY_LOG_MASTER_LAST 
(ACTIVITY_LOG_MASTER_UID NUM,
START_DATE DATE, 
START_DATE2 DATE,
START_DATEINIT DATE,
COUNT NUM
);

INSERT INTO ACTIVITY_LOG_MASTER_LAST( ACTIVITY_LOG_MASTER_UID, START_DATE,START_DATEINIT, START_DATE2) VALUES 
(1 , '01jun1900'd,'01jun1900'd, NULL);

UPDATE ACTIVITY_LOG_MASTER_LAST SET COUNT= (SELECT COUNT(*) from NBS_RDB.D_TB_PAM);

UPDATE ACTIVITY_LOG_MASTER_LAST SET START_DATE2= (SELECT START_DATE from NBS_RDB.ACTIVITY_LOG_MASTER 
where ACTIVITY_LOG_MASTER_UID= select MAX(ACTIVITY_LOG_MASTER_UID)
FROM NBS_RDB.ACTIVITY_LOG_MASTER);
CREATE TABLE ACTIVITY_LOG_MASTER  
(ACTIVITY_LOG_MASTER_UID NUM,
START_DATE DATE, 
END_DATE DATE);

CREATE TABLE ACTIVITY_LOG_MASTER
(ACTIVITY_LOG_MASTER_UID NUM,
START_DATE DATE, 
END_DATE DATE
);
INSERT INTO ACTIVITY_LOG_MASTER( ACTIVITY_LOG_MASTER_UID, START_DATE, END_DATE) VALUES 
(1 , null, NULL);
UPDATE ACTIVITY_LOG_MASTER SET ACTIVITY_LOG_MASTER_UID= (SELECT MAX(ACTIVITY_LOG_MASTER_UID)
FROM NBS_RDB.ACTIVITY_LOG_MASTER),
START_DATE =DATETIME();

CREATE TABLE ACTIVITY_LOG_DETAIL  
	(ACTIVITY_LOG_DETAIL_UID NUMERIC,
	PROCESS_UID NUMERIC ,
	SOURCE_ROW_COUNT NUMERIC ,
	SOURCE_ROW_COUNT_EXISTING NUMERIC ,
	SOURCE_ROW_COUNT_NEW NUMERIC ,
	DESTINATION_ROW_COUNT NUMERIC ,
	START_DATE DATE,
	END_DATE DATE,
	ACTIVITY_LOG_MASTER_UID NUMERIC);
INSERT INTO ACTIVITY_LOG_DETAIL( ACTIVITY_LOG_DETAIL_UID, PROCESS_UID,SOURCE_ROW_COUNT, DESTINATION_ROW_COUNT,
START_DATE,END_DATE, ACTIVITY_LOG_MASTER_UID) VALUES (1 , 1, NULL, NULL, NULL, NULL, NULL);
QUIT;
DATA ACTIVITY_LOG_MASTER;
SET ACTIVITY_LOG_MASTER;
IF ACTIVITY_LOG_MASTER_UID > 0 THEN ACTIVITY_LOG_MASTER_UID= SUM(ACTIVITY_LOG_MASTER_UID+1);
ELSE ACTIVITY_LOG_MASTER_UID= 1;
RUN;
DATA ACTIVITY_LOG_MASTER_LAST;
SET ACTIVITY_LOG_MASTER_LAST;
if count<1 then start_date=START_DATEINIT;
else if start_date<START_DATE2 THEN start_date=start_date2;
RUN;

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET ACTIVITY_LOG_DETAIL_UID= (SELECT MAX(ACTIVITY_LOG_DETAIL_UID)
FROM NBS_RDB.ACTIVITY_LOG_DETAIL),
SOURCE_ROW_COUNT=1,
DESTINATION_ROW_COUNT=1,
END_DATE =DATETIME(),
START_DATE =DATETIME(),
ACTIVITY_LOG_MASTER_UID= (SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM ACTIVITY_LOG_MASTER);
QUIT;
%DBLOAD (ACTIVITY_LOG_MASTER, ACTIVITY_LOG_MASTER);*/
DATA ACTIVITY_LOG_MASTER_LAST;
SET RDBDATA.ACTIVITY_LOG_MASTER_LAST;
RUN;

DATA ACTIVITY_LOG_DETAIL;
SET RDBDATA.ACTIVITY_LOG_DETAIL;
RUN;

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME(),
ACTIVITY_LOG_MASTER_UID= ((SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM NBS_RDB.ACTIVITY_LOG_MASTER));
QUIT;

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

CREATE TABLE S_TB_HIV_SET AS
SELECT  CODE_SET_GROUP_ID, DATAMART_COLUMN_NM, ANSWER_TXT, ACT_UID AS TB_PAM_UID 'TB_PAM_UID',PA.LAST_CHG_TIME
FROM  NBS_ODS.NBS_QUESTION PQ
JOIN NBS_ODS.NBS_Case_Answer PA ON PQ.NBS_QUESTION_UID =PA.NBS_QUESTION_UID
WHERE PQ.nbs_question_uid in ( select nbs_question_uid from   nbs_ods.nbs_ui_metadata
where investigation_form_cd='INV_FORM_RVCT')
AND DATAMART_COLUMN_NM IS NOT NULL
/*AND PA.RECORD_STATUS_CD <> 'LOG_DEL'*/
AND DATAMART_COLUMN_NM <> 'N/A'
AND PQ.question_identifier IN('TUB154', 'TUB155','TUB156')
/*AND PA.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, DATAMART_COLUMN_NM ;
QUIT;
PROC SQL;
CREATE TABLE S_TB_HIV_CODED  AS 
	SELECT * FROM S_TB_HIV_SET TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_TB_PAM_HIV_TRANSLATED AS 
	SELECT 	S_TB_HIV_CODED.CODE_SET_GROUP_ID, TB_PAM_UID,
			ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, LAST_CHG_TIME
	FROM	S_TB_HIV_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
proc sql;
create table S_TB_PAM_HIV_TIME as select distinct TB_PAM_UID, LAST_CHG_TIME FROM S_TB_PAM_HIV_TRANSLATED;
quit;
DATA S_TB_PAM_HIV_CVG;
SET S_TB_PAM_HIV_TRANSLATED;
IF CODE_SET_GROUP_ID=''  THEN ANSWER_TXT= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN ANSWER_TXT=CODE_SHORT_DESC_TXT;
RUN;
PROC TRANSPOSE DATA=S_TB_PAM_HIV_CVG OUT=S_TB_HIV;
    BY TB_PAM_UID;
	ID DATAMART_COLUMN_NM;
	VAR ANSWER_TXT;
RUN;
PROC SQL;
CREATE TABLE S_TB_HIV AS SELECT * FROM
S_TB_PAM_HIV_TIME, S_TB_HIV WHERE 
S_TB_PAM_HIV_TIME.TB_PAM_UID=S_TB_HIV.TB_PAM_UID;
QUIT;
data S_TB_HIV;
set S_TB_HIV;
if TB_PAM_UID ~=. then output;
run;
%DBLOAD (S_TB_HIV, S_TB_HIV);

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_TB_HIV),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_TB_HIV),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_TB_HIV');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID =. THEN ACTIVITY_LOG_DETAIL_UID =1;
ADMIN_COMMENT=COMPRESS(DESTINATION_row_count) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_TB_HIV TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_TB_HIV TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();
create table S_DISEASE_SITE_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.NBS_QUESTION pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.NBS_QUESTION_uid =pa.NBS_QUESTION_uid
WHERE datamart_column_nm <> 'n/a'
and pq.question_identifier ='TUB119'

/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;

create table D_DISEASE_SITE as select * from nbs_rdb.D_DISEASE_SITE where TB_PAM_UID in (select distinct TB_PAM_UID from S_DISEASE_SITE_BASE);

delete from nbs_rdb.D_DISEASE_SITE where TB_PAM_UID in (select distinct TB_PAM_UID from D_DISEASE_SITE);
delete from nbs_rdb.L_DISEASE_SITE where TB_PAM_UID in (select distinct TB_PAM_UID from D_DISEASE_SITE);

delete from nbs_rdb.d_DISEASE_SITE_group where d_DISEASE_SITE_group_key in (
select distinct  d_DISEASE_SITE_group_key from  d_DISEASE_SITE where TB_PAM_UID in (select distinct TB_PAM_UID from D_DISEASE_SITE));


delete from nbs_rdb.S_DISEASE_SITE where TB_PAM_UID in (select distinct TB_PAM_UID from D_DISEASE_SITE);
delete from nbs_rdb.L_DISEASE_SITE where TB_PAM_UID in (select distinct TB_PAM_UID from D_DISEASE_SITE);
quit;
PROC SQL;
CREATE TABLE S_DISEASE_SITE_CODED  AS 
	SELECT * FROM S_DISEASE_SITE_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_DISEASE_SITE_CD_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_DISEASE_SITE_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_DISEASE_SITE;
SET S_DISEASE_SITE_CD_TRANSLATED;
value=ANSWER_TXT;
IF CODE_SET_GROUP_ID=''  THEN value= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_DISEASE_SITE, S_DISEASE_SITE);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_DISEASE_SITE),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_DISEASE_SITE),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_DISEASE_SITE');
QUIT;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_DISEASE_SITE TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_DISEASE_SITE TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

CREATE TABLE PHC_UIDS AS 
select public_health_case_UID LENGTH =8 AS TB_PAM_UID 'TB_PAM_UID' from nbs_ods.public_health_case where cd in (
select  condition_cd from nbs_srt.condition_code where investigation_form_cd = 'INV_FORM_RVCT'
);

CREATE TABLE S_TB_PAM_SET_BASE AS
SELECT  ACT_UID LENGTH =8 AS TB_PAM_UID 'TB_PAM_UID', CODE_SET_GROUP_ID, 
DATAMART_COLUMN_NM , ANSWER_TXT, RECORD_STATUS_CD, PA.LAST_CHG_TIME
FROM  NBS_ODS.NBS_QUESTION PQ
JOIN NBS_ODS.NBS_Case_Answer PA ON PQ.NBS_QUESTION_UID =PA.NBS_QUESTION_UID
WHERE PQ.nbs_question_uid in ( select nbs_question_uid from   nbs_ods.nbs_ui_metadata
where investigation_form_cd='INV_FORM_RVCT' and ldf_status_cd is null and nbs_question_uid is not null)
AND DATAMART_COLUMN_NM IS NOT NULL
/*AND PA.RECORD_STATUS_CD <> 'LOG_DEL'*/
AND PQ.data_location = 'NBS_Case_Answer.answer_txt'	
AND DATAMART_COLUMN_NM <> 'N/A'
AND PQ.QUESTION_IDENTIFIER NOT IN(
'TUB119', 'TUB129', 'TUB154', 'TUB155', 'TUB156', 'TUB167',  'TUB225', 'TUB228',
'TUB229', 'TUB230', 'TUB235', 'TUB237', 'TUB114')
/*AND PA.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, DATAMART_COLUMN_NM ;

CREATE TABLE S_TB_PAM_SET_INT AS 
SELECT A.TB_PAM_UID, CODE_SET_GROUP_ID, 
DATAMART_COLUMN_NM , ANSWER_TXT, RECORD_STATUS_CD, LAST_CHG_TIME
FROM PHC_UIDS a LEFT OUTER JOIN S_TB_PAM_SET_BASE B
on PHC_UIDS.TB_PAM_UID= B.TB_PAM_UID;
QUIT;
PROC SQL;
CREATE TABLE S_TB_PAM_SET AS 
	SELECT * FROM S_TB_PAM_SET_INT TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_TB_PAM_SET_TRANSLATED AS 
	SELECT 	TB_PAM_UID, TB.CODE_SET_GROUP_ID, TB.DATAMART_COLUMN_NM,
			ANSWER_TXT, TB.CODE_SET_NM, TB.RECORD_STATUS_CD, TB.LAST_CHG_TIME,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT
	FROM	S_TB_PAM_SET TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			/*AND TB.CODE_SET_NM NOT IN ('STATE_CCD','COUNTY_CCD', 'PSL_CNTRY','S_JURDIC_C', 'S_PROGRA_C') */;
QUIT;
DATA S_TB_PAM_SET_CVG;
SET S_TB_PAM_SET_TRANSLATED;
IF CODE_SET_GROUP_ID=''  AND CODE_SET_NM NOT IN ( 'STATE_CCD','COUNTY_CCD', 'PSL_CNTRY','S_JURDIC_C', 'S_PROGRA_C') 
	THEN ANSWER_TXT= ANSWER_TXT;
ELSE IF CODE_SET_NM NOT IN ( 'STATE_CCD','COUNTY_CCD', 'PSL_CNTRY','S_JURDIC_C', 'S_PROGRA_C')
and CODE_SET_GROUP_ID not IN ('77777')
THEN ANSWER_TXT= CODE_SHORT_DESC_TXT;
RUN;
PROC SQL;
CREATE TABLE S_TB_PAM_SET_CVG AS 
	SELECT 	TB_PAM_UID, CODE_SET_GROUP_ID, TB.DATAMART_COLUMN_NM,
			ANSWER_TXT, TB.CODE_SET_NM, TB.RECORD_STATUS_CD,TB.LAST_CHG_TIME,
			TB.CODE,CVG.CODE_DESC_TXT AS CODE_DESC_TXT
	FROM	S_TB_PAM_SET_CVG TB
			LEFT JOIN NBS_SRT.COUNTRY_CODE CVG
			ON CVG.CODE=TB.ANSWER_TXT
			AND TB.CODE_SET_GROUP_ID =77777;
QUIT;
DATA S_TB_PAM_SET_CVG;
SET S_TB_PAM_SET_CVG;
IF CODE_SET_GROUP_ID='77777' THEN ANSWER_TXT= CODE_DESC_TXT;
RUN;
PROC SORT DATA=S_TB_PAM_SET_CVG; BY TB_PAM_UID; RUN;
proc sql;
create table S_PAM_CHG_TIME as select distinct TB_PAM_UID, LAST_CHG_TIME FROM S_TB_PAM_SET_CVG;
quit;

PROC TRANSPOSE DATA=S_TB_PAM_SET_CVG OUT=S_TB_PAM1;
    BY TB_PAM_UID;
	ID DATAMART_COLUMN_NM;
	VAR ANSWER_TXT;
RUN;
data S_TB_PAM2;
set S_TB_PAM1;
	
LENGTH CALC_DISEASE_SITE $200;
LENGTH INIT_SUSCEPT_STREPTOMYCIN1 $200;
LENGTH INIT_SUSCEPT_OTHER_2_IND1 $200;
LENGTH INIT_SUSCEPT_RIFAMPIN1 $200;
LENGTH FINAL_SUSCEPT_OTHER_QUINOLONES1 $200;
LENGTH TST_RESULT1 $200;
LENGTH NONINJECT_DRUG_USE_PAST_YEAR1 $200;
LENGTH INIT_SUSCEPT_ISONIAZID1 $200;
LENGTH INIT_SUSCEPT_RIFABUTIN1 $200;
LENGTH INIT_SUSCEPT_MOXIFLOXACIN1 $200;
LENGTH HIV_STATUS1 $200;
LENGTH COUNT_STATUS1 $200;
LENGTH INIT_REGIMEN_CAPREOMYCIN1 $200;
LENGTH FINAL_SUSCEPT_ETHAMBUTOL1 $200;
LENGTH PRIMARY_GUARD_1_BIRTH_COUNTRY1 $200;
LENGTH FINAL_SUSCEPT_ETHIONAMIDE1 $200;
LENGTH FINAL_SUSCEPT_OTHER_2_IND1 $200;
LENGTH INIT_REGIMEN_MOXIFLOXACIN1 $200;
LENGTH STATUS_AT_DIAGNOSIS1 $200;
LENGTH IGRA_RESULT1 $200;
LENGTH CT_SCAN_MILIARY_EVIDENCE1 $200;
LENGTH INIT_REGIMEN_RIFAPENTINE1 $200;
LENGTH CHEST_XRAY_MILIARY_EVIDENCE1 $200;
LENGTH PRIMARY_REASON_EVALUATED1 $200;
LENGTH CULT_TISSUE_SITE1 $200;
LENGTH SMR_PATH_CYTO_RESULT1 $200;
LENGTH LINK_REASON_21 $200;
LENGTH PATIENT_MOVED_IND1 $200;
LENGTH CHEST_XRAY_CAVITY_EVIDENCE1 $200;
LENGTH LONGTERM_CARE_FACIL_TY1 $200;
LENGTH NO_CONV_DOC_REASON1 $200;
LENGTH FINAL_SUSCEPT_TESTING1 $200;
LENGTH PREVIOUS_DIAGNOSIS_IND1 $200;
LENGTH INIT_SUSCEPT_OFLOXACIN1 $200;
LENGTH FINAL_SUSCEPT_AMIKACIN1 $200;
LENGTH TB_CAUSE_OF_DEATH1 $200;
LENGTH FINAL_ISOLATE_IS_SPUTUM_IND1 $200;
LENGTH SMR_PATH_CYTO_SITE1 $200;
LENGTH THERAPY_STOP_CAUSE_OF_DEATH1 $200;
LENGTH INIT_REGIMEN_ETHAMBUTOL1 $200;
LENGTH FINAL_SUSCEPT_OFLOXACIN1 $200;
LENGTH INIT_REGIMEN_CYCLOSERINE1 $200;
LENGTH THERAPY_STOP_REASON1 $200;
LENGTH INIT_SUSCEPT_TESTING_DONE1 $200;
LENGTH NAA_RESULT1 $200;
LENGTH HOMELESS_IND1 $200;
LENGTH INIT_SUSCEPT_CIPROFLOXACIN1 $200;
LENGTH INIT_REGIMEN_STREPTOMYCIN1 $200;
LENGTH FINAL_SUSCEPT_OTHER_IND1 $200;
LENGTH LONGTERM_CARE_FACIL_RESIDENT1 $200;
LENGTH SPUTUM_CULTURE_CONV_DOCUMENTED1 $200;
LENGTH NAA_SPEC_NOT_SPUTUM1 $200;
LENGTH INIT_SUSCEPT_ETHIONAMIDE1 $200;
LENGTH INIT_REGIMEN_OFLOXACIN1 $200;
LENGTH IMMIGRATION_STATUS_AT_US_ENTRY1 $200;
LENGTH ISOLATE_SUBMITTED_IND1 $200;
LENGTH FINAL_SUSCEPT_PYRAZINAMIDE1 $200;
LENGTH INIT_SUSCEPT_PYRAZINAMIDE1 $200;
LENGTH INIT_REGIMEN_ETHIONAMIDE1 $200;
LENGTH INIT_SUSCEPT_CYCLOSERINE1 $200;
LENGTH FINAL_SUSCEPT_PA_SALICYLIC_ACI1 $200;
LENGTH PRIMARY_GUARD_2_BIRTH_COUNTRY1 $200;
LENGTH CT_SCAN_RESULT1 $200;
LENGTH NAA_SPEC_IS_SPUTUM_IND1 $200;
LENGTH FINAL_SUSCEPT_KANAMYCIN1 $200;
LENGTH US_BORN_IND1 $200;
LENGTH FINAL_SUSCEPT_ISONIAZID1 $200;
LENGTH INIT_REGIMEN_PYRAZINAMIDE1 $200;
LENGTH SPUTUM_CULTURE_RESULT1 $200;
LENGTH PATIENT_OUTSIDE_US_GT_2_MONTHS1 $200;
LENGTH FIRST_ISOLATE_IS_SPUTNUM_IND1 $200;
LENGTH CULT_TISSUE_RESULT_RPT_LAB_TY1 $200;
LENGTH INIT_REGIMEN_CIPROFLOXACIN1 $200;
LENGTH INIT_REGIMEN_AMIKACIN1 $200;
LENGTH INIT_SUSCEPT_OTHER_1_IND1 $200;
LENGTH INIT_SUSCEPT_OTHER_QUNINOLONES1 $200;
LENGTH FINAL_SUSCEPT_CIPROFLOXACIN1 $200;
LENGTH INIT_SUSCEPT_CAPREOMYCIN1 $200;
LENGTH INIT_SUSCEPT_LEVOFLOXACIN1 $200;
LENGTH TRANSNATIONAL_REFERRAL_IND1 $200;
LENGTH INJECT_DRUG_USE_PAST_YEAR1 $200;
LENGTH CASE_VERIFICATION1 $200;
LENGTH INIT_REGIMEN_KANAMYCIN1 $200;
LENGTH FINAL_SUSCEPT_RIFAPENTINE1 $200;
LENGTH FINAL_ISOLATE_NOT_SPUTUM1 $200;
LENGTH CORRECTIONAL_FACIL_CUSTODY_IND1 $200;
LENGTH PATIENT_MOVE_CITY1 $200;
LENGTH CORRECTIONAL_FACIL_TY1 $200;
LENGTH INIT_REGIMEN_RIFAMPIN1 $200;
LENGTH INIT_REGIMEN_PA_SALICYLIC_ACID1 $200;
LENGTH OCCUPATION_RISK1 $200;
LENGTH CULT_TISSUE_RESULT1 $200;
LENGTH INIT_SUSCEPT_PA_SALICYLIC_ACID1 $200;
LENGTH CHEST_XRAY_RESULT1 $200;
LENGTH FIRST_ISOLATE_NOT_SPUTUM1 $200;
LENGTH FINAL_SUSCEPT_CYCLOSERINE1 $200;
LENGTH SPUTUM_CULT_RPT_LAB_TY1 $200;
LENGTH FINAL_SUSCEPT_LEVOFLOXACIN1 $200;
LENGTH NAA_RPT_LAB_TY1 $200;
LENGTH COUNTRY_OF_VERIFIED_CASE1 $200;
LENGTH LINK_REASON_11 $200;
LENGTH CT_SCAN_CAVITY_EVIDENCE1 $200;
LENGTH INIT_REGIMEN_RIFABUTIN1 $200;
LENGTH INIT_SUSCEPT_RIFAPENTINE1 $200;
LENGTH INIT_REGIMEN_LEVOFLOXACIN1 $200;
LENGTH PATIENT_BIRTH_COUNTRY1 $200;
LENGTH EXCESS_ALCOHOL_USE_PAST_YEAR1 $200;
LENGTH INIT_REGIMEN_OTHER_2_IND1 $200;
LENGTH FINAL_SUSCEPT_CAPREOMYCIN1 $200;
LENGTH FINAL_SUSCEPT_RIFABUTIN1 $200;
LENGTH INIT_SUSCEPT_AMIKACIN1 $200;
LENGTH FINAL_SUSCEPT_RIFAMPIN1 $200;
LENGTH INIT_REGIMEN_OTHER_1_IND1 $200;
LENGTH FINAL_SUSCEPT_STREPTOMYCIN1 $200;
LENGTH INIT_SUSCEPT_KANAMYCIN1 $200;
LENGTH INIT_SUSCEPT_ETHAMBUTOL1 $200;
LENGTH INIT_REGIMEN_ISONIAZID1 $200;
LENGTH SPUTUM_SMEAR_RESULT1 $200;
LENGTH DOT1 $200;
LENGTH CORRECTIONAL_FACIL_RESIDENT1 $200;
LENGTH FINAL_SUSCEPT_MOXIFLOXACIN1 $200;
LENGTH THERAPY_EXTEND_GT_12_OTHER1 $200;
LENGTH LINK_STATE_CASE_NUM_21 $200;
LENGTH ISOLATE_ACCESSION_NUM1 $200;
LENGTH INIT_SUSCEPT_OTHER_11 $200;
LENGTH INIT_REGIMEN_OTHER_21 $200;
LENGTH INIT_REGIMEN_OTHER_11 $200;
LENGTH OTHER_TB_RISK_FACTORS1 $200;
LENGTH LINK_STATE_CASE_NUM_11 $200;
LENGTH NO_CONV_DOC_OTHER_REASON1 $200;
LENGTH FINAL_SUSCEPT_OTHER_21 $200;
LENGTH FINAL_SUSCEPT_OTHER1 $200;
LENGTH PATIENT_MOVE_TO_CITY_21 $200;
LENGTH HIV_CITY_CNTY_PATIENT_NUM1 $200;
LENGTH IGRA_TEST_TY1 $200;
LENGTH HIV_STATE_PATIENT_NUM1 $200;
LENGTH INIT_SUSCEPT_OTHER_21 $200;
LENGTH PROVIDER_OVERRIDE_COMMENTS1 $200;
LENGTH INIT_SUSCEPT_OTHER_2 $2000;
LENGTH  COMMENTS_FOLLOW_UP_1 $2000;
LENGTH  COMMENTS_FOLLOW_UP_2 $2000;


FINAL_ISOLATE_COLLECT_DATE1= INPUT(FINAL_ISOLATE_COLLECT_DATE, ANYDTDTM32.);
DATE_SUBMITTED1= INPUT(DATE_SUBMITTED, ANYDTDTM32.);
TST_PLACED_DATE1= INPUT(TST_PLACED_DATE, ANYDTDTM32.);
NAA_COLLECT_DATE1= INPUT(NAA_COLLECT_DATE, ANYDTDTM32.);
FIRST_ISOLATE_COLLECT_DATE1= INPUT(FIRST_ISOLATE_COLLECT_DATE, ANYDTDTM32.);
TB_SPUTUM_CULTURE_NEGATIVE_DAT1= INPUT(TB_SPUTUM_CULTURE_NEGATIVE_DAT, ANYDTDTM32.);
SMR_PATH_CYTO_COLLECT_DATE1= INPUT(SMR_PATH_CYTO_COLLECT_DATE, ANYDTDTM32.);
CULT_TISSUE_COLLECT_DATE1= INPUT(CULT_TISSUE_COLLECT_DATE, ANYDTDTM32.);
NAA_RESULT_RPT_DATE1= INPUT(NAA_RESULT_RPT_DATE, ANYDTDTM32.);
DATE_ARRIVED_IN_US1= INPUT(DATE_ARRIVED_IN_US, ANYDTDTM32.);
SPUTUM_SMEAR_COLLECT_DATE1= INPUT(SPUTUM_SMEAR_COLLECT_DATE, ANYDTDTM32.);
CULT_TISSUE_RESULT_RPT_DATE1= INPUT(CULT_TISSUE_RESULT_RPT_DATE, ANYDTDTM32.);
DATE_OF_DEATH1= INPUT(DATE_OF_DEATH, ANYDTDTM32.);
COUNT_DATE1= INPUT(COUNT_DATE, ANYDTDTM32.);
SPUTUM_CULT_COLLECT_DATE1= INPUT(SPUTUM_CULT_COLLECT_DATE, ANYDTDTM32.);
THERAPY_STOP_DATE1= INPUT(THERAPY_STOP_DATE, ANYDTDTM32.);
SPUTUM_CULT_RESULT_RPT_DATE1= INPUT(SPUTUM_CULT_RESULT_RPT_DATE, ANYDTDTM32.);
INIT_REGIMEN_START_DATE1= INPUT(INIT_REGIMEN_START_DATE, ANYDTDTM32.);
IGRA_COLLECT_DATE1= INPUT(IGRA_COLLECT_DATE, ANYDTDTM32.);

PREVIOUS_DIAGNOSIS_YEAR1= INPUT(PREVIOUS_DIAGNOSIS_YEAR, comma20.);
TST_MM_INDURATION1=input(TST_MM_INDURATION,comma20.);
DOT_NUMBER_WEEKS1=input(DOT_NUMBER_WEEKS,comma20.);
INIT_SUSCEPT_STREPTOMYCIN1 =INIT_SUSCEPT_STREPTOMYCIN;
INIT_SUSCEPT_OTHER_2_IND1 =INIT_SUSCEPT_OTHER_2_IND;
INIT_SUSCEPT_RIFAMPIN1 =INIT_SUSCEPT_RIFAMPIN;
FINAL_SUSCEPT_OTHER_QUINOLONES1 =FINAL_SUSCEPT_OTHER_QUINOLONES;
TST_RESULT1 =TST_RESULT;
NONINJECT_DRUG_USE_PAST_YEAR1 =NONINJECT_DRUG_USE_PAST_YEAR;
INIT_SUSCEPT_ISONIAZID1 =INIT_SUSCEPT_ISONIAZID;
INIT_SUSCEPT_RIFABUTIN1 =INIT_SUSCEPT_RIFABUTIN;
INIT_SUSCEPT_MOXIFLOXACIN1 =INIT_SUSCEPT_MOXIFLOXACIN;
HIV_STATUS1 =HIV_STATUS;
COUNT_STATUS1 =COUNT_STATUS;
INIT_REGIMEN_CAPREOMYCIN1 =INIT_REGIMEN_CAPREOMYCIN;
FINAL_SUSCEPT_ETHAMBUTOL1 =FINAL_SUSCEPT_ETHAMBUTOL;
PRIMARY_GUARD_1_BIRTH_COUNTRY1 =PRIMARY_GUARD_1_BIRTH_COUNTRY;
FINAL_SUSCEPT_ETHIONAMIDE1 =FINAL_SUSCEPT_ETHIONAMIDE;
FINAL_SUSCEPT_OTHER_2_IND1 =FINAL_SUSCEPT_OTHER_2_IND;
INIT_REGIMEN_MOXIFLOXACIN1 =INIT_REGIMEN_MOXIFLOXACIN;
STATUS_AT_DIAGNOSIS1 =STATUS_AT_DIAGNOSIS;
IGRA_RESULT1 =IGRA_RESULT;
CT_SCAN_MILIARY_EVIDENCE1 =CT_SCAN_MILIARY_EVIDENCE;
INIT_REGIMEN_RIFAPENTINE1 =INIT_REGIMEN_RIFAPENTINE;
CHEST_XRAY_MILIARY_EVIDENCE1 =CHEST_XRAY_MILIARY_EVIDENCE;
PRIMARY_REASON_EVALUATED1 =PRIMARY_REASON_EVALUATED;
CULT_TISSUE_SITE1 =CULT_TISSUE_SITE;
SMR_PATH_CYTO_RESULT1 =SMR_PATH_CYTO_RESULT;
LINK_REASON_21 =LINK_REASON_2;
PATIENT_MOVED_IND1 =MOVED_IND;
CHEST_XRAY_CAVITY_EVIDENCE1 =CHEST_XRAY_CAVITY_EVIDENCE;
LONGTERM_CARE_FACIL_TY1 =LONGTERM_CARE_FACIL_TY;
NO_CONV_DOC_REASON1 =NO_CONV_DOC_REASON;
FINAL_SUSCEPT_TESTING1 =FINAL_SUSCEPT_TESTING;
PREVIOUS_DIAGNOSIS_IND1 =PREVIOUS_DIAGNOSIS_IND;
INIT_SUSCEPT_OFLOXACIN1 =INIT_SUSCEPT_OFLOXACIN;
FINAL_SUSCEPT_AMIKACIN1 =FINAL_SUSCEPT_AMIKACIN;
TB_CAUSE_OF_DEATH1 =TB_CAUSE_OF_DEATH;
FINAL_ISOLATE_IS_SPUTUM_IND1 =FINAL_ISOLATE_IS_SPUTUM_IND;
SMR_PATH_CYTO_SITE1 =SMR_PATH_CYTO_SITE;
THERAPY_STOP_CAUSE_OF_DEATH1 =THERAPY_STOP_CAUSE_OF_DEATH;
INIT_REGIMEN_ETHAMBUTOL1 =INIT_REGIMEN_ETHAMBUTOL;
FINAL_SUSCEPT_OFLOXACIN1 =FINAL_SUSCEPT_OFLOXACIN;
INIT_REGIMEN_CYCLOSERINE1 =INIT_REGIMEN_CYCLOSERINE;
THERAPY_STOP_REASON1 =THERAPY_STOP_REASON;
INIT_SUSCEPT_TESTING_DONE1 =INIT_SUSCEPT_TESTING_DONE;
NAA_RESULT1 =NAA_RESULT;
HOMELESS_IND1 =HOMELESS_IND;
INIT_SUSCEPT_CIPROFLOXACIN1 =INIT_SUSCEPT_CIPROFLOXACIN;
INIT_REGIMEN_STREPTOMYCIN1 =INIT_REGIMEN_STREPTOMYCIN;
FINAL_SUSCEPT_OTHER_IND1 =FINAL_SUSCEPT_OTHER_IND;
LONGTERM_CARE_FACIL_RESIDENT1 =LONGTERM_CARE_FACIL_RESIDENT;
SPUTUM_CULTURE_CONV_DOCUMENTED1 =SPUTUM_CULTURE_CONV_DOCUMENTED;
NAA_SPEC_NOT_SPUTUM1 =NAA_SPEC_NOT_SPUTUM;
INIT_SUSCEPT_ETHIONAMIDE1 =INIT_SUSCEPT_ETHIONAMIDE;
INIT_REGIMEN_OFLOXACIN1 =INIT_REGIMEN_OFLOXACIN;
IMMIGRATION_STATUS_AT_US_ENTRY1 =IMMIGRATION_STATUS_AT_US_ENTRY;
ISOLATE_SUBMITTED_IND1 =ISOLATE_SUBMITTED_IND;
FINAL_SUSCEPT_PYRAZINAMIDE1 =FINAL_SUSCEPT_PYRAZINAMIDE;
INIT_SUSCEPT_PYRAZINAMIDE1 =INIT_SUSCEPT_PYRAZINAMIDE;
INIT_REGIMEN_ETHIONAMIDE1 =INIT_REGIMEN_ETHIONAMIDE;
INIT_SUSCEPT_CYCLOSERINE1 =INIT_SUSCEPT_CYCLOSERINE;
FINAL_SUSCEPT_PA_SALICYLIC_ACI1 =FINAL_SUSCEPT_PA_SALICYLIC_ACI;
PRIMARY_GUARD_2_BIRTH_COUNTRY1 =PRIMARY_GUARD_2_BIRTH_COUNTRY;
CT_SCAN_RESULT1 =CT_SCAN_RESULT;
NAA_SPEC_IS_SPUTUM_IND1 =NAA_SPEC_IS_SPUTUM_IND;
FINAL_SUSCEPT_KANAMYCIN1 =FINAL_SUSCEPT_KANAMYCIN;
US_BORN_IND1 =US_BORN_IND;
FINAL_SUSCEPT_ISONIAZID1 =FINAL_SUSCEPT_ISONIAZID;
INIT_REGIMEN_PYRAZINAMIDE1 =INIT_REGIMEN_PYRAZINAMIDE;
SPUTUM_CULTURE_RESULT1 =SPUTUM_CULTURE_RESULT;
PATIENT_OUTSIDE_US_GT_2_MONTHS1 =PATIENT_OUTSIDE_US_GT_2_MONTHS;
FIRST_ISOLATE_IS_SPUTNUM_IND1 =FIRST_ISOLATE_IS_SPUTUM_IND;
CULT_TISSUE_RESULT_RPT_LAB_TY1 =CULT_TISSUE_RESULT_RPT_LAB_TY;
INIT_REGIMEN_CIPROFLOXACIN1 =INIT_REGIMEN_CIPROFLOXACIN;
INIT_REGIMEN_AMIKACIN1 =INIT_REGIMEN_AMIKACIN;
INIT_SUSCEPT_OTHER_1_IND1 =INIT_SUSCEPT_OTHER_1_IND;
INIT_SUSCEPT_OTHER_QUNINOLONES1 =INIT_SUSCEPT_OTHER_QUNINOLONES;
FINAL_SUSCEPT_CIPROFLOXACIN1 =FINAL_SUSCEPT_CIPROFLOXACIN;
INIT_SUSCEPT_CAPREOMYCIN1 =INIT_SUSCEPT_CAPREOMYCIN;
INIT_SUSCEPT_LEVOFLOXACIN1 =INIT_SUSCEPT_LEVOFLOXACIN;
TRANSNATIONAL_REFERRAL_IND1 =TRANSNATIONAL_REFERRAL_IND;
INJECT_DRUG_USE_PAST_YEAR1 =INJECT_DRUG_USE_PAST_YEAR;
CASE_VERIFICATION1 =CASE_VERIFICATION;
INIT_REGIMEN_KANAMYCIN1 =INIT_REGIMEN_KANAMYCIN;
FINAL_SUSCEPT_RIFAPENTINE1 =FINAL_SUSCEPT_RIFAPENTINE;
FINAL_ISOLATE_NOT_SPUTUM1 =FINAL_ISOLATE_NOT_SPUTUM;
CORRECTIONAL_FACIL_CUSTODY_IND1 =CORRECTIONAL_FACIL_CUSTODY_IND;
PATIENT_MOVE_CITY1 =MOVE_CITY;
CORRECTIONAL_FACIL_TY1 =CORRECTIONAL_FACIL_TY;
INIT_REGIMEN_RIFAMPIN1 =INIT_REGIMEN_RIFAMPIN;
INIT_REGIMEN_PA_SALICYLIC_ACID1 =INIT_REGIMEN_PA_SALICYLIC_ACID;
OCCUPATION_RISK1 =OCCUPATION_RISK;
CULT_TISSUE_RESULT1 =CULT_TISSUE_RESULT;
INIT_SUSCEPT_PA_SALICYLIC_ACID1 =INIT_SUSCEPT_PA_SALICYLIC_ACID;
CHEST_XRAY_RESULT1 =CHEST_XRAY_RESULT;
FIRST_ISOLATE_NOT_SPUTUM1 =FIRST_ISOLATE_NOT_SPUTUM;
FINAL_SUSCEPT_CYCLOSERINE1 =FINAL_SUSCEPT_CYCLOSERINE;
SPUTUM_CULT_RPT_LAB_TY1 =SPUTUM_CULT_RPT_LAB_TY;
FINAL_SUSCEPT_LEVOFLOXACIN1 =FINAL_SUSCEPT_LEVOFLOXACIN;
NAA_RPT_LAB_TY1 =NAA_RPT_LAB_TY;
COUNTRY_OF_VERIFIED_CASE1 =COUNTRY_OF_VERIFIED_CASE;
LINK_REASON_11 =LINK_REASON_1;
CT_SCAN_CAVITY_EVIDENCE1 =CT_SCAN_CAVITY_EVIDENCE;
INIT_REGIMEN_RIFABUTIN1 =INIT_REGIMEN_RIFABUTIN;
INIT_SUSCEPT_RIFAPENTINE1 =INIT_SUSCEPT_RIFAPENTINE;
INIT_REGIMEN_LEVOFLOXACIN1 =INIT_REGIMEN_LEVOFLOXACIN;
PATIENT_BIRTH_COUNTRY1 =PATIENT_BIRTH_COUNTRY;
EXCESS_ALCOHOL_USE_PAST_YEAR1 =EXCESS_ALCOHOL_USE_PAST_YEAR;
INIT_REGIMEN_OTHER_2_IND1 =INIT_REGIMEN_OTHER_2_IND;
FINAL_SUSCEPT_CAPREOMYCIN1 =FINAL_SUSCEPT_CAPREOMYCIN;
FINAL_SUSCEPT_RIFABUTIN1 =FINAL_SUSCEPT_RIFABUTIN;
INIT_SUSCEPT_AMIKACIN1 =INIT_SUSCEPT_AMIKACIN;
FINAL_SUSCEPT_RIFAMPIN1 =FINAL_SUSCEPT_RIFAMPIN;
INIT_REGIMEN_OTHER_1_IND1 =INIT_REGIMEN_OTHER_1_IND;
FINAL_SUSCEPT_STREPTOMYCIN1 =FINAL_SUSCEPT_STREPTOMYCIN;
INIT_SUSCEPT_KANAMYCIN1 =INIT_SUSCEPT_KANAMYCIN;
INIT_SUSCEPT_ETHAMBUTOL1 =INIT_SUSCEPT_ETHAMBUTOL;
INIT_REGIMEN_ISONIAZID1 =INIT_REGIMEN_ISONIAZID;
SPUTUM_SMEAR_RESULT1 =SPUTUM_SMEAR_RESULT;
DOT1 =DOT;
CORRECTIONAL_FACIL_RESIDENT1 =CORRECTIONAL_FACIL_RESIDENT;
FINAL_SUSCEPT_MOXIFLOXACIN1 =FINAL_SUSCEPT_MOXIFLOXACIN;
THERAPY_EXTEND_GT_12_OTHER1 =THERAPY_EXTEND_GT_12_OTHER;
LINK_STATE_CASE_NUM_21 =LINK_STATE_CASE_NUM_2;
ISOLATE_ACCESSION_NUM1 =ISOLATE_ACCESSION_NUM;
INIT_SUSCEPT_OTHER_11 =INIT_SUSCEPT_OTHER_1;
INIT_REGIMEN_OTHER_21 =INIT_REGIMEN_OTHER_2;
INIT_REGIMEN_OTHER_11 =INIT_REGIMEN_OTHER_1;
OTHER_TB_RISK_FACTORS1 =OTHER_TB_RISK_FACTORS;
LINK_STATE_CASE_NUM_11 =LINK_STATE_CASE_NUM_1;
NO_CONV_DOC_OTHER_REASON1 =NO_CONV_DOC_OTHER_REASON;
FINAL_SUSCEPT_OTHER_21 =FINAL_SUSCEPT_OTHER_2;
FINAL_SUSCEPT_OTHER1 =FINAL_SUSCEPT_OTHER;
PATIENT_MOVE_TO_CITY_21 =MOVE_CITY_2;
HIV_CITY_CNTY_PATIENT_NUM1 =HIV_CITY_CNTY_PATIENT_NUM;
IGRA_TEST_TY1 =IGRA_TEST_TY;
HIV_STATE_PATIENT_NUM1 =HIV_STATE_PATIENT_NUM;
INIT_SUSCEPT_OTHER_21 =INIT_SUSCEPT_OTHER_2;
COMMENTS_FOLLOW_UP_11=COMMENTS_FOLLOW_UP_1;
COMMENTS_FOLLOW_UP_21=COMMENTS_FOLLOW_UP_2;
PROVIDER_OVERRIDE_COMMENTS1=PROVIDER_OVERRIDE_COMMENTS;
DROP INIT_SUSCEPT_STREPTOMYCIN;
DROP INIT_SUSCEPT_OTHER_2_IND;
DROP INIT_SUSCEPT_RIFAMPIN;
DROP FINAL_SUSCEPT_OTHER_QUINOLONES;
DROP TST_RESULT;
DROP NONINJECT_DRUG_USE_PAST_YEAR;
DROP INIT_SUSCEPT_ISONIAZID;
DROP INIT_SUSCEPT_RIFABUTIN;
DROP INIT_SUSCEPT_MOXIFLOXACIN;
DROP HIV_STATUS;
DROP COUNT_STATUS;
DROP INIT_REGIMEN_CAPREOMYCIN;
DROP FINAL_SUSCEPT_ETHAMBUTOL;
DROP PRIMARY_GUARD_1_BIRTH_COUNTRY;
DROP FINAL_SUSCEPT_ETHIONAMIDE;
DROP FINAL_SUSCEPT_OTHER_2_IND;
DROP INIT_REGIMEN_MOXIFLOXACIN;
DROP STATUS_AT_DIAGNOSIS;
DROP IGRA_RESULT;
DROP CT_SCAN_MILIARY_EVIDENCE;
DROP INIT_REGIMEN_RIFAPENTINE;
DROP CHEST_XRAY_MILIARY_EVIDENCE;
DROP PRIMARY_REASON_EVALUATED;
DROP CULT_TISSUE_SITE;
DROP SMR_PATH_CYTO_RESULT;
DROP LINK_REASON_2;
DROP MOVED_IND;
DROP CHEST_XRAY_CAVITY_EVIDENCE;
DROP LONGTERM_CARE_FACIL_TY;
DROP NO_CONV_DOC_REASON;
DROP FINAL_SUSCEPT_TESTING;
DROP PREVIOUS_DIAGNOSIS_IND;
DROP INIT_SUSCEPT_OFLOXACIN;
DROP FINAL_SUSCEPT_AMIKACIN;
DROP TB_CAUSE_OF_DEATH;
DROP FINAL_ISOLATE_IS_SPUTUM_IND;
DROP SMR_PATH_CYTO_SITE;
DROP THERAPY_STOP_CAUSE_OF_DEATH;
DROP INIT_REGIMEN_ETHAMBUTOL;
DROP FINAL_SUSCEPT_OFLOXACIN;
DROP INIT_REGIMEN_CYCLOSERINE;
DROP THERAPY_STOP_REASON;
DROP INIT_SUSCEPT_TESTING_DONE;
DROP NAA_RESULT;
DROP HOMELESS_IND;
DROP INIT_SUSCEPT_CIPROFLOXACIN;
DROP INIT_REGIMEN_STREPTOMYCIN;
DROP FINAL_SUSCEPT_OTHER_IND;
DROP LONGTERM_CARE_FACIL_RESIDENT;
DROP SPUTUM_CULTURE_CONV_DOCUMENTED;
DROP NAA_SPEC_NOT_SPUTUM;
DROP INIT_SUSCEPT_ETHIONAMIDE;
DROP INIT_REGIMEN_OFLOXACIN;
DROP IMMIGRATION_STATUS_AT_US_ENTRY;
DROP ISOLATE_SUBMITTED_IND;
DROP FINAL_SUSCEPT_PYRAZINAMIDE;
DROP INIT_SUSCEPT_PYRAZINAMIDE;
DROP INIT_REGIMEN_ETHIONAMIDE;
DROP INIT_SUSCEPT_CYCLOSERINE;
DROP FINAL_SUSCEPT_PA_SALICYLIC_ACI;
DROP PRIMARY_GUARD_2_BIRTH_COUNTRY;
DROP CT_SCAN_RESULT;
DROP NAA_SPEC_IS_SPUTUM_IND;
DROP FINAL_SUSCEPT_KANAMYCIN;
DROP US_BORN_IND;
DROP FINAL_SUSCEPT_ISONIAZID;
DROP INIT_REGIMEN_PYRAZINAMIDE;
DROP SPUTUM_CULTURE_RESULT;
DROP PATIENT_OUTSIDE_US_GT_2_MONTHS;
DROP FIRST_ISOLATE_IS_SPUTUM_IND;
DROP CULT_TISSUE_RESULT_RPT_LAB_TY;
DROP INIT_REGIMEN_CIPROFLOXACIN;
DROP INIT_REGIMEN_AMIKACIN;
DROP INIT_SUSCEPT_OTHER_1_IND;
DROP INIT_SUSCEPT_OTHER_QUNINOLONES;
DROP FINAL_SUSCEPT_CIPROFLOXACIN;
DROP INIT_SUSCEPT_CAPREOMYCIN;
DROP INIT_SUSCEPT_LEVOFLOXACIN;
DROP TRANSNATIONAL_REFERRAL_IND;
DROP INJECT_DRUG_USE_PAST_YEAR;
DROP CASE_VERIFICATION;
DROP INIT_REGIMEN_KANAMYCIN;
DROP FINAL_SUSCEPT_RIFAPENTINE;
DROP FINAL_ISOLATE_NOT_SPUTUM;
DROP CORRECTIONAL_FACIL_CUSTODY_IND;
DROP PATIENT_MOVE_CITY;
DROP CORRECTIONAL_FACIL_TY;
DROP INIT_REGIMEN_RIFAMPIN;
DROP INIT_REGIMEN_PA_SALICYLIC_ACID;
DROP OCCUPATION_RISK;
DROP CULT_TISSUE_RESULT;
DROP INIT_SUSCEPT_PA_SALICYLIC_ACID;
DROP CHEST_XRAY_RESULT;
DROP FIRST_ISOLATE_NOT_SPUTUM;
DROP FINAL_SUSCEPT_CYCLOSERINE;
DROP SPUTUM_CULT_RPT_LAB_TY;
DROP FINAL_SUSCEPT_LEVOFLOXACIN;
DROP NAA_RPT_LAB_TY;
DROP COUNTRY_OF_VERIFIED_CASE;
DROP LINK_REASON_1;
DROP CT_SCAN_CAVITY_EVIDENCE;
DROP INIT_REGIMEN_RIFABUTIN;
DROP INIT_SUSCEPT_RIFAPENTINE;
DROP INIT_REGIMEN_LEVOFLOXACIN;
DROP PATIENT_BIRTH_COUNTRY;
DROP EXCESS_ALCOHOL_USE_PAST_YEAR;
DROP INIT_REGIMEN_OTHER_2_IND;
DROP FINAL_SUSCEPT_CAPREOMYCIN;
DROP FINAL_SUSCEPT_RIFABUTIN;
DROP INIT_SUSCEPT_AMIKACIN;
DROP FINAL_SUSCEPT_RIFAMPIN;
DROP INIT_REGIMEN_OTHER_1_IND;
DROP FINAL_SUSCEPT_STREPTOMYCIN;
DROP INIT_SUSCEPT_KANAMYCIN;
DROP INIT_SUSCEPT_ETHAMBUTOL;
DROP INIT_REGIMEN_ISONIAZID;
DROP SPUTUM_SMEAR_RESULT;
DROP DOT;
DROP CORRECTIONAL_FACIL_RESIDENT;
DROP FINAL_SUSCEPT_MOXIFLOXACIN;
DROP THERAPY_EXTEND_GT_12_OTHER;
DROP LINK_STATE_CASE_NUM_2;
DROP ISOLATE_ACCESSION_NUM;
DROP INIT_SUSCEPT_OTHER_1;
DROP INIT_REGIMEN_OTHER_2;
DROP INIT_REGIMEN_OTHER_1;
DROP OTHER_TB_RISK_FACTORS;
DROP LINK_STATE_CASE_NUM_1;
DROP NO_CONV_DOC_OTHER_REASON;
DROP FINAL_SUSCEPT_OTHER_2;
DROP FINAL_SUSCEPT_OTHER;
DROP MOVE_CITY_2;
DROP HIV_CITY_CNTY_PATIENT_NUM;
DROP IGRA_TEST_TY;
DROP HIV_STATE_PATIENT_NUM;
DROP INIT_SUSCEPT_OTHER_2;
DROP FINAL_ISOLATE_COLLECT_DATE;
DROP DATE_SUBMITTED;
DROP TST_PLACED_DATE;
DROP NAA_COLLECT_DATE;
DROP FIRST_ISOLATE_COLLECT_DATE;
DROP TB_SPUTUM_CULTURE_NEGATIVE_DAT;
DROP SMR_PATH_CYTO_COLLECT_DATE;
DROP CULT_TISSUE_COLLECT_DATE;
DROP NAA_RESULT_RPT_DATE;
DROP DATE_ARRIVED_IN_US;
DROP SPUTUM_SMEAR_COLLECT_DATE;
DROP CULT_TISSUE_RESULT_RPT_DATE;
DROP DATE_OF_DEATH;
DROP COUNT_DATE;
DROP PREVIOUS_DIAGNOSIS_YEAR;
DROP SPUTUM_CULT_COLLECT_DATE;
DROP THERAPY_STOP_DATE;
DROP SPUTUM_CULT_RESULT_RPT_DATE;
DROP INIT_REGIMEN_START_DATE;
DROP IGRA_COLLECT_DATE;
DROP HIV_STATE_PATIENT_NUM;
DROP INIT_SUSCEPT_OTHER_2;
DROP COMMENTS_FOLLOW_UP_1;
DROP COMMENTS_FOLLOW_UP_2;
DROP PROVIDER_OVERRIDE_COMMENTS;
run;
proc sql;
create table S_TB_PAM as
select 
TB_PAM_UID,
INIT_SUSCEPT_STREPTOMYCIN1 AS INIT_SUSCEPT_STREPTOMYCIN 'INIT_SUSCEPT_STREPTOMYCIN',
INIT_SUSCEPT_OTHER_2_IND1 AS INIT_SUSCEPT_OTHER_2_IND 'INIT_SUSCEPT_OTHER_2_IND',
INIT_SUSCEPT_RIFAMPIN1 AS INIT_SUSCEPT_RIFAMPIN 'INIT_SUSCEPT_RIFAMPIN',
FINAL_SUSCEPT_OTHER_QUINOLONES1 AS FINAL_SUSCEPT_OTHER_QUINOLONES 'FINAL_SUSCEPT_OTHER_QUINOLONES',
TST_RESULT1 AS TST_RESULT 'TST_RESULT',
NONINJECT_DRUG_USE_PAST_YEAR1 AS NONINJECT_DRUG_USE_PAST_YEAR 'NONINJECT_DRUG_USE_PAST_YEAR',
INIT_SUSCEPT_ISONIAZID1 AS INIT_SUSCEPT_ISONIAZID 'INIT_SUSCEPT_ISONIAZID',
INIT_SUSCEPT_RIFABUTIN1 AS INIT_SUSCEPT_RIFABUTIN 'INIT_SUSCEPT_RIFABUTIN',
INIT_SUSCEPT_MOXIFLOXACIN1 AS INIT_SUSCEPT_MOXIFLOXACIN 'INIT_SUSCEPT_MOXIFLOXACIN',
HIV_STATUS1 AS HIV_STATUS 'HIV_STATUS',
COUNT_STATUS1 AS COUNT_STATUS 'COUNT_STATUS',
INIT_REGIMEN_CAPREOMYCIN1 AS INIT_REGIMEN_CAPREOMYCIN 'INIT_REGIMEN_CAPREOMYCIN',
FINAL_SUSCEPT_ETHAMBUTOL1 AS FINAL_SUSCEPT_ETHAMBUTOL 'FINAL_SUSCEPT_ETHAMBUTOL',
PRIMARY_GUARD_1_BIRTH_COUNTRY1 AS PRIMARY_GUARD_1_BIRTH_COUNTRY 'PRIMARY_GUARD_1_BIRTH_COUNTRY',
FINAL_SUSCEPT_ETHIONAMIDE1 AS FINAL_SUSCEPT_ETHIONAMIDE 'FINAL_SUSCEPT_ETHIONAMIDE',
FINAL_SUSCEPT_OTHER_2_IND1 AS FINAL_SUSCEPT_OTHER_2_IND 'FINAL_SUSCEPT_OTHER_2_IND',
INIT_REGIMEN_MOXIFLOXACIN1 AS INIT_REGIMEN_MOXIFLOXACIN 'INIT_REGIMEN_MOXIFLOXACIN',
STATUS_AT_DIAGNOSIS1 AS STATUS_AT_DIAGNOSIS 'STATUS_AT_DIAGNOSIS',
IGRA_RESULT1 AS IGRA_RESULT 'IGRA_RESULT',
CT_SCAN_MILIARY_EVIDENCE1 AS CT_SCAN_MILIARY_EVIDENCE 'CT_SCAN_MILIARY_EVIDENCE',
INIT_REGIMEN_RIFAPENTINE1 AS INIT_REGIMEN_RIFAPENTINE 'INIT_REGIMEN_RIFAPENTINE',
CHEST_XRAY_MILIARY_EVIDENCE1 AS CHEST_XRAY_MILIARY_EVIDENCE 'CHEST_XRAY_MILIARY_EVIDENCE',
PRIMARY_REASON_EVALUATED1 AS PRIMARY_REASON_EVALUATED 'PRIMARY_REASON_EVALUATED',
CULT_TISSUE_SITE1 AS CULT_TISSUE_SITE 'CULT_TISSUE_SITE',
SMR_PATH_CYTO_RESULT1 AS SMR_PATH_CYTO_RESULT 'SMR_PATH_CYTO_RESULT',
LINK_REASON_21 AS LINK_REASON_2 'LINK_REASON_2',
PATIENT_MOVED_IND1 AS MOVED_IND 'MOVED_IND',
CHEST_XRAY_CAVITY_EVIDENCE1 AS CHEST_XRAY_CAVITY_EVIDENCE 'CHEST_XRAY_CAVITY_EVIDENCE',
LONGTERM_CARE_FACIL_TY1 AS LONGTERM_CARE_FACIL_TY 'LONGTERM_CARE_FACIL_TY',
NO_CONV_DOC_REASON1 AS NO_CONV_DOC_REASON 'NO_CONV_DOC_REASON',
FINAL_SUSCEPT_TESTING1 AS FINAL_SUSCEPT_TESTING 'FINAL_SUSCEPT_TESTING',
PREVIOUS_DIAGNOSIS_IND1 AS PREVIOUS_DIAGNOSIS_IND 'PREVIOUS_DIAGNOSIS_IND',
INIT_SUSCEPT_OFLOXACIN1 AS INIT_SUSCEPT_OFLOXACIN 'INIT_SUSCEPT_OFLOXACIN',
FINAL_SUSCEPT_AMIKACIN1 AS FINAL_SUSCEPT_AMIKACIN 'FINAL_SUSCEPT_AMIKACIN',
TB_CAUSE_OF_DEATH1 AS TB_CAUSE_OF_DEATH 'TB_CAUSE_OF_DEATH',
FINAL_ISOLATE_IS_SPUTUM_IND1 AS FINAL_ISOLATE_IS_SPUTUM_IND 'FINAL_ISOLATE_IS_SPUTUM_IND',
SMR_PATH_CYTO_SITE1 AS SMR_PATH_CYTO_SITE 'SMR_PATH_CYTO_SITE',
THERAPY_STOP_CAUSE_OF_DEATH1 AS THERAPY_STOP_CAUSE_OF_DEATH 'THERAPY_STOP_CAUSE_OF_DEATH',
INIT_REGIMEN_ETHAMBUTOL1 AS INIT_REGIMEN_ETHAMBUTOL 'INIT_REGIMEN_ETHAMBUTOL',
FINAL_SUSCEPT_OFLOXACIN1 AS FINAL_SUSCEPT_OFLOXACIN 'FINAL_SUSCEPT_OFLOXACIN',
INIT_REGIMEN_CYCLOSERINE1 AS INIT_REGIMEN_CYCLOSERINE 'INIT_REGIMEN_CYCLOSERINE',
THERAPY_STOP_REASON1 AS THERAPY_STOP_REASON 'THERAPY_STOP_REASON',
INIT_SUSCEPT_TESTING_DONE1 AS INIT_SUSCEPT_TESTING_DONE 'INIT_SUSCEPT_TESTING_DONE',
NAA_RESULT1 AS NAA_RESULT 'NAA_RESULT',
HOMELESS_IND1 AS HOMELESS_IND 'HOMELESS_IND',
INIT_SUSCEPT_CIPROFLOXACIN1 AS INIT_SUSCEPT_CIPROFLOXACIN 'INIT_SUSCEPT_CIPROFLOXACIN',
INIT_REGIMEN_STREPTOMYCIN1 AS INIT_REGIMEN_STREPTOMYCIN 'INIT_REGIMEN_STREPTOMYCIN',
FINAL_SUSCEPT_OTHER_IND1 AS FINAL_SUSCEPT_OTHER_IND 'FINAL_SUSCEPT_OTHER_IND',
LONGTERM_CARE_FACIL_RESIDENT1 AS LONGTERM_CARE_FACIL_RESIDENT 'LONGTERM_CARE_FACIL_RESIDENT',
SPUTUM_CULTURE_CONV_DOCUMENTED1 AS SPUTUM_CULTURE_CONV_DOCUMENTED 'SPUTUM_CULTURE_CONV_DOCUMENTED',
NAA_SPEC_NOT_SPUTUM1 AS NAA_SPEC_NOT_SPUTUM 'NAA_SPEC_NOT_SPUTUM',
INIT_SUSCEPT_ETHIONAMIDE1 AS INIT_SUSCEPT_ETHIONAMIDE 'INIT_SUSCEPT_ETHIONAMIDE',
INIT_REGIMEN_OFLOXACIN1 AS INIT_REGIMEN_OFLOXACIN 'INIT_REGIMEN_OFLOXACIN',
IMMIGRATION_STATUS_AT_US_ENTRY1 AS IMMIGRATION_STATUS_AT_US_ENTRY 'IMMIGRATION_STATUS_AT_US_ENTRY',
ISOLATE_SUBMITTED_IND1 AS ISOLATE_SUBMITTED_IND 'ISOLATE_SUBMITTED_IND',
FINAL_SUSCEPT_PYRAZINAMIDE1 AS FINAL_SUSCEPT_PYRAZINAMIDE 'FINAL_SUSCEPT_PYRAZINAMIDE',
INIT_SUSCEPT_PYRAZINAMIDE1 AS INIT_SUSCEPT_PYRAZINAMIDE 'INIT_SUSCEPT_PYRAZINAMIDE',
INIT_REGIMEN_ETHIONAMIDE1 AS INIT_REGIMEN_ETHIONAMIDE 'INIT_REGIMEN_ETHIONAMIDE',
INIT_SUSCEPT_CYCLOSERINE1 AS INIT_SUSCEPT_CYCLOSERINE 'INIT_SUSCEPT_CYCLOSERINE',
FINAL_SUSCEPT_PA_SALICYLIC_ACI1 AS FINAL_SUSCEPT_PA_SALICYLIC_ACI 'FINAL_SUSCEPT_PA_SALICYLIC_ACI',
PRIMARY_GUARD_2_BIRTH_COUNTRY1 AS PRIMARY_GUARD_2_BIRTH_COUNTRY 'PRIMARY_GUARD_2_BIRTH_COUNTRY',
CT_SCAN_RESULT1 AS CT_SCAN_RESULT 'CT_SCAN_RESULT',
NAA_SPEC_IS_SPUTUM_IND1 AS NAA_SPEC_IS_SPUTUM_IND 'NAA_SPEC_IS_SPUTUM_IND',
FINAL_SUSCEPT_KANAMYCIN1 AS FINAL_SUSCEPT_KANAMYCIN 'FINAL_SUSCEPT_KANAMYCIN',
US_BORN_IND1 AS US_BORN_IND 'US_BORN_IND',
FINAL_SUSCEPT_ISONIAZID1 AS FINAL_SUSCEPT_ISONIAZID 'FINAL_SUSCEPT_ISONIAZID',
INIT_REGIMEN_PYRAZINAMIDE1 AS INIT_REGIMEN_PYRAZINAMIDE 'INIT_REGIMEN_PYRAZINAMIDE',
SPUTUM_CULTURE_RESULT1 AS SPUTUM_CULTURE_RESULT 'SPUTUM_CULTURE_RESULT',
PATIENT_OUTSIDE_US_GT_2_MONTHS1 AS PATIENT_OUTSIDE_US_GT_2_MONTHS 'PATIENT_OUTSIDE_US_GT_2_MONTHS',
FIRST_ISOLATE_IS_SPUTNUM_IND1 AS FIRST_ISOLATE_IS_SPUTUM_IND 'FIRST_ISOLATE_IS_SPUTUM_IND',
CULT_TISSUE_RESULT_RPT_LAB_TY1 AS CULT_TISSUE_RESULT_RPT_LAB_TY 'CULT_TISSUE_RESULT_RPT_LAB_TY',
INIT_REGIMEN_CIPROFLOXACIN1 AS INIT_REGIMEN_CIPROFLOXACIN 'INIT_REGIMEN_CIPROFLOXACIN',
INIT_REGIMEN_AMIKACIN1 AS INIT_REGIMEN_AMIKACIN 'INIT_REGIMEN_AMIKACIN',
INIT_SUSCEPT_OTHER_1_IND1 AS INIT_SUSCEPT_OTHER_1_IND 'INIT_SUSCEPT_OTHER_1_IND',
INIT_SUSCEPT_OTHER_QUNINOLONES1 AS INIT_SUSCEPT_OTHER_QUNINOLONES 'INIT_SUSCEPT_OTHER_QUNINOLONES',
FINAL_SUSCEPT_CIPROFLOXACIN1 AS FINAL_SUSCEPT_CIPROFLOXACIN 'FINAL_SUSCEPT_CIPROFLOXACIN',
INIT_SUSCEPT_CAPREOMYCIN1 AS INIT_SUSCEPT_CAPREOMYCIN 'INIT_SUSCEPT_CAPREOMYCIN',
INIT_SUSCEPT_LEVOFLOXACIN1 AS INIT_SUSCEPT_LEVOFLOXACIN 'INIT_SUSCEPT_LEVOFLOXACIN',
TRANSNATIONAL_REFERRAL_IND1 AS TRANSNATIONAL_REFERRAL_IND 'TRANSNATIONAL_REFERRAL_IND',
INJECT_DRUG_USE_PAST_YEAR1 AS INJECT_DRUG_USE_PAST_YEAR 'INJECT_DRUG_USE_PAST_YEAR',
CASE_VERIFICATION1 AS CASE_VERIFICATION 'CASE_VERIFICATION',
INIT_REGIMEN_KANAMYCIN1 AS INIT_REGIMEN_KANAMYCIN 'INIT_REGIMEN_KANAMYCIN',
FINAL_SUSCEPT_RIFAPENTINE1 AS FINAL_SUSCEPT_RIFAPENTINE 'FINAL_SUSCEPT_RIFAPENTINE',
FINAL_ISOLATE_NOT_SPUTUM1 AS FINAL_ISOLATE_NOT_SPUTUM 'FINAL_ISOLATE_NOT_SPUTUM',
CORRECTIONAL_FACIL_CUSTODY_IND1 AS CORRECTIONAL_FACIL_CUSTODY_IND 'CORRECTIONAL_FACIL_CUSTODY_IND',
PATIENT_MOVE_CITY1 AS MOVE_CITY 'MOVE_CITY',
CORRECTIONAL_FACIL_TY1 AS CORRECTIONAL_FACIL_TY 'CORRECTIONAL_FACIL_TY',
INIT_REGIMEN_RIFAMPIN1 AS INIT_REGIMEN_RIFAMPIN 'INIT_REGIMEN_RIFAMPIN',
INIT_REGIMEN_PA_SALICYLIC_ACID1 AS INIT_REGIMEN_PA_SALICYLIC_ACID 'INIT_REGIMEN_PA_SALICYLIC_ACID',
OCCUPATION_RISK1 AS OCCUPATION_RISK 'OCCUPATION_RISK',
CULT_TISSUE_RESULT1 AS CULT_TISSUE_RESULT 'CULT_TISSUE_RESULT',
INIT_SUSCEPT_PA_SALICYLIC_ACID1 AS INIT_SUSCEPT_PA_SALICYLIC_ACID 'INIT_SUSCEPT_PA_SALICYLIC_ACID',
CHEST_XRAY_RESULT1 AS CHEST_XRAY_RESULT 'CHEST_XRAY_RESULT',
FIRST_ISOLATE_NOT_SPUTUM1 AS FIRST_ISOLATE_NOT_SPUTUM 'FIRST_ISOLATE_NOT_SPUTUM',
FINAL_SUSCEPT_CYCLOSERINE1 AS FINAL_SUSCEPT_CYCLOSERINE 'FINAL_SUSCEPT_CYCLOSERINE',
SPUTUM_CULT_RPT_LAB_TY1 AS SPUTUM_CULT_RPT_LAB_TY 'SPUTUM_CULT_RPT_LAB_TY',
FINAL_SUSCEPT_LEVOFLOXACIN1 AS FINAL_SUSCEPT_LEVOFLOXACIN 'FINAL_SUSCEPT_LEVOFLOXACIN',
NAA_RPT_LAB_TY1 AS NAA_RPT_LAB_TY 'NAA_RPT_LAB_TY',
COUNTRY_OF_VERIFIED_CASE1 AS COUNTRY_OF_VERIFIED_CASE 'COUNTRY_OF_VERIFIED_CASE',
LINK_REASON_11 AS LINK_REASON_1 'LINK_REASON_1',
CT_SCAN_CAVITY_EVIDENCE1 AS CT_SCAN_CAVITY_EVIDENCE 'CT_SCAN_CAVITY_EVIDENCE',
INIT_REGIMEN_RIFABUTIN1 AS INIT_REGIMEN_RIFABUTIN 'INIT_REGIMEN_RIFABUTIN',
INIT_SUSCEPT_RIFAPENTINE1 AS INIT_SUSCEPT_RIFAPENTINE 'INIT_SUSCEPT_RIFAPENTINE',
INIT_REGIMEN_LEVOFLOXACIN1 AS INIT_REGIMEN_LEVOFLOXACIN 'INIT_REGIMEN_LEVOFLOXACIN',
PATIENT_BIRTH_COUNTRY1 AS PATIENT_BIRTH_COUNTRY 'PATIENT_BIRTH_COUNTRY',
EXCESS_ALCOHOL_USE_PAST_YEAR1 AS EXCESS_ALCOHOL_USE_PAST_YEAR 'EXCESS_ALCOHOL_USE_PAST_YEAR',
INIT_REGIMEN_OTHER_2_IND1 AS INIT_REGIMEN_OTHER_2_IND 'INIT_REGIMEN_OTHER_2_IND',
FINAL_SUSCEPT_CAPREOMYCIN1 AS FINAL_SUSCEPT_CAPREOMYCIN 'FINAL_SUSCEPT_CAPREOMYCIN',
FINAL_SUSCEPT_RIFABUTIN1 AS FINAL_SUSCEPT_RIFABUTIN 'FINAL_SUSCEPT_RIFABUTIN',
INIT_SUSCEPT_AMIKACIN1 AS INIT_SUSCEPT_AMIKACIN 'INIT_SUSCEPT_AMIKACIN',
FINAL_SUSCEPT_RIFAMPIN1 AS FINAL_SUSCEPT_RIFAMPIN 'FINAL_SUSCEPT_RIFAMPIN',
INIT_REGIMEN_OTHER_1_IND1 AS INIT_REGIMEN_OTHER_1_IND 'INIT_REGIMEN_OTHER_1_IND',
FINAL_SUSCEPT_STREPTOMYCIN1 AS FINAL_SUSCEPT_STREPTOMYCIN 'FINAL_SUSCEPT_STREPTOMYCIN',
INIT_SUSCEPT_KANAMYCIN1 AS INIT_SUSCEPT_KANAMYCIN 'INIT_SUSCEPT_KANAMYCIN',
INIT_SUSCEPT_ETHAMBUTOL1 AS INIT_SUSCEPT_ETHAMBUTOL 'INIT_SUSCEPT_ETHAMBUTOL',
INIT_REGIMEN_ISONIAZID1 AS INIT_REGIMEN_ISONIAZID 'INIT_REGIMEN_ISONIAZID',
SPUTUM_SMEAR_RESULT1 AS SPUTUM_SMEAR_RESULT 'SPUTUM_SMEAR_RESULT',
DOT1 AS DOT 'DOT',
CORRECTIONAL_FACIL_RESIDENT1 AS CORRECTIONAL_FACIL_RESIDENT 'CORRECTIONAL_FACIL_RESIDENT',
FINAL_SUSCEPT_MOXIFLOXACIN1 AS FINAL_SUSCEPT_MOXIFLOXACIN 'FINAL_SUSCEPT_MOXIFLOXACIN',
FINAL_ISOLATE_COLLECT_DATE1 AS FINAL_ISOLATE_COLLECT_DATE 'FINAL_ISOLATE_COLLECT_DATE',
DATE_SUBMITTED1 AS DATE_SUBMITTED 'DATE_SUBMITTED',
TST_PLACED_DATE1 AS TST_PLACED_DATE 'TST_PLACED_DATE',
NAA_COLLECT_DATE1 AS NAA_COLLECT_DATE 'NAA_COLLECT_DATE',
FIRST_ISOLATE_COLLECT_DATE1 AS FIRST_ISOLATE_COLLECT_DATE 'FIRST_ISOLATE_COLLECT_DATE',
TB_SPUTUM_CULTURE_NEGATIVE_DAT1 AS TB_SPUTUM_CULTURE_NEGATIVE_DAT 'TB_SPUTUM_CULTURE_NEGATIVE_DAT',
SMR_PATH_CYTO_COLLECT_DATE1 AS SMR_PATH_CYTO_COLLECT_DATE 'SMR_PATH_CYTO_COLLECT_DATE',
CULT_TISSUE_COLLECT_DATE1 AS CULT_TISSUE_COLLECT_DATE 'CULT_TISSUE_COLLECT_DATE',
NAA_RESULT_RPT_DATE1 AS NAA_RESULT_RPT_DATE 'NAA_RESULT_RPT_DATE',
DATE_ARRIVED_IN_US1 AS DATE_ARRIVED_IN_US 'DATE_ARRIVED_IN_US',
SPUTUM_SMEAR_COLLECT_DATE1 AS SPUTUM_SMEAR_COLLECT_DATE 'SPUTUM_SMEAR_COLLECT_DATE',
CULT_TISSUE_RESULT_RPT_DATE1 AS CULT_TISSUE_RESULT_RPT_DATE 'CULT_TISSUE_RESULT_RPT_DATE',
DATE_OF_DEATH1 AS DATE_OF_DEATH 'DATE_OF_DEATH',
COUNT_DATE1 AS COUNT_DATE 'COUNT_DATE',
PREVIOUS_DIAGNOSIS_YEAR1 AS PREVIOUS_DIAGNOSIS_YEAR 'PREVIOUS_DIAGNOSIS_YEAR',
SPUTUM_CULT_COLLECT_DATE1 AS SPUTUM_CULT_COLLECT_DATE 'SPUTUM_CULT_COLLECT_DATE',
THERAPY_STOP_DATE1 AS THERAPY_STOP_DATE 'THERAPY_STOP_DATE',
SPUTUM_CULT_RESULT_RPT_DATE1 AS SPUTUM_CULT_RESULT_RPT_DATE 'SPUTUM_CULT_RESULT_RPT_DATE',
INIT_REGIMEN_START_DATE1 AS INIT_REGIMEN_START_DATE 'INIT_REGIMEN_START_DATE',
IGRA_COLLECT_DATE1 AS IGRA_COLLECT_DATE 'IGRA_COLLECT_DATE',
DOT_NUMBER_WEEKS1 AS DOT_NUMBER_WEEKS 'DOT_NUMBER_WEEKS',
TST_MM_INDURATION1 AS TST_MM_INDURATION 'TST_MM_INDURATION',
THERAPY_EXTEND_GT_12_OTHER1 AS THERAPY_EXTEND_GT_12_OTHER 'THERAPY_EXTEND_GT_12_OTHER',
LINK_STATE_CASE_NUM_21 AS LINK_STATE_CASE_NUM_2 'LINK_STATE_CASE_NUM_2',
ISOLATE_ACCESSION_NUM1 AS ISOLATE_ACCESSION_NUM 'ISOLATE_ACCESSION_NUM',
INIT_SUSCEPT_OTHER_11 AS INIT_SUSCEPT_OTHER_1 'INIT_SUSCEPT_OTHER_1',
INIT_REGIMEN_OTHER_21 AS INIT_REGIMEN_OTHER_2 'INIT_REGIMEN_OTHER_2',
INIT_REGIMEN_OTHER_11 AS INIT_REGIMEN_OTHER_1 'INIT_REGIMEN_OTHER_1',
OTHER_TB_RISK_FACTORS1 AS OTHER_TB_RISK_FACTORS 'OTHER_TB_RISK_FACTORS',
LINK_STATE_CASE_NUM_11 AS LINK_STATE_CASE_NUM_1 'LINK_STATE_CASE_NUM_1',
NO_CONV_DOC_OTHER_REASON1 AS NO_CONV_DOC_OTHER_REASON 'NO_CONV_DOC_OTHER_REASON',
FINAL_SUSCEPT_OTHER_21 AS FINAL_SUSCEPT_OTHER_2 'FINAL_SUSCEPT_OTHER_2',
FINAL_SUSCEPT_OTHER1 AS FINAL_SUSCEPT_OTHER 'FINAL_SUSCEPT_OTHER',
PATIENT_MOVE_TO_CITY_21 AS MOVE_CITY_2 'MOVE_CITY_2',
HIV_CITY_CNTY_PATIENT_NUM1 AS HIV_CITY_CNTY_PATIENT_NUM 'HIV_CITY_CNTY_PATIENT_NUM',
IGRA_TEST_TY1 AS IGRA_TEST_TY 'IGRA_TEST_TY',
HIV_STATE_PATIENT_NUM1 AS HIV_STATE_PATIENT_NUM 'HIV_STATE_PATIENT_NUM',
INIT_SUSCEPT_OTHER_21 AS INIT_SUSCEPT_OTHER_2 'INIT_SUSCEPT_OTHER_2',
COMMENTS_FOLLOW_UP_11 AS COMMENTS_FOLLOW_UP_1 'COMMENTS_FOLLOW_UP_1',
COMMENTS_FOLLOW_UP_21 AS COMMENTS_FOLLOW_UP_2 'COMMENTS_FOLLOW_UP_2',
PROVIDER_OVERRIDE_COMMENTS1 AS PROVIDER_OVERRIDE_COMMENTS 'PROVIDER_OVERRIDE_COMMENTS'
from S_TB_PAM2;
run;
data  DISEASE_SITE_a(rename=(value1=value));
set  s_DISEASE_SITE;
if value='Pulmonary';
value1=value;
run;
PROC SORT DATA=DISEASE_SITE_a nodupkey; BY TB_PAM_UID; RUN;
data  DISEASE_SITE_b(rename=(value2=value));
set  s_DISEASE_SITE;
if value ='Site not Stated';
value2=value;
run;
PROC SORT DATA=DISEASE_SITE_b nodupkey; BY TB_PAM_UID; RUN;
data  DISEASE_SITE_c(rename=(value2=value));
set  s_DISEASE_SITE;
if value not in ('Pulmonary','Site not Stated');
value3=value;
run;
PROC SORT DATA=DISEASE_SITE_c nodupkey; BY TB_PAM_UID; RUN;
data s_tb_pam_linked;
merge s_tb_pam(in=inl) DISEASE_SITE_a ;
by tb_pam_uid;
run;
data s_tb_pam_linked;
merge s_tb_pam_linked(in=inl) DISEASE_SITE_b ;
by tb_pam_uid;
run;
data s_tb_pam_linked;
merge s_tb_pam_linked(in=inl) DISEASE_SITE_c ;
by tb_pam_uid;
run;
data s_tb_pam;
set s_tb_pam_linked;
LENGTH CALC_DISEASE_SITE $25;
if value1 in('Pulmonary') and STRIP(value2)='' and  STRIP(value3)='' then CALC_DISEASE_SITE='Pulmonary';
else if value1='' and value2 ='' and value3 not in ('') then CALC_DISEASE_SITE='Extra Pulmonary';
else if value1='' and value2 not in ('') and value3 not in ('') then CALC_DISEASE_SITE='Extra Pulmonary';
else if value1 in('Pulmonary') and STRIP(value2) not in ('') then CALC_DISEASE_SITE='Both';
else if value1 in('Pulmonary') and STRIP(value3)not in ('') then CALC_DISEASE_SITE='Both';
else CALC_DISEASE_SITE='Unknown';
DROP last_chg_time;
run;
PROC SORT DATA=s_tb_pam nodupkey; BY TB_PAM_UID; RUN;
PROC SQL;
CREATE TABLE s_tb_pam AS SELECT * FROM
S_PAM_CHG_TIME, S_TB_PAM WHERE 
S_TB_PAM.TB_PAM_UID=S_PAM_CHG_TIME.TB_PAM_UID;
QUIT;
DATA s_tb_pam;
SET s_tb_pam;
	yesCounter=0;
	noCounter=0;

	ISONIAZID_CNT=0;
	RIFAMPIN_CNT=0;
	PYRAZINAMIDE_CNT=0;
	ETHAMBUTOL_CNT=0;

	length INIT_DRUG_REG_CALC $200;

	If INIT_REGIMEN_ISONIAZID          	    =  'Yes' then yesCounter=1;
	If INIT_REGIMEN_ISONIAZID          	    =  'Yes' then ISONIAZID_CNT=1 ;
	else If INIT_REGIMEN_ISONIAZID           =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_RIFAMPIN          	    =  'Yes' then yesCounter=yesCounter+1;
	If INIT_REGIMEN_RIFAMPIN          	    =  'Yes' then RIFAMPIN_CNT=1;
	else If INIT_REGIMEN_RIFAMPIN          	=  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_PYRAZINAMIDE          	=  'Yes' then yesCounter=yesCounter+1;
	If INIT_REGIMEN_PYRAZINAMIDE          	=  'Yes' then PYRAZINAMIDE_CNT=1;
	else If INIT_REGIMEN_PYRAZINAMIDE       =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_ETHAMBUTOL          	=  'Yes' then yesCounter=yesCounter+1;
	If INIT_REGIMEN_ETHAMBUTOL          	=  'Yes' then ETHAMBUTOL_CNT=1;
	else If INIT_REGIMEN_ETHAMBUTOL         =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_STREPTOMYCIN          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_STREPTOMYCIN       =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_ETHIONAMIDE          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_ETHIONAMIDE        =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_KANAMYCIN          	    =  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_KANAMYCIN          =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_CYCLOSERINE          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_CYCLOSERINE        =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_CAPREOMYCIN          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_CAPREOMYCIN        =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_PA_SALICYLIC_ACID     	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_PA_SALICYLIC_ACID  =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_AMIKACIN				=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_AMIKACIN			=  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_RIFABUTIN          	    =  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_RIFABUTIN          =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_CIPROFLOXACIN          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_CIPROFLOXACIN      =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_OFLOXACIN          	    =  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_OFLOXACIN          =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_RIFAPENTINE          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_RIFAPENTINE        =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_LEVOFLOXACIN          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_LEVOFLOXACIN       =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_MOXIFLOXACIN          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_MOXIFLOXACIN       =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_OTHER_1_IND          	=  'Yes' then yesCounter=yesCounter+1;
	else If INIT_REGIMEN_OTHER_1_IND        =  'No' then noCounter=noCounter+1;

	If INIT_REGIMEN_OTHER_2_IND          	=  'Yes' then yesCounter=yesCounter+1;
	If INIT_REGIMEN_OTHER_2_IND          	=  'No' then noCounter=noCounter+1;


	if yesCounter = 0 and noCounter >=1 
		then INIT_DRUG_REG_CALC= '0';
	else if yesCounter = 1 
		then INIT_DRUG_REG_CALC= '1';
	else if ISONIAZID_CNT + RIFAMPIN_CNT +PYRAZINAMIDE_CNT + ETHAMBUTOL_CNT =4 and yesCounter= 4 
		then INIT_DRUG_REG_CALC= '2';
	else if ISONIAZID_CNT + RIFAMPIN_CNT +PYRAZINAMIDE_CNT =3 and yesCounter= 3 
		then INIT_DRUG_REG_CALC= '3';
	else if ISONIAZID_CNT + RIFAMPIN_CNT =2 and yesCounter=2 
		then INIT_DRUG_REG_CALC= '4';
	else if yesCounter >= 2 
		then INIT_DRUG_REG_CALC= '5';
	else if yesCounter =0 and noCounter=0 
		then INIT_DRUG_REG_CALC= '9';
	drop yesCounter;
	drop noCounter;
	drop ISONIAZID_CNT;
	drop RIFAMPIN_CNT;
	drop PYRAZINAMIDE_CNT;
	drop ETHAMBUTOL_CNT;
RUN;
data s_tb_pam;
set s_tb_pam;
if TB_PAM_UID ~=. then output;
run;
%DBLOAD (S_TB_PAM, S_TB_PAM);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_TB_PAM),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM nbs_rdb.S_TB_PAM ),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_TB_PAM');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_TB_PAM TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_TB_PAM TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET START_DATE=DATETIME();

CREATE TABLE S_TB_PAM_ACT_ENTITY AS
SELECT NBS_ACT_ENTITY.NBS_ACT_ENTITY_UID, NBS_ACT_ENTITY.ADD_TIME, NBS_ACT_ENTITY.ADD_USER_ID, NBS_ACT_ENTITY.ADD_USER_ID,NBS_ACT_ENTITY.LAST_CHG_TIME,  NBS_ACT_ENTITY.LAST_CHG_USER_ID,
NBS_ACT_ENTITY.ACT_UID AS TB_PAM_UID 'TB_PAM_UID',ENTITY_UID, TYPE_CD,RECORD_STATUS_CD, RECORD_STATUS_TIME,
RECORD_STATUS_TIME, NBS_ACT_ENTITY_UID as TB_PAM_ACT_ENTITY_UID  'TB_PAM_ACT_ENTITY_UID'
FROM NBS_ODS.NBS_ACT_ENTITY, S_TB_PAM  where 
NBS_ACT_ENTITY.ACT_UID=S_TB_PAM.TB_PAM_UID;
/*AND NBS_ACT_ENTITY.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST);*/ 
QUIT;
%DBLOAD (S_TB_PAM_ACT_ENTITY, S_TB_PAM_ACT_ENTITY);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_TB_PAM_ACT_ENTITY),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM nbs_rdb.S_TB_PAM_ACT_ENTITY ),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_TB_PAM_ACT_ENTITY');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_TB_PAM_ACT_ENTITY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_TB_PAM_ACT_ENTITY TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();
create table S_ADDL_RISK_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB167'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_ADDL_RISK as select * from nbs_rdb.D_ADDL_RISK where TB_PAM_UID in (select distinct TB_PAM_UID from S_ADDL_RISK_BASE);

delete from nbs_rdb.D_ADDL_RISK where TB_PAM_UID in (select distinct TB_PAM_UID from D_ADDL_RISK);
delete from nbs_rdb.L_ADDL_RISK where TB_PAM_UID in (select distinct TB_PAM_UID from D_ADDL_RISK);


delete from nbs_rdb.d_ADDL_RISK_group where d_ADDL_RISK_group_key in (
select distinct  d_ADDL_RISK_group_key from  d_ADDL_RISK where TB_PAM_UID in (select distinct TB_PAM_UID from D_ADDL_RISK));


delete from nbs_rdb.S_ADDL_RISK where TB_PAM_UID in (select distinct TB_PAM_UID from D_ADDL_RISK);
delete from nbs_rdb.L_ADDL_RISK where TB_PAM_UID in (select distinct TB_PAM_UID from D_ADDL_RISK);

quit;

PROC SQL;
CREATE TABLE S_ADDL_RISK_CODED  AS 
	SELECT * FROM S_ADDL_RISK_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_ADDL_RISK_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_ADDL_RISK_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_ADDL_RISK;
SET S_ADDL_RISK_CODED_TRANSLATED;
value=ANSWER_TXT;
IF CODE_SET_GROUP_ID=''  THEN value= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_ADDL_RISK, S_ADDL_RISK);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_ADDL_RISK),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_ADDL_RISK),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_ADDL_RISK');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_ADDL_RISK TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_ADDL_RISK TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
/*


PROC SQL;
CREATE TABLE S_DISEASE_SITE_CODED  AS 
	SELECT * FROM S_DISEASE_SITE_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_DISEASE_SITE_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_DISEASE_SITE_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_DISEASE_SITE;
SET S_DISEASE_SITE_CODED_TRANSLATED;
value=ANSWER_TXT;
IF CODE_SET_GROUP_ID=''  THEN value= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_DISEASE_SITE, S_DISEASE_SITE);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_DISEASE_SITE_BASE),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_DISEASE_SITE),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_DISEASE_SITE');
quit;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);

*/
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_GT_12_REAS_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB235'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_GT_12_REAS as select * from nbs_rdb.D_GT_12_REAS where TB_PAM_UID in (select distinct TB_PAM_UID from S_GT_12_REAS_BASE);

delete from nbs_rdb.D_GT_12_REAS where TB_PAM_UID in (select distinct TB_PAM_UID from D_GT_12_REAS);
delete from nbs_rdb.L_GT_12_REAS where TB_PAM_UID in (select distinct TB_PAM_UID from D_GT_12_REAS);


delete from nbs_rdb.d_GT_12_REAS_group where d_GT_12_REAS_group_key in (
select distinct  d_GT_12_REAS_group_key from  d_GT_12_REAS where TB_PAM_UID in (select distinct TB_PAM_UID from D_GT_12_REAS));


delete from nbs_rdb.S_GT_12_REAS where TB_PAM_UID in (select distinct TB_PAM_UID from D_GT_12_REAS);
delete from nbs_rdb.L_GT_12_REAS where TB_PAM_UID in (select distinct TB_PAM_UID from D_GT_12_REAS);

quit;

PROC SQL;
CREATE TABLE S_GT_12_REAS_CODED  AS 
	SELECT * FROM S_GT_12_REAS_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_GT_12_REAS_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_GT_12_REAS_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_GT_12_REAS;
SET S_GT_12_REAS_CODED_TRANSLATED;
value=ANSWER_TXT;
IF CODE_SET_GROUP_ID=''  THEN value= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_GT_12_REAS, S_GT_12_REAS);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_GT_12_REAS),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_GT_12_REAS),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_GT_12_REAS');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_GT_12_REAS TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_GT_12_REAS TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_HC_PROV_TY_3_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB237'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_HC_PROV_TY_3 as select * from nbs_rdb.D_HC_PROV_TY_3 where TB_PAM_UID in (select distinct TB_PAM_UID from S_HC_PROV_TY_3_BASE);

delete from nbs_rdb.D_HC_PROV_TY_3 where TB_PAM_UID in (select distinct TB_PAM_UID from D_HC_PROV_TY_3);
delete from nbs_rdb.L_HC_PROV_TY_3 where TB_PAM_UID in (select distinct TB_PAM_UID from D_HC_PROV_TY_3);


delete from nbs_rdb.d_HC_PROV_TY_3_group where d_HC_PROV_TY_3_group_key in (
select distinct  d_HC_PROV_TY_3_group_key from  d_HC_PROV_TY_3 where TB_PAM_UID in (select distinct TB_PAM_UID from D_HC_PROV_TY_3));


delete from nbs_rdb.S_HC_PROV_TY_3 where TB_PAM_UID in (select distinct TB_PAM_UID from D_HC_PROV_TY_3);
delete from nbs_rdb.L_HC_PROV_TY_3 where TB_PAM_UID in (select distinct TB_PAM_UID from D_HC_PROV_TY_3);

quit;

PROC SQL;
CREATE TABLE S_HC_PROV_TY_3_CODED  AS 
	SELECT * FROM S_HC_PROV_TY_3_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_HC_PROV_TY_3_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_HC_PROV_TY_3_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_HC_PROV_TY_3;
SET S_HC_PROV_TY_3_CODED_TRANSLATED;
value=ANSWER_TXT;
IF CODE_SET_GROUP_ID=''  THEN value= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_HC_PROV_TY_3, S_HC_PROV_TY_3);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_HC_PROV_TY_3),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.S_HC_PROV_TY_3),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_HC_PROV_TY_3');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_HC_PROV_TY_3 TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_HC_PROV_TY_3 TABLE.';
RUN;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_MOVE_CNTRY_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE 
datamart_column_nm <> 'n/a'
and question_identifier='TUB230'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_MOVE_CNTRY as select * from nbs_rdb.D_MOVE_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from S_MOVE_CNTRY_BASE);

delete from nbs_rdb.D_MOVE_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTRY);
delete from nbs_rdb.L_MOVE_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTRY);


delete from nbs_rdb.d_MOVE_CNTRY_group where d_MOVE_CNTRY_group_key in (
select distinct  d_MOVE_CNTRY_group_key from  d_MOVE_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTRY));


delete from nbs_rdb.S_MOVE_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTRY);
delete from nbs_rdb.L_MOVE_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTRY);

quit;
PROC SQL;
CREATE TABLE S_MOVE_CNTRY_CODED  AS 
	SELECT * FROM S_MOVE_CNTRY_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_MOVE_CNTRY_CODED_TRANSLATED AS 
	SELECT 	TB_PAM_UID, SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_MOVE_CNTRY_CODED TB
			LEFT JOIN NBS_SRT.code_value_general CVG
	on CVG.CODE=TB.ANSWER_TXT
	and CVG.CODE_SET_NM=TB.CODE_SET_NM
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_MOVE_CNTRY;
SET S_MOVE_CNTRY_CODED_TRANSLATED;
value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_MOVE_CNTRY, S_MOVE_CNTRY);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_MOVE_CNTRY),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_MOVE_CNTRY),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_MOVE_CNTRY');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_MOVE_CNTRY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_MOVE_CNTRY TABLE.';
RUN;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_MOVE_CNTRY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_MOVE_CNTRY TABLE.';
RUN;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_MOVE_CNTY_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB228'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_MOVE_CNTY as select * from nbs_rdb.D_MOVE_CNTY where TB_PAM_UID in (select distinct TB_PAM_UID from S_MOVE_CNTY_BASE);

delete from nbs_rdb.D_MOVE_CNTY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTY);
delete from nbs_rdb.L_MOVE_CNTY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTY);


delete from nbs_rdb.d_MOVE_CNTY_group where d_MOVE_CNTY_group_key in (
select distinct  d_MOVE_CNTY_group_key from  d_MOVE_CNTY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTY));


delete from nbs_rdb.S_MOVE_CNTY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTY);
delete from nbs_rdb.L_MOVE_CNTY where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_CNTY);

quit;

PROC SQL;
CREATE TABLE S_MOVE_CNTY_CODED  AS 
	SELECT * FROM S_MOVE_CNTY_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_MOVE_CNTY_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_MOVE_CNTY_CODED TB
			LEFT JOIN NBS_SRT.State_county_code_value CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_MOVE_CNTY;
SET S_MOVE_CNTY_CODED_TRANSLATED;
value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_MOVE_CNTY, S_MOVE_CNTY);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_MOVE_CNTY),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_MOVE_CNTY),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_MOVE_CNTY');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_MOVE_CNTY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_MOVE_CNTY TABLE.';
RUN;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_MOVE_CNTY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_MOVE_CNTY TABLE.';
RUN;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_MOVE_STATE_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB229'
/*(AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_MOVE_STATE as select * from nbs_rdb.D_MOVE_STATE where TB_PAM_UID in (select distinct TB_PAM_UID from S_MOVE_STATE_BASE);

delete from nbs_rdb.D_MOVE_STATE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_STATE);
delete from nbs_rdb.L_MOVE_STATE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_STATE);


delete from nbs_rdb.d_MOVE_STATE_group where d_MOVE_STATE_group_key in (
select distinct  d_MOVE_STATE_group_key from  d_MOVE_STATE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_STATE));


delete from nbs_rdb.S_MOVE_STATE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_STATE);
delete from nbs_rdb.L_MOVE_STATE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVE_STATE);

quit;

PROC SQL;
CREATE TABLE S_MOVE_STATE_CODED  AS 
	SELECT * FROM S_MOVE_STATE_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_MOVE_STATE_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_MOVE_STATE_CODED TB
			LEFT JOIN NBS_SRT.State_county_code_value CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_MOVE_STATE;
SET S_MOVE_STATE_CODED_TRANSLATED;
value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_MOVE_STATE, S_MOVE_STATE);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_MOVE_STATE),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_MOVE_STATE),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_MOVE_STATE');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_MOVE_STATE TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_MOVE_STATE TABLE.';
RUN;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_MOVED_WHERE_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB225'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_MOVED_WHERE as select * from nbs_rdb.D_MOVED_WHERE where TB_PAM_UID in (select distinct TB_PAM_UID from S_MOVED_WHERE_BASE);

delete from nbs_rdb.D_MOVED_WHERE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVED_WHERE);
delete from nbs_rdb.L_MOVED_WHERE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVED_WHERE);


delete from nbs_rdb.d_MOVED_WHERE_group where d_MOVED_WHERE_group_key in (
select distinct  d_MOVED_WHERE_group_key from  d_MOVED_WHERE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVED_WHERE));


delete from nbs_rdb.S_MOVED_WHERE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVED_WHERE);
delete from nbs_rdb.L_MOVED_WHERE where TB_PAM_UID in (select distinct TB_PAM_UID from D_MOVED_WHERE);

quit;

PROC SQL;
CREATE TABLE S_MOVED_WHERE_CODED  AS 
	SELECT * FROM S_MOVED_WHERE_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_MOVED_WHERE_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_MOVED_WHERE_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_MOVED_WHERE;
SET S_MOVED_WHERE_CODED_TRANSLATED;
value=ANSWER_TXT;
IF CODE_SET_GROUP_ID=''  THEN value= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_MOVED_WHERE, S_MOVED_WHERE);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_MOVED_WHERE),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_MOVED_WHERE),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_MOVED_WHERE');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_MOVED_WHERE TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_MOVED_WHERE TABLE.';
RUN;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_OUT_OF_CNTRY_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB114'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_OUT_OF_CNTRY as select * from nbs_rdb.D_OUT_OF_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from S_OUT_OF_CNTRY_BASE);

delete from nbs_rdb.D_OUT_OF_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_OUT_OF_CNTRY);
delete from nbs_rdb.L_OUT_OF_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_OUT_OF_CNTRY);


delete from nbs_rdb.d_OUT_OF_CNTRY_group where d_OUT_OF_CNTRY_group_key in (
select distinct  d_OUT_OF_CNTRY_group_key from  d_OUT_OF_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_OUT_OF_CNTRY));


delete from nbs_rdb.S_OUT_OF_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_OUT_OF_CNTRY);
delete from nbs_rdb.L_OUT_OF_CNTRY where TB_PAM_UID in (select distinct TB_PAM_UID from D_OUT_OF_CNTRY);

quit;
PROC SQL;
CREATE TABLE S_OUT_OF_CNTRY_CODED  AS 
	SELECT * FROM S_OUT_OF_CNTRY_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_OUT_OF_CNTRY_CODED_TRANSLATED AS 
	SELECT 	TB_PAM_UID, SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_OUT_OF_CNTRY_CODED TB
			LEFT JOIN NBS_SRT.code_value_general CVG
			on CVG.CODE=TB.ANSWER_TXT
			AND CVG.CODE_SET_NM=TB.CODE_SET_NM
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_OUT_OF_CNTRY;
SET S_OUT_OF_CNTRY_CODED_TRANSLATED;
value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_OUT_OF_CNTRY, S_OUT_OF_CNTRY);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_OUT_OF_CNTRY),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_OUT_OF_CNTRY),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_OUT_OF_CNTRY');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_OUT_OF_CNTRY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_OUT_OF_CNTRY TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
proc sql;

UPDATE ACTIVITY_LOG_DETAIL SET 
START_DATE=DATETIME();

create table S_SMR_EXAM_TY_BASE as
SELECT  ACT_UID length =8 AS TB_PAM_UID  'TB_PAM_UID',
SEQ_NBR, datamart_column_nm , NBS_Case_Answer_uid, answer_txt, CODE_SET_GROUP_ID, pa.last_chg_time
FROM  nbs_ods.nbs_Question pq
JOIN nbs_ods.NBS_Case_Answer pa ON pq.nbs_question_uid =pa.nbs_question_uid
WHERE datamart_column_nm <> 'n/a'
and question_identifier='TUB129'
/*AND pa.last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
GROUP BY ACT_UID, datamart_column_nm ;


create table D_SMR_EXAM_TY as select * from nbs_rdb.D_SMR_EXAM_TY where TB_PAM_UID in (select distinct TB_PAM_UID from S_SMR_EXAM_TY_BASE);

delete from nbs_rdb.D_SMR_EXAM_TY where TB_PAM_UID in (select distinct TB_PAM_UID from D_SMR_EXAM_TY);
delete from nbs_rdb.L_SMR_EXAM_TY where TB_PAM_UID in (select distinct TB_PAM_UID from D_SMR_EXAM_TY);


delete from nbs_rdb.d_SMR_EXAM_TY_group where d_SMR_EXAM_TY_group_key in (
select distinct  d_SMR_EXAM_TY_group_key from  d_SMR_EXAM_TY where TB_PAM_UID in (select distinct TB_PAM_UID from D_SMR_EXAM_TY));


delete from nbs_rdb.S_SMR_EXAM_TY where TB_PAM_UID in (select distinct TB_PAM_UID from D_SMR_EXAM_TY);
delete from nbs_rdb.L_SMR_EXAM_TY where TB_PAM_UID in (select distinct TB_PAM_UID from D_SMR_EXAM_TY);

quit;

PROC SQL;
CREATE TABLE S_SMR_EXAM_TY_CODED  AS 
	SELECT * FROM S_SMR_EXAM_TY_BASE TB
		LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
		ON METADATA.CODE_SET_GROUP_ID=TB.CODE_SET_GROUP_ID;
QUIT;
PROC SQL;
CREATE TABLE S_SMR_EXAM_TY_CODED_TRANSLATED AS 
	SELECT 	TB.CODE_SET_GROUP_ID, TB_PAM_UID,
			SEQ_NBR, NBS_Case_Answer_uid, ANSWER_TXT, TB.CODE_SET_NM,DATAMART_COLUMN_NM,
			CODE,CODE_SHORT_DESC_TXT AS CODE_SHORT_DESC_TXT, last_chg_time
	FROM	S_SMR_EXAM_TY_CODED TB
			LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
			ON CVG.CODE_SET_NM=TB.CODE_SET_NM
			AND CVG.CODE=TB.ANSWER_TXT
			ORDER BY TB_PAM_UID;
QUIT;
DATA S_SMR_EXAM_TY;
SET S_SMR_EXAM_TY_CODED_TRANSLATED;
value=ANSWER_TXT;
IF CODE_SET_GROUP_ID=''  THEN value= ANSWER_TXT;
ELSE IF CODE_SET_GROUP_ID<>''  THEN value=CODE_SHORT_DESC_TXT;
RUN;
%DBLOAD (S_SMR_EXAM_TY, S_SMR_EXAM_TY);
proc sql;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM S_SMR_EXAM_TY),
END_DATE=DATETIME(),
DESTINATION_row_count=(SELECT COUNT(*) FROM NBS_RDB.S_SMR_EXAM_TY),
ACTIVITY_LOG_DETAIL_UID= ((select max(ACTIVITY_LOG_DETAIL_uid) from nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
PROCESS_UID= (select process_uid from NBS_RDB.ETL_PROCESS where process_name='S_SMR_EXAM_TY');
quit;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
ADMIN_COMMENT=COMPRESS(DESTINATION_ROW_COUNT) || ' RECORD(S) INSERTED AND 0 RECORD(S) UPDATED IN S_SMR_EXAM_TY TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE S_SMR_EXAM_TY TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);

proc sql;
create table case_entity as select * from nbs_ods.NBS_ACT_ENTITY 
where ACT_UID in (select public_health_case_UID from nbs_ods.public_health_case where cd in (
select  condition_cd from nbs_srt.condition_code where investigation_form_cd = 'INV_FORM_RVCT'
))
/*and last_chg_time>(select start_date from ACTIVITY_LOG_MASTER_LAST)*/
order by ACT_UID;
quit;
PROC TRANSPOSE DATA=case_entity OUT=case_entity;
    BY ACT_UID;
	COPY last_chg_time;
	ID type_cd;
	VAR entity_uid;
RUN;
data F_S_TB_PAM;
set case_entity;
if InvestgrOfPHC ~=. then provider_uid=InvestgrOfPHC;
if OrgAsReporterOfPHC ~=. then ORG_AS_REPORTER_UID=OrgAsReporterOfPHC;
if HospOfADT ~=. then HOSPITAL_UID=HospOfADT;
if PerAsReporterOfPHC ~=. then PERSON_AS_REPORTER_UID=PerAsReporterOfPHC;
if SubjOfPHC ~=. then person_uid=SubjOfPHC;
if PhysicianOfPHC~=. then PHYSICIAN_UID=PhysicianOfPHC;
if ACT_UID ~=. then TB_PAM_UID=ACT_UID;
if SubjOfPHC>0 then 
 do; 
  output F_S_TB_PAM;
 end;
run;
%DBLOAD (F_S_TB_PAM, F_S_TB_PAM);

