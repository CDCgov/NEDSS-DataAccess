********************************************************************************************;
*   LAB100.SAS CODE HAS BEEN REWRITTEN FOR PERFORMANCE/FINE TUNING PURPOSES BY 				;
*	PRADEEP SHARMA(CSC)																		;
*																						    ;
********************************************************************************************;
PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN;
QUIT; 

PROC SQL;
CREATE TABLE ACTIVITY_LOG_MASTER_LAST 
(ACTIVITY_LOG_MASTER_UID NUM,
START_DATE DATE, 
START_DATE2 DATE,
START_DATEINIT DATE,
COUNT NUM);
INSERT INTO ACTIVITY_LOG_MASTER_LAST( ACTIVITY_LOG_MASTER_UID, START_DATE,START_DATEINIT, START_DATE2) VALUES 
(1 , '01JUN1900'D,'01JUN1900'D, NULL);

UPDATE ACTIVITY_LOG_MASTER_LAST SET START_DATE2= (SELECT START_DATE FROM NBS_RDB.ACTIVITY_LOG_MASTER 
WHERE ACTIVITY_LOG_MASTER_UID= SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM NBS_RDB.ACTIVITY_LOG_MASTER);

CREATE TABLE ACTIVITY_LOG_MASTER (ACTIVITY_LOG_MASTER_UID NUM,START_DATE DATE, END_DATE DATE);

CREATE TABLE ACTIVITY_LOG_DETAIL (ACTIVITY_LOG_DETAIL_UID NUMERIC,	PROCESS_UID NUMERIC ,	
	SOURCE_ROW_COUNT NUMERIC, ROW_COUNT_INSERT NUMERIC, ROW_COUNT_UPDATE NUMERIC,
	SOURCE_ROW_COUNT_EXISTING NUMERIC,	SOURCE_ROW_COUNT_NEW NUMERIC ,
	DESTINATION_ROW_COUNT NUMERIC,
	START_DATE DATE, END_DATE DATE,
	START_DATE2 DATE,
	ADMIN_COMMENT VARCHAR(200), ACTIVITY_LOG_MASTER_UID NUMERIC);
INSERT INTO ACTIVITY_LOG_DETAIL( ACTIVITY_LOG_DETAIL_UID, PROCESS_UID,SOURCE_ROW_COUNT, DESTINATION_ROW_COUNT,
START_DATE,END_DATE, ACTIVITY_LOG_MASTER_UID) VALUES (1 , 1, NULL, NULL, NULL, NULL, NULL);
UPDATE ACTIVITY_LOG_DETAIL SET PROCESS_UID= (select process_uid from nbs_rdb.etl_process where process_name='LAB_TEST');
UPDATE ACTIVITY_LOG_DETAIL SET ACTIVITY_LOG_MASTER_UID=  (SELECT MAX(ACTIVITY_LOG_MASTER_UID) FROM NBS_RDB.ACTIVITY_LOG_MASTER);
UPDATE ACTIVITY_LOG_DETAIL SET ACTIVITY_LOG_DETAIL_UID= (SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1 ;
UPDATE ACTIVITY_LOG_DETAIL SET START_DATE2= (SELECT max(START_DATE)  FROM NBS_RDB.ACTIVITY_LOG_DETAIL WHERE 
PROCESS_UID= (select process_uid from nbs_rdb.etl_process where process_name='LAB100')
having ACTIVITY_LOG_DETAIL_UID=MAX(ACTIVITY_LOG_DETAIL_UID) 
);
QUIT;
DATA ACTIVITY_LOG_DETAIL; 
SET ACTIVITY_LOG_DETAIL;
START_DATE=datetime() ;
RUN;
OPTIONS COMPRESS=YES;
********************************************************************************;
proc sql;
/*create table  UPDATED_LAB100 AS SELECT RESULTED_LAB_TEST_KEY, lab_rpt_local_id FROM NBS_RDB.LAB100 WHERE RESULTED_LAB_TEST_KEY IN (SELECT LAB_TEST_KEY FROM rdbdata.updated_lab_test_list);

delete from nbs_rdb.lab100 where lab_rpt_local_id in (select lab_rpt_local_id from nbs_rdb.UPDATED_LAB100_LIST);
*/

create table  LAB_TEST as select * from NBS_RDB.LAB_TEST where 
RDB_LAST_REFRESH_TIME>(SELECT (ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  RDB_LAST_REFRESH_TIME <(SELECT (ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL)  and LAB_TEST_KEY NE 1 ORDER BY LAB_TEST_KEY;

create table  LAB_TEST_RESULT as select * from NBS_RDB.LAB_TEST_RESULT where 
RDB_LAST_REFRESH_TIME>(SELECT (ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  RDB_LAST_REFRESH_TIME <(SELECT (ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL) ORDER BY LAB_TEST_KEY;

quit;
/*PROC SORT DATA=LAB_TEST; BY LAB_TEST_KEY; RUN;
PROC SORT DATA=LAB_TEST_RESULT OUT=LAB_TEST_RESULT; BY LAB_TEST_KEY; RUN;
*/
DATA LABTEST_LABTESTRESULT;
MERGE LAB_TEST (IN=INLT) LAB_TEST_RESULT;
 BY LAB_TEST_KEY;
 IF INLT;
RUN;
proc datasets memtype=DATA;
 delete LAB_TEST LAB_TEST_RESULT;
quit;
DATA LABTEST_ORDER (KEEP=LAB_TEST_STATUS LAB_TEST_KEY LAB_RPT_LOCAL_ID REASON_FOR_TEST_DESC RECORD_STATUS_CD
ORDERED_RPT_UID ORDERED_LAB_TEST_CD ORDERED_LAB_TEST_CD_DESC ORDERED_TEST_CODE ORDERED_LABTEST_CD_SYS_NM SPECIMEN_DETAILS
ORDERED_TEST_UID SPECIMEN_ADD_TIME SPECIMEN_LAST_CHANGE_TIME ORDERING_ORG_KEY REPORTING_LAB_KEY CONDITION_KEY
INVESTIGATION_KEY ORDERING_PROVIDER_KEY LAB_RPT_STATUS OID CONDITION_CD REASON_FOR_TEST_DESC SPECIMEN_SRC_CD SPECIMEN_SRC_DESC LDF_GROUP_KEY
MORB_RPT_KEY PATIENT_KEY DOCUMENT_LINK )

LABTEST_RESULT (KEEP=LAB_TEST_KEY LAB_RPT_LOCAL_ID TEST_METHOD_CD TEST_METHOD_CD_DESC RESULTED_LAB_TEST_CD
ELR_IND RESULTED_RPT_UID RESULTED_TEST INTERPRETATION_FLG LAB_RPT_RECEIVED_BY_PH_DT LAB_RPT_CREATED_DT
LAB_RPT_CREATED_BY LAB_TEST_DT
LAB_RPT_LAST_UPDATE_DT JURISDICTION_CD LAB_TEST_CD_SYS_NM JURISDICTION_NM OID
ACCESSION_NBR SPECIMEN_SRC SPECIMEN_DESC SPECIMEN_SITE SPECIMEN_SITE_DESC
SPECIMEN_COLLECTION_DT RESULTED_TEST_UID ROOT_ORDERED_TEST_PNTR PARENT_TEST_PNTR
LAB_RPT_DT_KEY RESULT_COMMENT_GRP_KEY TEST_RESULT_GRP_KEY  PERFORMING_LAB_KEY
LAB_RPT_LAST_UPDATE_BY ALT_LAB_TEST_CD ALT_LAB_TEST_CD_DESC  ALT_LAB_TEST_CD_SYS_CD ALT_LAB_TEST_CD_SYS_NM 
RESULTED_LAB_TEST_CD_DESC RESULTEDTEST_CD_SYS_NM RESULT_TEST_METHOD_CD
 RESULTED_LAB_TEST_KEY);

SET LABTEST_LABTESTRESULT;
IF LAB_TEST_TYPE = 'Order' THEN 
 DO; 
  ORDERED_LAB_TEST_CD=LAB_TEST_CD;
  ORDERED_LAB_TEST_CD_DESC=LAB_TEST_CD_DESC;
  ORDERED_TEST_CODE=LAB_TEST_CD_SYS_CD;
  ORDERED_LABTEST_CD_SYS_NM=LAB_TEST_CD_SYS_NM;
  ORDERED_TEST_UID=LAB_TEST_UID;
  ORDERED_RPT_UID=LAB_RPT_UID;
  LAB_RPT_STATUS=LAB_RPT_STATUS;
  DOCUMENT_LINK=DOCUMENT_LINK;
  ALT_LAB_TEST_CD_SYS_CD=ALT_LAB_TEST_CD_SYS_CD;
  ALT_LAB_TEST_CD_SYS_NM=ALT_LAB_TEST_CD_SYS_NM;
  SPECIMEN_SRC_CD=SPECIMEN_SRC;
  SPECIMEN_SRC_DESC=SPECIMEN_DESC;
  OUTPUT LABTEST_ORDER;
 END;
ELSE IF LAB_TEST_TYPE = 'Result' THEN 
 DO;
  RESULTED_TEST=LAB_TEST_CD_DESC;
  RESULTED_TEST_UID=LAB_TEST_UID;
  RESULTED_RPT_UID=LAB_RPT_UID;
  RESULTED_LAB_TEST_CD =LAB_TEST_CD;
  RESULTED_LAB_TEST_CD_DESC=LAB_TEST_CD_DESC;
  RESULTEDTEST_CD_SYS_NM=LAB_TEST_CD_SYS_NM;
  RESULT_TEST_METHOD_CD=TEST_METHOD_CD;
  RESULTEDTEST_VAL_CD=TEST_RESULT_VAL_CD;
  RESULTEDTEST_VAL_CD_DESC=TEST_RESULT_VAL_CD_DESC;
  RESULTED_LAB_TEST_KEY=LAB_TEST_KEY;
OUTPUT LABTEST_RESULT;
 END;   
RUN;
proc datasets memtype=DATA;
   delete LABTEST_LABTESTRESULT;
quit;
DATA  LABTEST_ORDER;
SET  LABTEST_ORDER;
   IF LDF_GROUP_KEY=1 THEN LDF_GROUP_KEY='';
 IF MORB_RPT_KEY=1 THEN MORB_RPT_KEY='';
RUN;
PROC SQL;
CREATE TABLE DELETEDMORBS AS SELECT MORBIDITY_REPORT.MORB_RPT_KEY, ORDERED_TEST_UID FROM NBS_RDB.MORBIDITY_REPORT, LABTEST_ORDER WHERE MORBIDITY_REPORT.RECORD_STATUS_CD='INACTIVE' 
AND MORBIDITY_REPORT.MORB_RPT_KEY=LABTEST_ORDER.MORB_RPT_KEY;
DELETE FROM LABTEST_RESULT WHERE ROOT_ORDERED_TEST_PNTR IN (SELECT ORDERED_TEST_UID FROM DELETEDMORBS);
DELETE FROM LABTEST_ORDER WHERE MORB_RPT_KEY IN (SELECT  MORB_RPT_KEY FROM DELETEDMORBS);
QUIT;
PROC SQL;
create table LAB_RESULT_VAL as select * from NBS_RDB.LAB_RESULT_VAL where 
 RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
 and  RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL);
QUIT;
/*CONCATENATE RESULT TEXT AND NUMERIC UNITS*/
DATA LAB_RESULT_VALMODIFIED (KEEP=TEST_RESULT_GRP_KEY RESULT TEST_RESULT_VAL_CD TEST_RESULT_VAL_CD_SYS_NM
LOCAL_RESULT_CODE LOCAL_RESULT_NAME RESULT_REF_RANGE_FRM RESULT_REF_RANGE_TO RESULTEDTEST_VAL_CD RESULTEDTEST_VAL_CD_DESC 
LAB_RESULT_TXT_VAL NUMERIC_RESULT_WITHUNITS);

SET LAB_RESULT_VAL;
NUMERIC_RESULT_WITHUNITS=TRIM(NUMERIC_RESULT)||' '||TRIM(RESULT_UNITS);
RESULT=TRANWRD(TRANWRD(LEFT(TRIM(TEST_RESULT_VAL_CD_DESC)||' '||TRIM(LAB_RESULT_TXT_VAL)||' '||TRIM(NUMERIC_RESULT)||' '||
TRIM(RESULT_UNITS)),'0D'X,","),'0A'X," ");  *DELETE CARRIAGE RETURNS - HEX SYMBOLS;
LOCAL_RESULT_CODE=ALT_RESULT_VAL_CD;
LOCAL_RESULT_NAME=ALT_RESULT_VAL_CD_DESC;
RESULT_REF_RANGE_FRM=REF_RANGE_FRM;
RESULT_REF_RANGE_TO=REF_RANGE_TO;
RESULTEDTEST_VAL_CD=TEST_RESULT_VAL_CD;
RESULTEDTEST_VAL_CD_DESC=TEST_RESULT_VAL_CD_DESC;
RUN;

PROC SORT DATA=LAB_RESULT_VALMODIFIED; BY TEST_RESULT_GRP_KEY; RUN;
PROC SORT DATA=LABTEST_RESULT; BY TEST_RESULT_GRP_KEY; RUN;

DATA LABTEST_RESULTS_VAL(DROP=TEST_RESULT_GRP_KEY LAB_RPT_STATUS ) ;
MERGE LABTEST_RESULT (IN=INR) LAB_RESULT_VALMODIFIED;
BY TEST_RESULT_GRP_KEY;
IF INR;
RUN;
proc datasets memtype=DATA;
   delete LAB_RESULT_VALMODIFIED LABTEST_RESULT;
quit;
/*GET RESULT COMMENTS*/
PROC SQL;
create table LAB_RESULT_COMMENT as select * from NBS_RDB.LAB_RESULT_COMMENT where 
RDB_LAST_REFRESH_TIME>(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE2) FROM  ACTIVITY_LOG_DETAIL)
and  RDB_LAST_REFRESH_TIME <(SELECT MAX(ACTIVITY_LOG_DETAIL.START_DATE) FROM  ACTIVITY_LOG_DETAIL) ORDER BY RESULT_COMMENT_GRP_KEY;
QUIT;
/*PROC SORT DATA=LAB_RESULT_COMMENT OUT=LAB_RESULT_COMMENT (DROP=RECORD_STATUS_CD); BY RESULT_COMMENT_GRP_KEY; RUN;*/
PROC SORT DATA=LABTEST_RESULTS_VAL; BY RESULT_COMMENT_GRP_KEY; RUN;
DATA LABTEST_RESULTS_VAL_COMMENT (DROP=RESULT_COMMENT_GRP_KEY LAB_RPT_DT_KEY LAB_RESULT_COMMENTS LAB_TEST_DT);
MERGE LABTEST_RESULTS_VAL (IN=INV) LAB_RESULT_COMMENT(KEEP=RESULT_COMMENT_GRP_KEY LAB_RESULT_COMMENTS) ;
BY RESULT_COMMENT_GRP_KEY;
IF INV;
length RESULT_COMMENTS $2000;
RESULT_COMMENTS=TRANWRD(TRANWRD(LAB_RESULT_COMMENTS,'0D'X,","),'0A'X," "); *DELETE CARRIAGE RETURNS - HEX SYMBOLS;
IF LAB_TEST_DT NE . THEN
 DO;
  LAB_REPORT_DATE=LAB_TEST_DT;  
  LAB_TEST_DATE=LAB_TEST_DT;
 END;
FORMAT LAB_REPORT_DATE LAB_TEST_DATE DATETIME13.;
RUN;
DATA NEDSS_USERS;
SET NBS_RDB.USER_PROFILE;
LENGTH UID_FN $1;
UID_FN=FIRST_NM;
UID_LN=SCAN(LAST_NM,1,' ');
UID_LN2=COMPRESS(UID_LN,',');
UID=TRIM(UID_FN)||' '||TRIM(UID_LN2);
IF UID='N ELR' THEN UID='NEDSS_ELR';
RUN;

PROC SORT DATA=LABTEST_RESULTS_VAL_COMMENT; BY LAB_RPT_CREATED_BY; RUN;
PROC SORT DATA=NEDSS_USERS;  BY NEDSS_ENTRY_ID; RUN;
DATA LABTEST_CREATED (DROP=LAB_RPT_CREATED_BY FIRST_NM LAST_NM UID );
MERGE LABTEST_RESULTS_VAL_COMMENT (IN=INR) NEDSS_USERS (KEEP=NEDSS_ENTRY_ID FIRST_NM LAST_NM UID 
RENAME=(NEDSS_ENTRY_ID=LAB_RPT_CREATED_BY));
IF INR;
BY LAB_RPT_CREATED_BY;
LAB_REPORT_CREATED_BY=TRIM(FIRST_NM)||','||TRIM(LAST_NM);
LAB_REPORT_CREATED_BY_UID=UID;
RUN;

PROC SORT DATA=LABTEST_CREATED; BY LAB_RPT_LAST_UPDATE_BY; RUN;
PROC SORT DATA=NEDSS_USERS;  BY NEDSS_ENTRY_ID; RUN;
DATA LABTEST_UPDATED (DROP=LAB_RPT_LAST_UPDATE_BY FIRST_NM LAST_NM UID );
MERGE LABTEST_CREATED (IN=INR) NEDSS_USERS (KEEP=NEDSS_ENTRY_ID FIRST_NM LAST_NM UID 
RENAME=(NEDSS_ENTRY_ID=LAB_RPT_LAST_UPDATE_BY)); *NEDSS_ENTRY_ID CHANGED TO CREATED_BY IN LAST STEP;
IF INR;
BY LAB_RPT_LAST_UPDATE_BY;
LAB_REPORT_LAST_UPDATED_BY=TRIM(FIRST_NM)||','||TRIM(LAST_NM);
LAB_REPORT_LAST_UPDATED_BY_UID=UID;
RUN;
proc datasets memtype=DATA;
   delete LABTEST_CREATED NEDSS_USERS;
quit;
/* JOIN WITH PERSON TABLE */
PROC SQL;
CREATE TABLE LABTEST_ORDER1 AS
SELECT A.*, PATIENT_UID,PATIENT_FIRST_NAME,PATIENT_MIDDLE_NAME,PATIENT_LAST_NAME,PATIENT_LOCAL_ID, PATIENT_DOB, PATIENT_CURRENT_SEX,
PATIENT_STREET_ADDRESS_1,PATIENT_STREET_ADDRESS_2,PATIENT_CITY ,PATIENT_STATE,PATIENT_ZIP ,PATIENT_COUNTY,PATIENT_COUNTRY,
PATIENT_AGE_REPORTED,PATIENT_AGE_REPORTED_UNIT FROM
LABTEST_ORDER A LEFT OUTER JOIN NBS_RDB.D_PATIENT
ON A.PATIENT_KEY=D_PATIENT.PATIENT_KEY;
QUIT;
DATA LABTEST_ORDER1 ; 
SET LABTEST_ORDER1;
LENGTH PATIENT_ADDRESS $725;
AGE_REPORTED=PATIENT_AGE_REPORTED;
PATIENT_REPORTED_AGE_UNITS=PATIENT_AGE_REPORTED_UNIT;
PERSON_FIRST_NM=PATIENT_FIRST_NAME;
PERSON_MIDDLE_NM=PATIENT_MIDDLE_NAME;
PERSON_LAST_NM=PATIENT_LAST_NAME;
PERSON_LOCAL_ID=PATIENT_LOCAL_ID; 
PERSON_DOB=PATIENT_DOB;
PERSON_CURR_GENDER=PATIENT_CURRENT_SEX;
PATIENT_ZIP_CODE=PATIENT_ZIP;
PATIENT_ADDRESS=TRIM(PATIENT_STREET_ADDRESS_1);
IF LENGTHN(TRIM(PATIENT_STREET_ADDRESS_2))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_STREET_ADDRESS_2);
IF LENGTHN(TRIM(PATIENT_CITY))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_CITY);
IF LENGTHN(TRIM(PATIENT_COUNTY))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_COUNTY);
IF LENGTHN(TRIM(PATIENT_ZIP))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_ZIP);
IF LENGTHN(TRIM(PATIENT_STATE))>0 THEN PATIENT_ADDRESS=TRIM(PATIENT_ADDRESS) ||',' ||TRIM(PATIENT_STATE);
PATIENT_CITY=PROPCASE(PATIENT_CITY);
AGE_REPORTED=PATIENT_AGE_REPORTED;
PERSON_LOCAL_ID=PATIENT_LOCAL_ID;
PATIENT_UID=PERSON_UID;
X = LENGTHN(TRIM(PATIENT_ADDRESS));
IF X>0 THEN ADDR_USE_CD_DESC= 'HOME';
ELSE  ADDR_USE_CD_DESC= '';
IF X>0 THEN ADDR_CD_DESC='HOUSE';
ELSE ADDR_CD_DESC='';

/*DROP AGE_REPORTED PATIENT_FIRST_NAME PATIENT_MIDDLE_NAME PATIENT_LAST_NAME PATIENT_LOCAL_ID PATIENT_DOB PATIENT_CURRENT_SEX;*/
RUN;
/***TODO DO UPTO THIS POINT */

DATA PROGRAM_AREA_CODE (KEEP=PROGRAM_AREA_CODE PROGRAM_AREA_DESC PROGRAM_AREA_ID);
SET NBS_SRT.PROGRAM_AREA_CODE;
PROGRAM_AREA_CODE=PROG_AREA_CD;
PROGRAM_AREA_DESC=PROG_AREA_DESC_TXT;
PROGRAM_AREA_ID=PUT(NBS_UID,Z5.);
RUN;
DATA LAB_RESULTS_ORDER_CONTACT1;
SET LABTEST_UPDATED ;
PROGRAM_AREA_ID=SUBSTR(PUT(OID,11.),7,5);
RUN;
PROC SORT DATA=LAB_RESULTS_ORDER_CONTACT1; BY PROGRAM_AREA_ID; RUN;
PROC SORT DATA=PROGRAM_AREA_CODE; BY PROGRAM_AREA_ID; RUN;
DATA LAB_RESULTS_ORDER_CONTACT2 (DROP=PROGRAM_AREA_ID OID PATIENT_UID);
MERGE LAB_RESULTS_ORDER_CONTACT1 (IN=INL) PROGRAM_AREA_CODE;
BY PROGRAM_AREA_ID;
IF INL;
RUN;

/*PROVIDER INFORMATION IS ON ORDERED TESTS - JOIN WITH ORDERED TESTS TABLE*/
PROC SQL;
CREATE TABLE PERSON_ORDER_PROVIDER AS SELECT
LABORDER.*, PROVIDER_PHONE_WORK, PROVIDER_FIRST_NAME, PROVIDER_MIDDLE_NAME, PROVIDER_LAST_NAME,PROVIDER_STREET_ADDRESS_1,PROVIDER_STREET_ADDRESS_2,PROVIDER_CITY ,PROVIDER_STATE,PROVIDER_ZIP ,
PROVIDER_COUNTY,PROVIDER_COUNTRY FROM NBS_RDB.D_PROVIDER P, LABTEST_ORDER1 LABORDER
WHERE LABORDER.ORDERING_PROVIDER_KEY= P.PROVIDER_KEY;
QUIT;
proc datasets memtype=DATA;
   delete LABTEST_ORDER LAB_RESULTS_ORDER_CONTACT1;
quit;
DATA PERSON_ORDER_PROVIDER; 
SET PERSON_ORDER_PROVIDER; 
LENGTH PROVIDER_ADDRESS $725;
PROVIDER_ADDRESS=TRIM(PROVIDER_STREET_ADDRESS_1);
IF LENGTHN(TRIM(PROVIDER_STREET_ADDRESS_2))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_STREET_ADDRESS_2);
IF LENGTHN(TRIM(PROVIDER_CITY))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_CITY);
IF LENGTHN(TRIM(PROVIDER_COUNTY))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_COUNTY);
IF LENGTHN(TRIM(PROVIDER_ZIP))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_ZIP);
IF LENGTHN(TRIM(PROVIDER_STATE))>0 THEN PROVIDER_ADDRESS=TRIM(PROVIDER_ADDRESS) ||',' ||TRIM(PROVIDER_STATE);
PROVIDER_CITY=PROPCASE(PROVIDER_CITY);
ORDERING_PROVIDER_NM=PROPCASE(TRIM(PROVIDER_LAST_NAME))||', '||PROPCASE(TRIM(PROVIDER_FIRST_NAME))||' '||PROPCASE(TRIM(PROVIDER_MIDDLE_NAME));
LENGTHP=LENGTHN(TRIM(PROVIDER_ADDRESS));
IF 	LENGTHP > 0 THEN PRV_ADDR_USE_CD_DESC='PRIMARY WORK PLACE';
IF 	LENGTHP > 0 THEN PRV_ADDR_CD_DESC='OFFICE';
PROVIDER_PHONE=PROVIDER_PHONE_WORK;
RUN;
PROC SQL;
CREATE TABLE REPORTING_ORG AS SELECT REPORTING_LAB_KEY FROM PERSON_ORDER_PROVIDER;
CREATE TABLE ORDERING_ORG AS SELECT ORDERING_ORG_KEY FROM PERSON_ORDER_PROVIDER;

CREATE TABLE LAB_ENTITY1 AS SELECT A.*,
REPORTING_LAB.ORGANIZATION_NAME AS REPORTING_FACILITY 'REPORTING_FACILITY',  
REPORTING_LAB.ORGANIZATION_FACILITY_ID AS REPORTING_FACILITY_CLIA_NBR 'REPORTING_FACILITY_CLIA_NBR', 
REPORTING_LAB.ORGANIZATION_LOCAL_ID AS REPORTING_FACILITY_ID 'REPORTING_FACILITY_ID',
REPORTING_LAB.ORGANIZATION_UID AS REPORTING_FACILITY_UID 'REPORTING_FACILITY_UID', 
REPORTING_LAB.ORGANIZATION_PHONE_WORK AS REPORTING_FACILITY_PHONE_NBR 'REPORTING_FACILITY_PHONE_NBR'
FROM REPORTING_ORG A , NBS_RDB.D_ORGANIZATION REPORTING_LAB
WHERE REPORTING_LAB.ORGANIZATION_KEY=A.REPORTING_LAB_KEY;

CREATE TABLE LAB_ENTITY2 AS SELECT A.*,
ORDERING_ORG.ORGANIZATION_LOCAL_ID AS ORDERING_FACILITY_ID 'ORDERING_FACILITY_ID',         
ORDERING_ORG.ORGANIZATION_NAME AS ORDERING_FACILITY 'ORDERING_FACILITY',          
ORDERING_ORG.ORGANIZATION_PHONE_WORK AS ORDERING_FACILITY_PHONE_NBR   'ORDERING_FACILITY_PHONE_NBR'
FROM ORDERING_ORG A , NBS_RDB.D_ORGANIZATION ORDERING_ORG
WHERE ORDERING_ORG.ORGANIZATION_KEY=A.ORDERING_ORG_KEY;
QUIT;
proc datasets memtype=DATA;
   delete REPORTING_ORG ORDERING_ORG;
QUIT;
PROC SORT DATA=PERSON_ORDER_PROVIDER; BY REPORTING_LAB_KEY; RUN;
PROC SORT DATA=LAB_ENTITY1; BY REPORTING_LAB_KEY; RUN;
DATA LAB_ORDER_ENTITY1;
   MERGE LAB_ENTITY1 PERSON_ORDER_PROVIDER;
   BY REPORTING_LAB_KEY;
RUN;
proc datasets memtype=DATA;
   delete PERSON_ORDER_PROVIDER LAB_ENTITY1;
quit;
PROC SORT DATA=LAB_ORDER_ENTITY1; BY ORDERING_ORG_KEY; RUN;
PROC SORT DATA=LAB_ENTITY2; BY ORDERING_ORG_KEY; RUN;
DATA LAB_ORDER_ENTITY;
   MERGE LAB_ENTITY2 LAB_ORDER_ENTITY1;
   BY ORDERING_ORG_KEY;
RUN;
proc datasets memtype=DATA;
   delete LAB_ENTITY2 LAB_ORDER_ENTITY1;
quit;
DATA LABTEST_UPDATED;
SET LABTEST_UPDATED;
ORDERED_TEST_UID=PARENT_TEST_PNTR;
RUN;
PROC SORT DATA= LABTEST_UPDATED; BY ORDERED_TEST_UID;RUN;
PROC SORT DATA= LAB_ORDER_ENTITY; BY LAB_TEST_KEY;RUN;
DATA LAB_ORDER_ENTITY; 
LENGTH INVESTIGATION_KEYS $2000;
LENGTH INV_KEY 8;
SET LAB_ORDER_ENTITY; BY LAB_TEST_KEY; 
RETAIN INVESTIGATION_KEYS;
RETAIN INV_KEY;
IF FIRST.LAB_TEST_KEY THEN INVESTIGATION_KEYS=' ';
IF FIRST.LAB_TEST_KEY THEN INV_KEY=.;
IF(INV_KEY NE INVESTIGATION_KEY) THEN INVESTIGATION_KEYS=CATX(', ',INVESTIGATION_KEYS,INVESTIGATION_KEY); 
INV_KEY=INVESTIGATION_KEY;
IF LAST.LAB_TEST_KEY; 
RUN; 
PROC SORT DATA= LAB_ORDER_ENTITY; BY ORDERED_TEST_UID;RUN;
PROC SQL;
CREATE TABLE LABTESTSINIT AS SELECT * FROM  LAB_ORDER_ENTITY LEFT OUTER JOIN LABTEST_UPDATED
ON 
LAB_ORDER_ENTITY.ORDERED_TEST_UID=LABTEST_UPDATED.ORDERED_TEST_UID; 
QUIT;
DATA LAB_RESULTS_ORDER_CONTACT2;
SET LAB_RESULTS_ORDER_CONTACT2;
ORDERED_TEST_UID=PARENT_TEST_PNTR;
RUN;
proc datasets memtype=DATA;
   delete LAB_ORDER_ENTITY LABTEST_UPDATED LAB_RESULT_COMMENT
	LABTEST_RESULTS_VAL PROGRAM_AREA_CODE;
quit;

PROC SORT DATA= LAB_RESULTS_ORDER_CONTACT2; BY RESULTED_TEST_UID;RUN;
PROC SORT DATA= LABTESTSINIT NODUPKEY; BY RESULTED_TEST_UID;RUN;
data LABTESTS;  MERGE LABTESTSINIT      LAB_RESULTS_ORDER_CONTACT2;  by RESULTED_TEST_UID;run;
PROC SORT DATA= LABTESTS; BY RESULTED_TEST_UID;RUN;
proc datasets memtype=DATA;
   delete LABTESTSINIT LAB_RESULTS_ORDER_CONTACT2;
quit;
PROC SORT DATA= LABTESTS; BY  CONDITION_CD;RUN;
/*FIRST GET THE CONDITION NAMES FOR THE CONDITION CODES THAT ARE PRESENT*/
PROC SQL;
CREATE TABLE CONDITION_CODE AS SELECT CONDITION_CD, CONDITION_SHORT_NM
FROM NBS_SRT.CONDITION_CODE
ORDER BY CONDITION_CD;
QUIT;
/*PROC SORT DATA=LABTESTS; BY CONDITION_CD; RUN;*/
PROC SORT DATA=CONDITION_CODE; BY CONDITION_CD; RUN;

DATA LABTESTS1;
LENGTH LOINC $20 CONDITION $50;
MERGE LABTESTS (IN=INL) CONDITION_CODE;
IF INL;
BY CONDITION_CD;
IF UPCASE(LAB_TEST_CD_SYS_NM)='LOINC' THEN
 DO;
  LOINC=LAB_TEST_CD;
 END;
RUN;

/*PROC FREQ DATA=LABTESTS1; *MISSING 16121 CONDITION NAMES, 18622 LOINC CODES;*/
/*TABLES LOINC;*/
/*RUN;*/

/*NOW MAP NON-LOINC CODES TO LOINC*/
PROC SORT DATA=NBS_SRT.LABTEST_LOINC NODUPKEY OUT=LABTEST_LOINC  (KEEP=LAB_TEST_CD LOINC_CD); BY LAB_TEST_CD; RUN;
PROC SORT DATA=LABTESTS1; BY LAB_TEST_CD; RUN;
DATA LABTESTS2;
MERGE LABTESTS1 (IN=INL) LABTEST_LOINC ;
BY LAB_TEST_CD;
IF INL;
IF LOINC =' ' THEN 
 DO;
  IF FIND(LAB_TEST_CD,'-',3)>0 THEN LOINC=LAB_TEST_CD;
  ELSE DO;
  LOINC=LOINC_CD;
  END;
 END;
RUN;
proc datasets memtype=DATA;
   delete LABTESTS1;
quit;

/*PROC FREQ DATA=LABTESTS2;  *MISSING 3090 LOINC CODES;*/
/*TABLES LOINC;*/
/*RUN;*/

/*CREATE A SPREADSHEET WITH MISSING LOINC MAP IN LABTEST_LOINC TABLE FROM SRT*/
DATA MISSING_LOINC_MAP (KEEP=LAB_TEST_CD LOINC);
SET LABTESTS2;
BY LAB_TEST_CD;
IF LOINC=' ';
IF FIRST.LAB_TEST_CD;
RUN;
/*TAKE THE MAPPED LOINC CODES AND MAP TO CONDITION*/
PROC SORT DATA=NBS_SRT.LOINC_CONDITION NODUPKEY OUT=LOINC_CONDITION (KEEP=LOINC_CD CONDITION_CD DISEASE_NM); BY LOINC_CD; RUN;
PROC SORT DATA=LABTESTS2; BY LOINC; RUN;
DATA LABTESTS3;
MERGE LABTESTS2 (IN=IN2) LOINC_CONDITION (RENAME=(LOINC_CD=LOINC CONDITION_CD=CONDITION_CD_SRT));
BY LOINC;
IF IN2;
IF CONDITION_SHORT_NM=' ' THEN
 DO;
  CONDITION_SHORT_NM=DISEASE_NM;
  CONDITION_CD=CONDITION_CD_SRT;
 END;
LABEL LOINC= ' ';
RUN;
proc datasets memtype=DATA;
   delete LABTESTS2;
quit;
/*SNOMED_CONDITION TABLE NEEDED TO BE TWEAKED BEFORE USING - SOME CODES HAVE MULTIPLE CONDITION NAMES*/
PROC SORT DATA=NBS_SRT.SNOMED_CONDITION NODUPKEY OUT=SNOMED_CONDITION (KEEP=SNOMED_CD CONDITION_CD DISEASE_NM); BY SNOMED_CD; RUN;
DATA SNOMED_CONDITION1 (KEEP=TEST_RESULT_VAL_CD SNOMED_CONDITION_NM SNOMED_CONDITION_CD);
LENGTH TEST_RESULT_VAL_CD $20;  *PREPARE FOR MERGE;
SET SNOMED_CONDITION;
BY SNOMED_CD;
TEST_RESULT_VAL_CD=SNOMED_CD;
SNOMED_CONDITION_NM=DISEASE_NM;
SNOMED_CONDITION_CD=CONDITION_CD;
IF FIRST.SNOMED_CD;  *GET RID OF A FEW DUPLICATE SNOMED CODES;
RUN;

PROC SORT DATA=SNOMED_CONDITION1;  BY TEST_RESULT_VAL_CD; RUN;
PROC SORT DATA=LABTESTS3; BY TEST_RESULT_VAL_CD; RUN;
DATA LABTESTS4 (DROP=SNOMED_CONDITION_NM SNOMED_CONDITION_CD DISEASE_NM CONDITION_CD_SRT LOINC_CD 
TEST_RESULT_VAL_CD_SYS_NM TEST_RESULT_VAL_CD);
MERGE LABTESTS3 (IN=INL) SNOMED_CONDITION1 ;
BY TEST_RESULT_VAL_CD;
IF INL;
IF ANYALPHA(TEST_RESULT_VAL_CD)=1 AND SUBSTR(TEST_RESULT_VAL_CD,2,1)='-' THEN
 DO;
  SNOMED=TEST_RESULT_VAL_CD;
  IF CONDITION = ' ' THEN 
   DO;
  	CONDITION=SNOMED_CONDITION_NM;
	CONDITION_SHORT_NM=SNOMED_CONDITION_NM;
   END; 
  IF CONDITION_CD=' ' THEN
   DO;
    CONDITION_CD=SNOMED_CONDITION_CD;
   END;
 END;
LABEL CONDITION_CODE=' ';
RUN;
proc datasets memtype=DATA;
   delete LABTESTS3;
quit;
DATA MISSING_SNOMED_MAP;
SET LABTESTS4 (KEEP=SNOMED CONDITION);
IF CONDITION = ' ';
RUN;
PROC SORT DATA=MISSING_SNOMED_MAP NODUPKEY OUT=MISSING_SNOMED_CONDITION_MAP; BY SNOMED; RUN;
DATA LABTESTS5(RENAME=(/*ADDRESS_USE=ADDR_USE_CD_DESC*/
/*ADDRESS_TYPE_DESC=ADDR_CD_DESC */
OID=PROGRAM_JURISDICTION_OID RESULT_COMMENTS=LAB_RESULT_COMMENTS 
PERSON_LOCATION_KEY=LOCATION_KEY PATIENT_CURR_GENDER=PERSON_CURR_GENDER
SPECIMEN_DESC=SPECIMEN_SRC_DESC SPECIMEN_SRC=SPECIMEN_SRC_CD 
LAB_TEST_DATE=LAB_TEST_DT PROGRAM_AREA_CODE=PROGRAM_AREA_CD 
));
RETAIN 
ACCESSION_NBR ALT_LAB_TEST_CD
ALT_LAB_TEST_CD_DESC ALT_LAB_TEST_CD_SYS_CD
ALT_LAB_TEST_CD_SYS_NM CONDITION
CONDITION_CODE DISEASE_CATEGORY
ELR_IND EVENT_DATE 
INTERPRETATION_FLG INVESTIGATION_STATUS 
INV_CASE_STATUS INV_LOCAL_ID 
INV_RPT_DT JURISDICTION_CD            
JURISDICTION_NM LAB_REPORT_CREATED_BY      
LAB_REPORT_CREATED_BY_UID  LAB_REPORT_DATE            
LAB_REPORT_LAST_UPDATED_BY LAB_REPORT_LAST_UPDATED_BY_UID 
LAB_RESULT_TXT_VAL LAB_RPT_CREATED_DT
LAB_RPT_LAST_UPDATE_DT LAB_RPT_LOCAL_ID 
LAB_RPT_RECEIVED_BY_PH_DT LAB_RPT_STATUS
LAB_TEST_DATE LAB_TEST_STATUS
LDF_GROUP_KEY LOCAL_RESULT_CODE 
LOCAL_RESULT_NAME LOCATION_KEY
LOINC NUMERIC_RESULT_WITHUNITS 
OID ORDERED_LABTEST_CD_SYS_NM   
ORDERED_LAB_TEST_CD ORDERED_LAB_TEST_CD_DESC
ORDERED_TEST ORDERED_TEST_CODE        
ORDERING_FACILITY_ID ORDERING_FACILITY          
ORDERING_FACILITY_PHONE_NBR ORDERING_PROVIDER_NM     
PATIENT_ADDRESS PATIENT_CITY             
PATIENT_COUNTY  PATIENT_CURR_GENDER      
PATIENT_DOB PATIENT_FIRST_NM   
PATIENT_HISPANIC_IND PATIENT_LAST_NM          
PATIENT_LOCAL_ID PATIENT_MIDDLE_NM        
PATIENT_REPORTED_AGE PATIENT_STATE            
PATIENT_TELEPHONE PATIENT_ZIP_CODE              
PERFORMING_LAB_CLIA_NBR PERFORMING_LAB_ID        
PERFORMING_LAB_NAME PERSON_LOCATION_KEY
PERSON_LOCATION_KEY PROGRAM_AREA_CODE
PROGRAM_AREA_DESC PROVIDER_ADDRESS         
PROVIDER_ADDRESS_COMMENTS PROVIDER_PHONE 
PRV_ADDR_CD_DESC PRV_ADDR_USE_CD_DESC
PATIENT_REPORTED_AGE_UNITS  PT_STREET_ADDR
REASON_FOR_TEST_DESC REASON_FOR_TEST_DESC
RECORD_STATUS_CD REPORTING_FACILITY  
REPORTING_FACILITY_CLIA_NBR REPORTING_FACILITY_ID
REPORTING_FACILITY_UID REPORTING_FACILITY_PHONE_NBR 
RESULTEDTEST_CD_SYS_NM RESULTEDTEST_CD_SYS_NM 
RESULTEDTEST_VAL_CD RESULTEDTEST_VAL_CD_DESC
RESULTED_LAB_TEST_CD RESULTED_LAB_TEST_CD_DESC
RESULTED_LAB_TEST_KEY RESULT_COMMENTS   
RESULT_REF_RANGE_FRM RESULT_REF_RANGE_TORESULT  
RESULT_TEST_METHOD_CD SNOMED
SPECIMEN_COLLECTION_DT SPECIMEN_DESC             
SPECIMEN_DETAILS SPECIMEN_SITE 
SPECIMEN_SITE_DESC TEST_METHOD_CD 
DOCUMENT_LINK
TEST_METHOD_CD_DESC;
LENGTH DISEASE_CATEGORY $40 ;

SET LABTESTS4;
EVENT_DATE = SPECIMEN_COLLECTION_DT;
IF SPECIMEN_COLLECTION_DT ~= .  THEN EVENT_DATE = SPECIMEN_COLLECTION_DT;
ELSE IF LAB_TEST_DATE ~= . THEN EVENT_DATE = LAB_TEST_DATE;
ELSE IF LAB_RPT_RECEIVED_BY_PH_DT ~=. THEN EVENT_DATE =LAB_RPT_RECEIVED_BY_PH_DT;
ELSE IF LAB_RPT_CREATED_DT ~=. THEN EVENT_DATE =LAB_RPT_CREATED_DT;
WHERE RESULTED_LAB_TEST_KEY NE .;
RUN;
proc datasets memtype=DATA;
   delete LABTESTS4;
quit;
PROC SORT DATA=LABTESTS5; BY RESULTED_LAB_TEST_KEY INVESTIGATION_KEY; RUN;
PROC SORT DATA= LABTESTS5 OUT=RDBDATA.LAB100 (DROP=LAB_TEST_KEY CONDITION);
 BY DESCENDING LAB_TEST_KEY ;
RUN;
PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM RDBDATA.LAB100),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB.LAB100) + (SELECT COUNT(*) FROM RDBDATA.LAB100),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM NBS_RDB.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=((SELECT COUNT(*) FROM RDBDATA.LAB100) -(SELECT COUNT(*) FROM RDBDATA.LAB100)),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM NBS_RDB.ACTIVITY_STATUS), 
PROCESS_UID= (SELECT PROCESS_UID FROM NBS_RDB.ETL_PROCESS WHERE PROCESS_NAME='LAB100');
QUIT;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID=. THEN ACTIVITY_LOG_DETAIL_UID=1;
ELSE ACTIVITY_LOG_DETAIL_UID= ACTIVITY_LOG_DETAIL_UID +1;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN LAB100 TABLE.'||
' THERE ARE NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOTAL NUMBER OF RECORD(S) IN THE LAB100 TABLE.';
RUN;
DATA RDBDATA.LAB100;
SET RDBDATA.LAB100;
RDB_LAST_REFRESH_TIME=DATETIME();
RUN;
%DBLOAD (LAB100, RDBDATA.LAB100);
%dbload(ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
QUIT;
