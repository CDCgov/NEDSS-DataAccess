%macro NON_STD_CASES;
PROC SQL;
CREATE TABLE PATIENT_LOCATION_KEYS_INIT 
AS SELECT DISTINCT	INVESTIGATION.INVESTIGATION_KEY AS INVESTIGATION_KEY 'INVESTIGATION_KEY',
	INVESTIGATION.INVESTIGATION_STATUS AS  INVESTIGATION_STATUS 'INVESTIGATION_STATUS',
	INVESTIGATION.INV_LOCAL_ID AS  INVESTIGATION_LOCAL_ID 'INVESTIGATION_LOCAL_ID',
	INVESTIGATION.EARLIEST_RPT_TO_CNTY_DT AS EARLIEST_RPT_TO_CNTY_DT 'EARLIEST_RPT_TO_CNTY_DT',
	INVESTIGATION.EARLIEST_RPT_TO_STATE_DT AS EARLIEST_RPT_TO_STATE_DT  'EARLIEST_RPT_TO_STATE_DT',
	INVESTIGATION.DIAGNOSIS_DT AS DIAGNOSIS_DATE 'DIAGNOSIS_DATE',
	INVESTIGATION.ILLNESS_ONSET_DT AS ILLNESS_ONSET_DATE  'ILLNESS_ONSET_DATE',          
	INVESTIGATION.INV_CASE_STATUS AS CASE_STATUS 'CASE_STATUS',
	INVESTIGATION.CASE_RPT_MMWR_WK AS MMWR_WEEK  'MMWR_WEEK',                   
	INVESTIGATION.CASE_RPT_MMWR_YR AS MMWR_YEAR  'MMWR_YEAR' ,                  
	INVESTIGATION.CASE_OID AS 	PROGRAM_JURISDICTION_OID 'PROGRAM_JURISDICTION_OID',
	INVESTIGATION.HSPTL_ADMISSION_DT AS HSPTL_ADMISSION_DT 'HSPTL_ADMISSION_DT',
	INVESTIGATION.INV_START_DT AS INV_START_DT 'INV_START_DT',
	INVESTIGATION.INV_RPT_DT AS INV_RPT_DT 'INV_RPT_DT',
	INVESTIGATION.CURR_PROCESS_STATE AS CURR_PROCESS_STATE 'CURR_PROCESS_STATE',
	INVESTIGATION.JURISDICTION_NM,
	EVENT_METRIC.ADD_TIME AS INVESTIGATION_CREATE_DATE 'INVESTIGATION_CREATE_DATE',
	EVENT_METRIC.ADD_USER_ID AS INVESTIGATION_CREATED_BY 'INVESTIGATION_CREATED_BY',
	EVENT_METRIC.LAST_CHG_TIME AS INVESTIGATION_LAST_UPDTD_DATE 'INVESTIGATION_LAST_UPDTD_DATE',
	EVENT_METRIC.LAST_CHG_USER_ID AS INVESTIGATION_LAST_UPDTD_BY 'INVESTIGATION_LAST_UPDTD_BY',
	EVENT_METRIC.PROG_AREA_DESC_TXT AS PROGRAM_AREA 'PROGRAM_AREA',
	GENERIC_CASE.PHYSICIAN_KEY AS GENERIC_PHYSICIAN_KEY 'GENERIC_PHYSICIAN_KEY',
	GENERIC_CASE.PATIENT_KEY AS GEN_PAT_KEY 'GEN_PAT_KEY',
	CRS_CASE.PHYSICIAN_KEY AS CRS_PHYSICIAN_KEY 'CRS_PHYSICIAN_KEY',
	CRS_CASE.PATIENT_KEY AS CRS_PAT_KEY 'CRS_PAT_KEY',
	MEASLES_CASE.PHYSICIAN_KEY AS MEASLES_PHYSICIAN_KEY 'MEASLES_PHYSICIAN_KEY',
	MEASLES_CASE.PATIENT_KEY AS MEASLES_PAT_KEY 'MEASLES_PAT_KEY',
	RUBELLA_CASE.PHYSICIAN_KEY AS RUBELLA_PHYSICIAN_KEY 'RUBELLA_PHYSICIAN_KEY',
	RUBELLA_CASE.PATIENT_KEY AS RUBELLA_PAT_KEY 'RUBELLA_PAT_KEY',
	HEPATITIS_CASE.PHYSICIAN_KEY AS HEPATITIS_PHYSICIAN_KEY 'HEPATITIS_PHYSICIAN_KEY',
	HEPATITIS_CASE.PATIENT_KEY AS HEPATITIS_PAT_KEY 'HEPATITIS_PAT_KEY',
	BMIRD_CASE.PHYSICIAN_KEY AS BMIRD_PHYSICIAN_KEY 'BMIRD_PHYSICIAN_KEY',
	BMIRD_CASE.PATIENT_KEY AS BMIRD_PAT_KEY 'BMIRD_PAT_KEY',
	BMIRD_CASE.FIRST_POSITIVE_CULTURE_DT AS FIRST_POSITIVE_CULTURE_DT 'FIRST_POSITIVE_CULTURE_DT',
	PERTUSSIS_CASE.PHYSICIAN_KEY AS PERTUSSIS_PHYSICIAN_KEY 'PERTUSSIS_PHYSICIAN_KEY',
	PERTUSSIS_CASE.PATIENT_KEY AS PERTUSSIS_PAT_KEY 'PERTUSSIS_PAT_KEY',
	F_TB_PAM.PHYSICIAN_KEY AS F_TB_PAM_PHYSICIAN_KEY 'F_TB_PAM_PHYSICIAN_KEY',
	F_TB_PAM.PERSON_KEY AS F_TB_PAM_PAT_KEY 'F_TB_PAM_PAT_KEY',
	F_VAR_PAM.PHYSICIAN_KEY AS F_VAR_PAM_PHYSICIAN_KEY 'F_VAR_PAM_PHYSICIAN_KEY',
	F_VAR_PAM.PERSON_KEY AS F_VAR_PAM_PAT_KEY 'F_VAR_PAM_PAT_KEY',
	F_PAGE_CASE.PHYSICIAN_KEY AS F_PAGE_CASE_PHYSICIAN_KEY 'F_PAGE_CASE_PHYSICIAN_KEY',
	F_PAGE_CASE.PATIENT_KEY AS F_PAGE_PATIENT_KEY 'F_PAGE_PATIENT_KEY'
FROM   
	nbs_rdb.INVESTIGATION
FULL JOIN 
	nbs_rdb.GENERIC_CASE ON GENERIC_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.CRS_CASE ON CRS_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN
	nbs_rdb.MEASLES_CASE ON MEASLES_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.RUBELLA_CASE ON RUBELLA_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.HEPATITIS_CASE ON HEPATITIS_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.BMIRD_CASE ON BMIRD_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.PERTUSSIS_CASE ON PERTUSSIS_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.F_TB_PAM  ON F_TB_PAM.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.F_VAR_PAM  ON F_VAR_PAM.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.EVENT_METRIC ON EVENT_METRIC.LOCAL_ID= INVESTIGATION.INV_LOCAL_ID
WHERE INVESTIGATION.CASE_TYPE= 'I' AND INVESTIGATION.RECORD_STATUS_CD = 'ACTIVE';
QUIT;
DATA PATIENT_LOCATION_KEYS_INIT;
SET PATIENT_LOCATION_KEYS_INIT;	
	IF GEN_PAT_KEY>1 THEN PATIENT_KEY= GEN_PAT_KEY;
	IF CRS_PAT_KEY>1 THEN PATIENT_KEY= CRS_PAT_KEY;
	IF MEASLES_PAT_KEY>1 THEN PATIENT_KEY= MEASLES_PAT_KEY;
	IF RUBELLA_PAT_KEY>1 THEN PATIENT_KEY= RUBELLA_PAT_KEY;
	IF HEPATITIS_PAT_KEY>1 THEN PATIENT_KEY= HEPATITIS_PAT_KEY;
	IF BMIRD_PAT_KEY>1 THEN PATIENT_KEY= BMIRD_PAT_KEY;
	IF PERTUSSIS_PAT_KEY>1 THEN PATIENT_KEY= PERTUSSIS_PAT_KEY;
	IF F_TB_PAM_PAT_KEY>1 THEN PATIENT_KEY= F_TB_PAM_PAT_KEY;
	IF F_PAGE_PATIENT_KEY>1 THEN PATIENT_KEY= F_PAGE_PATIENT_KEY;
	IF F_VAR_PAM_PAT_KEY>1 THEN PATIENT_KEY=F_VAR_PAM_PAT_KEY;
	if GENERIC_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=GENERIC_PHYSICIAN_KEY;
	IF CRS_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=CRS_PHYSICIAN_KEY;
	IF MEASLES_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=MEASLES_PHYSICIAN_KEY;
	IF RUBELLA_PHYSICIAN_KEY>1 THEN PHYSICIAN_KEY=RUBELLA_PHYSICIAN_KEY;
	IF HEPATITIS_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=HEPATITIS_PHYSICIAN_KEY;
	IF BMIRD_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=BMIRD_PHYSICIAN_KEY;
	IF PERTUSSIS_PHYSICIAN_KEY>1 THEN PHYSICIAN_KEY=PERTUSSIS_PHYSICIAN_KEY;
	IF F_TB_PAM_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=F_TB_PAM_PHYSICIAN_KEY;
	IF F_VAR_PAM_PHYSICIAN_KEY>1 THEN PHYSICIAN_KEY=F_VAR_PAM_PHYSICIAN_KEY;
	IF F_PAGE_CASE_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=F_PAGE_CASE_PHYSICIAN_KEY;
	DROP GENERIC_PHYSICIAN_KEY;
	DROP CRS_PHYSICIAN_KEY;
	DROP MEASLES_PHYSICIAN_KEY;
	DROP RUBELLA_PHYSICIAN_KEY;
	DROP HEPATITIS_PHYSICIAN_KEY;
	DROP BMIRD_PHYSICIAN_KEY;
	DROP PERTUSSIS_PHYSICIAN_KEY;
	DROP F_TB_PAM_PHYSICIAN_KEY;
	DROP F_VAR_PAM_PHYSICIAN_KEY;
	DROP F_PAGE_CASE_PHYSICIAN_KEY;
	DROP GEN_PAT_KEY;
	DROP CRS_PAT_KEY;
	DROP MEASLES_PAT_KEY;
	DROP RUBELLA_PAT_KEY;
	DROP HEPATITIS_PAT_KEY;
	DROP BMIRD_PAT_KEY;
	DROP PERTUSSIS_PAT_KEY;
	DROP F_TB_PAM_PAT_KEY;
	DROP F_VAR_PAM_PAT_KEY;
RUN;

%mend NON_STD_CASES; 
%macro STD_CASES;
PROC SQL;
CREATE TABLE PATIENT_LOCATION_KEYS_INIT 
AS SELECT DISTINCT	INVESTIGATION.INVESTIGATION_KEY AS INVESTIGATION_KEY 'INVESTIGATION_KEY',
	INVESTIGATION.INVESTIGATION_STATUS AS  INVESTIGATION_STATUS 'INVESTIGATION_STATUS',
	INVESTIGATION.INV_LOCAL_ID AS  INVESTIGATION_LOCAL_ID 'INVESTIGATION_LOCAL_ID',
	INVESTIGATION.EARLIEST_RPT_TO_CNTY_DT AS EARLIEST_RPT_TO_CNTY_DT 'EARLIEST_RPT_TO_CNTY_DT',
	INVESTIGATION.EARLIEST_RPT_TO_STATE_DT AS EARLIEST_RPT_TO_STATE_DT  'EARLIEST_RPT_TO_STATE_DT',
	INVESTIGATION.DIAGNOSIS_DT AS DIAGNOSIS_DATE 'DIAGNOSIS_DATE',
	INVESTIGATION.ILLNESS_ONSET_DT AS ILLNESS_ONSET_DATE  'ILLNESS_ONSET_DATE',          
	INVESTIGATION.INV_CASE_STATUS AS CASE_STATUS 'CASE_STATUS',
	INVESTIGATION.CASE_RPT_MMWR_WK AS MMWR_WEEK  'MMWR_WEEK',                   
	INVESTIGATION.CASE_RPT_MMWR_YR AS MMWR_YEAR  'MMWR_YEAR' ,                  
	INVESTIGATION.CASE_OID AS 	PROGRAM_JURISDICTION_OID 'PROGRAM_JURISDICTION_OID',
	INVESTIGATION.HSPTL_ADMISSION_DT AS HSPTL_ADMISSION_DT 'HSPTL_ADMISSION_DT',
	INVESTIGATION.INV_START_DT AS INV_START_DT 'INV_START_DT',
	INVESTIGATION.INV_RPT_DT AS INV_RPT_DT 'INV_RPT_DT',
	INVESTIGATION.CURR_PROCESS_STATE AS CURR_PROCESS_STATE 'CURR_PROCESS_STATE',
	INVESTIGATION.JURISDICTION_NM,
	INVESTIGATION.CURR_PROCESS_STATE AS CURR_PROCESS_STATE 'CURR_PROCESS_STATE',
	EVENT_METRIC.ADD_TIME AS INVESTIGATION_CREATE_DATE 'INVESTIGATION_CREATE_DATE',
	EVENT_METRIC.ADD_USER_ID AS INVESTIGATION_CREATED_BY 'INVESTIGATION_CREATED_BY',
	EVENT_METRIC.LAST_CHG_TIME AS INVESTIGATION_LAST_UPDTD_DATE 'INVESTIGATION_LAST_UPDTD_DATE',
	EVENT_METRIC.LAST_CHG_USER_ID AS INVESTIGATION_LAST_UPDTD_BY 'INVESTIGATION_LAST_UPDTD_BY',
	EVENT_METRIC.PROG_AREA_DESC_TXT AS PROGRAM_AREA 'PROGRAM_AREA',
	GENERIC_CASE.PHYSICIAN_KEY AS GENERIC_PHYSICIAN_KEY 'GENERIC_PHYSICIAN_KEY',
	GENERIC_CASE.PATIENT_KEY AS GEN_PAT_KEY 'GEN_PAT_KEY',
	CRS_CASE.PHYSICIAN_KEY AS CRS_PHYSICIAN_KEY 'CRS_PHYSICIAN_KEY',
	CRS_CASE.PATIENT_KEY AS CRS_PAT_KEY 'CRS_PAT_KEY',
	MEASLES_CASE.PHYSICIAN_KEY AS MEASLES_PHYSICIAN_KEY 'MEASLES_PHYSICIAN_KEY',
	MEASLES_CASE.PATIENT_KEY AS MEASLES_PAT_KEY 'MEASLES_PAT_KEY',
	RUBELLA_CASE.PHYSICIAN_KEY AS RUBELLA_PHYSICIAN_KEY 'RUBELLA_PHYSICIAN_KEY',
	RUBELLA_CASE.PATIENT_KEY AS RUBELLA_PAT_KEY 'RUBELLA_PAT_KEY',
	HEPATITIS_CASE.PHYSICIAN_KEY AS HEPATITIS_PHYSICIAN_KEY 'HEPATITIS_PHYSICIAN_KEY',
	HEPATITIS_CASE.PATIENT_KEY AS HEPATITIS_PAT_KEY 'HEPATITIS_PAT_KEY',
	BMIRD_CASE.PHYSICIAN_KEY AS BMIRD_PHYSICIAN_KEY 'BMIRD_PHYSICIAN_KEY',
	BMIRD_CASE.PATIENT_KEY AS BMIRD_PAT_KEY 'BMIRD_PAT_KEY',
	BMIRD_CASE.FIRST_POSITIVE_CULTURE_DT AS FIRST_POSITIVE_CULTURE_DT 'FIRST_POSITIVE_CULTURE_DT',
	PERTUSSIS_CASE.PHYSICIAN_KEY AS PERTUSSIS_PHYSICIAN_KEY 'PERTUSSIS_PHYSICIAN_KEY',
	PERTUSSIS_CASE.PATIENT_KEY AS PERTUSSIS_PAT_KEY 'PERTUSSIS_PAT_KEY',
	F_TB_PAM.PHYSICIAN_KEY AS F_TB_PAM_PHYSICIAN_KEY 'F_TB_PAM_PHYSICIAN_KEY',
	F_TB_PAM.PERSON_KEY AS F_TB_PAM_PAT_KEY 'F_TB_PAM_PAT_KEY',
	F_VAR_PAM.PHYSICIAN_KEY AS F_VAR_PAM_PHYSICIAN_KEY 'F_VAR_PAM_PHYSICIAN_KEY',
	F_VAR_PAM.PERSON_KEY AS F_VAR_PAM_PAT_KEY 'F_VAR_PAM_PAT_KEY',
	F_PAGE_CASE.PHYSICIAN_KEY AS F_PAGE_CASE_PHYSICIAN_KEY 'F_PAGE_CASE_PHYSICIAN_KEY',
	F_PAGE_CASE.PATIENT_KEY AS F_PAGE_PATIENT_KEY 'F_PAGE_PATIENT_KEY',
	F_STD_PAGE_CASE.PATIENT_KEY AS F_STD_PATIENT_KEY 'F_STD_PATIENT_KEY'
FROM   
	nbs_rdb.INVESTIGATION
FULL JOIN 
	nbs_rdb.GENERIC_CASE ON GENERIC_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.CRS_CASE ON CRS_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN
	nbs_rdb.MEASLES_CASE ON MEASLES_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.RUBELLA_CASE ON RUBELLA_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.HEPATITIS_CASE ON HEPATITIS_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.BMIRD_CASE ON BMIRD_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.PERTUSSIS_CASE ON PERTUSSIS_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.F_TB_PAM  ON F_TB_PAM.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.F_VAR_PAM  ON F_VAR_PAM.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.F_PAGE_CASE ON F_PAGE_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.F_STD_PAGE_CASE ON F_STD_PAGE_CASE.INVESTIGATION_KEY = INVESTIGATION.INVESTIGATION_KEY
FULL JOIN 
	nbs_rdb.EVENT_METRIC ON EVENT_METRIC.LOCAL_ID= INVESTIGATION.INV_LOCAL_ID
WHERE INVESTIGATION.CASE_TYPE= 'I' AND INVESTIGATION.RECORD_STATUS_CD = 'ACTIVE';
QUIT;
DATA PATIENT_LOCATION_KEYS_INIT;
SET PATIENT_LOCATION_KEYS_INIT;	
	IF GEN_PAT_KEY>1 THEN PATIENT_KEY= GEN_PAT_KEY;
	IF CRS_PAT_KEY>1 THEN PATIENT_KEY= CRS_PAT_KEY;
	IF MEASLES_PAT_KEY>1 THEN PATIENT_KEY= MEASLES_PAT_KEY;
	IF RUBELLA_PAT_KEY>1 THEN PATIENT_KEY= RUBELLA_PAT_KEY;
	IF HEPATITIS_PAT_KEY>1 THEN PATIENT_KEY= HEPATITIS_PAT_KEY;
	IF BMIRD_PAT_KEY>1 THEN PATIENT_KEY= BMIRD_PAT_KEY;
	IF PERTUSSIS_PAT_KEY>1 THEN PATIENT_KEY= PERTUSSIS_PAT_KEY;
	IF F_TB_PAM_PAT_KEY>1 THEN PATIENT_KEY= F_TB_PAM_PAT_KEY;
	IF F_PAGE_PATIENT_KEY>1 THEN PATIENT_KEY= F_PAGE_PATIENT_KEY;
	IF F_STD_PATIENT_KEY>1 THEN PATIENT_KEY=F_STD_PATIENT_KEY;
	IF F_VAR_PAM_PAT_KEY>1 THEN PATIENT_KEY=F_VAR_PAM_PAT_KEY;
	if GENERIC_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=GENERIC_PHYSICIAN_KEY;
	IF CRS_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=CRS_PHYSICIAN_KEY;
	IF MEASLES_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=MEASLES_PHYSICIAN_KEY;
	IF RUBELLA_PHYSICIAN_KEY>1 THEN PHYSICIAN_KEY=RUBELLA_PHYSICIAN_KEY;
	IF HEPATITIS_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=HEPATITIS_PHYSICIAN_KEY;
	IF BMIRD_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=BMIRD_PHYSICIAN_KEY;
	IF PERTUSSIS_PHYSICIAN_KEY>1 THEN PHYSICIAN_KEY=PERTUSSIS_PHYSICIAN_KEY;
	IF F_TB_PAM_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=F_TB_PAM_PHYSICIAN_KEY;
	IF F_VAR_PAM_PHYSICIAN_KEY>1 THEN PHYSICIAN_KEY=F_VAR_PAM_PHYSICIAN_KEY;
	IF F_PAGE_CASE_PHYSICIAN_KEY>1 THEN  PHYSICIAN_KEY=F_PAGE_CASE_PHYSICIAN_KEY;
	DROP GENERIC_PHYSICIAN_KEY;
	DROP CRS_PHYSICIAN_KEY;
	DROP MEASLES_PHYSICIAN_KEY;
	DROP RUBELLA_PHYSICIAN_KEY;
	DROP HEPATITIS_PHYSICIAN_KEY;
	DROP BMIRD_PHYSICIAN_KEY;
	DROP PERTUSSIS_PHYSICIAN_KEY;
	DROP F_TB_PAM_PHYSICIAN_KEY;
	DROP F_VAR_PAM_PHYSICIAN_KEY;
	DROP F_PAGE_CASE_PHYSICIAN_KEY;
	DROP GEN_PAT_KEY;
	DROP CRS_PAT_KEY;
	DROP MEASLES_PAT_KEY;
	DROP RUBELLA_PAT_KEY;
	DROP HEPATITIS_PAT_KEY;
	DROP BMIRD_PAT_KEY;
	DROP PERTUSSIS_PAT_KEY;
	DROP F_TB_PAM_PAT_KEY;
	DROP F_VAR_PAM_PAT_KEY;
	DROP F_PAGE_PATIENT_KEY;
	DROP F_STD_PATIENT_KEY;
RUN;

%mend STD_CASES;

PROC SQL;
CREATE TABLE STD_CHECKER_MASTER_LAST 
(COUNTSTD NUM);
INSERT INTO STD_CHECKER_MASTER_LAST( COUNTSTD) VALUES 
(NULL);
UPDATE STD_CHECKER_MASTER_LAST SET COUNTSTD= (select  count(*) from nbs_cdc.case_management);
QUIT;

DATA _null_;
  set STD_CHECKER_MASTER_LAST;
  if COUNTSTD>0  then call execute('%STD_CASES');
	else call execute('%NON_STD_CASES');

RUN;




proc sql; 
create table CONFIRMATION_METHOD_BASE as 
select 
confirmation_method.*, confirmation_method_group.investigation_key, confirmation_method_group.confirmation_dt from 
nbs_rdb.confirmation_method, nbs_rdb.confirmation_method_group, 
PATIENT_LOCATION_KEYS_INIT
where 
	confirmation_method_group.confirmation_method_key= confirmation_method.confirmation_method_key
and confirmation_method_group.investigation_key =PATIENT_LOCATION_KEYS_INIT.investigation_key
order by confirmation_method_group.investigation_key;
quit;
PROC TRANSPOSE DATA=CONFIRMATION_METHOD_BASE OUT=CONFIRMATION_METHOD_PIVOT;
    BY investigation_key;
	COPY investigation_key confirmation_dt;
	VAR CONFIRMATION_METHOD_DESC;
RUN;
PROC SQL;
DELETE FROM CONFIRMATION_METHOD_PIVOT WHERE _NAME_ IS NULL;
QUIT;
data CONFIRMATION_METHOD_PIVOT;
set CONFIRMATION_METHOD_PIVOT;
LENGTH CONFIRMATION_METHOD $3000;
CONFIRMATION_METHOD = catx(" | ", of COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8, COL9,COL10,COL11,COL12,COL13);
x = index(CONFIRMATION_METHOD, ' | .');
if x > 0 then CONFIRMATION_METHOD = substr(CONFIRMATION_METHOD, 1, x);
if lengthn(CONFIRMATION_METHOD)>0 then x1 = lengthn(CONFIRMATION_METHOD);
else x1= -1;
if x= x1 then CONFIRMATION_METHOD = substr(CONFIRMATION_METHOD, 1, (x-1));
DROP COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10 COL11 COL12 COL13 X X1 _LABEL_ _NAME_;
RUN;

/*START*
PROC SQL;
create table CONFIRMATION_DATE as 
select DISTINCT
confirmation_method_group.investigation_key, 
confirmation_method_group.confirmation_dt AS CONFIRMATION_DT 'CONFIRMATION_DT'
from 
nbs_rdb.confirmation_method_group, PATIENT_LOCATION_KEYS_INIT
where 
confirmation_method_group.investigation_key =PATIENT_LOCATION_KEYS_INIT.investigation_key
order by PATIENT_LOCATION_KEYS_INIT.investigation_key;
QUIT;
*/
PROC SQL;
create table PATIENT_LOCATION_KEYS as 
select A.*, B.CONFIRMATION_METHOD, B.CONFIRMATION_DT
from 
CONFIRMATION_METHOD_PIVOT B inner join PATIENT_LOCATION_KEYS_INIT A
on a.investigation_key = b.investigation_key;
QUIT;
PROC SQL;
CREATE TABLE 
	PATIENT_INFO
AS SELECT 
	KEYS.*,
	C.CONDITION_DESC AS DISEASE 'DISEASE',
	C.CONDITION_CD AS DISEASE_CD 'DISEASE_CD'
FROM
	PATIENT_LOCATION_KEYS keys
INNER JOIN  
	nbs_rdb.CASE_COUNT CC 
ON 	
	keys.investigation_key=CC.investigation_key
INNER JOIN  
	nbs_rdb.CONDITION C
ON 
	C.CONDITION_KEY=CC.CONDITION_KEY 
ORDER BY 
	CONDITION_DESC;
QUIT;
PROC SQL NOPRINT;
	
	CREATE TABLE PHYSICIAN_INFO AS SELECT KEYS.*,
		PROVIDER_LAST_NAME AS PHYSICIAN_LAST_NAME 'PHYSICIAN_LAST_NAME',
		PROVIDER_FIRST_NAME AS PHYSICIAN_FIRST_NAME 'PHYSICIAN_FIRST_NAME' 
		FROM PATIENT_INFO KEYS left outer join nbs_rdb.D_PROVIDER ON
		PATIENT_INFO.PHYSICIAN_KEY =D_PROVIDER.PROVIDER_KEY
		ORDER BY PATIENT_KEY;
QUIT;
PROC SORT DATA=PHYSICIAN_INFO;
	BY INVESTIGATION_KEY;
RUN;
PROC SQL;

CREATE TABLE 
	PATIENT_DETAILS AS
SELECT 
	A.*, 
	PATIENT.PATIENT_FIRST_NAME AS PATIENT_FIRST_NAME 'PATIENT_FIRST_NAME', 
	PATIENT.PATIENT_LAST_NAME AS PATIENT_LAST_NAME 'PATIENT_LAST_NAME',
	PATIENT.PATIENT_COUNTY AS PATIENT_COUNTY  'PATIENT_COUNTY',
	/*PATIENT.CNTY_FIPS AS PATIENT_COUNTY_FIPS 'PATIENT_COUNTY_FIPS',*/
	PATIENT_COUNTY_CODE,
	PATIENT.PATIENT_STREET_ADDRESS_1 AS  PATIENT_STREET_ADDRESS_1 'PATIENT_STREET_ADDRESS_1',
	PATIENT.PATIENT_STREET_ADDRESS_2 AS   PATIENT_STREET_ADDRESS_2 'PATIENT_STREET_ADDRESS_2',
	PATIENT.PATIENT_CITY AS  PATIENT_CITY  'PATIENT_CITY',
	PATIENT.PATIENT_STATE AS   PATIENT_STATE 'PATIENT_STATE',
	PATIENT.PATIENT_ZIP AS   PATIENT_ZIP 'PATIENT_ZIP',

	PATIENT.PATIENT_ETHNICITY AS PATIENT_HISPANIC_IND 'PATIENT_HISPANIC_IND',
	PATIENT.PATIENT_LOCAL_ID AS PATIENT_LOCAL_ID 'PATIENT_LOCAL_ID',
	PATIENT.PATIENT_DOB AS PATIENT_DOB 'PATIENT_DOB',
	PATIENT.PATIENT_CURRENT_SEX AS PATIENT_CURRENT_SEX 'PATIENT_CURRENT_SEX',
	PATIENT.PATIENT_AGE_REPORTED AS AGE_REPORTED 'AGE_REPORTED',
	PATIENT.PATIENT_AGE_REPORTED_UNIT AS AGE_REPORTED_UNIT 'AGE_REPORTED_UNIT',
	PATIENT.PATIENT_ETHNICITY AS PATIENT_ETHNICITY 'PATIENT_ETHNICITY',
	PATIENT.PATIENT_RACE_CALCULATED AS RACE_CALCULATED 'RACE_CALCULATED',
	PATIENT.PATIENT_RACE_CALC_DETAILS AS RACE_CALC_DETAILS 'RACE_CALC_DETAILS'
FROM 
	PHYSICIAN_INFO A
LEFT OUTER JOIN  
	nbs_rdb.D_PATIENT PATIENT
ON 
	PATIENT.PATIENT_KEY=A.PATIENT_KEY;

QUIT;
PROC SQL;
CREATE TABLE INV_WITH_USER AS 
   SELECT A.*,  
          B.FIRST_NM AS CREATEUSER_FIRST_NM,B.LAST_NM AS CREATEUSER_LAST_NM,
		  C.FIRST_NM AS EDITUSER_FIRST_NM, C.LAST_NM AS EDITUSER_LAST_NM
    FROM 
    	PATIENT_DETAILS A 
    	LEFT JOIN 
    	nbs_rdb.USER_PROFILE B
    ON 
     	A.INVESTIGATION_CREATED_BY=B.NEDSS_ENTRY_ID
	LEFT JOIN 
		nbs_rdb.USER_PROFILE C
	ON 
		A.INVESTIGATION_LAST_UPDTD_BY=C.NEDSS_ENTRY_ID;
QUIT;
DATA INV_WITH_USER;
SET INV_WITH_USER;
DROP INVESTIGATION_CREATED_BY;
DROP INVESTIGATION_LAST_UPDTD_BY;
RUN;
DATA INV_WITH_USER;
SET INV_WITH_USER;
IF LENGTHN(TRIM(CREATEUSER_FIRST_NM))> 0 AND LENGTHN(TRIM(CREATEUSER_LAST_NM))>0  THEN INVESTIGATION_CREATED_BY = TRIM(CREATEUSER_LAST_NM)|| ',' ||TRIM(CREATEUSER_FIRST_NM);
ELSE IF LENGTHN(TRIM(CREATEUSER_LAST_NM))>0 THEN INVESTIGATION_CREATED_BY = TRIM(CREATEUSER_LAST_NM);
ELSE IF LENGTHN(TRIM(CREATEUSER_LAST_NM))>0 THEN INVESTIGATION_CREATED_BY= TRIM(CREATEUSER_FIRST_NM);
IF LENGTHN(TRIM(EDITUSER_LAST_NM))> 0 AND LENGTHN(TRIM(EDITUSER_FIRST_NM))>0  THEN INVESTIGATION_LAST_UPDTD_BY = TRIM(EDITUSER_LAST_NM)|| ',' ||TRIM(EDITUSER_FIRST_NM);
ELSE IF LENGTHN(TRIM(EDITUSER_LAST_NM))>0 THEN INVESTIGATION_LAST_UPDTD_BY = TRIM(EDITUSER_FIRST_NM);
ELSE IF LENGTHN(TRIM(EDITUSER_LAST_NM))>0 THEN INVESTIGATION_LAST_UPDTD_BY = TRIM(EDITUSER_FIRST_NM);
RUN;
PROC SQL;
CREATE TABLE 
	INV_SUMM_DATAMART_INIT AS 
SELECT A.*,  NOTI.NOTIFICATION_STATUS,
NOTI.NOTIFICATION_LOCAL_ID, NOTI.NOTIFICATION_SUBMITTED_BY ,
RDB_DATE.DATE_MM_DD_YYYY  AS NOTIFICATION_CREATE_DATE 'NOTIFICATION_CREATE_DATE', 
INVESTIGATION_LAST_UPDTD_DATE AS NOTIFICATION_LAST_UPDATED_DATE 'NOTIFICATION_LAST_UPDATED_DATE',
INVESTIGATION_LAST_UPDTD_BY AS NOTIFICATION_LAST_UPDATED_USER 'NOTIFICATION_LAST_UPDATED_USER',
trim(NOTIFUSER.LAST_NM) ||', '||trim(NOTIFUSER.FIRST_NM) AS NOTIFICATION_SUBMITTER 'NOTIFICATION_SUBMITTER'

FROM 
	INV_WITH_USER A
LEFT OUTER JOIN 
	nbs_rdb.NOTIFICATION_EVENT NOT_EVENT
ON 
	A.INVESTIGATION_KEY=NOT_EVENT.INVESTIGATION_KEY
LEFT OUTER JOIN 
	nbs_rdb.NOTIFICATION NOTI
ON
	NOTI.NOTIFICATION_KEY=NOT_EVENT.NOTIFICATION_KEY
LEFT OUTER JOIN nbs_rdb.RDB_DATE
ON
   NOT_EVENT.NOTIFICATION_SUBMIT_DT_KEY= RDB_DATE.DATE_KEY
LEFT OUTER JOIN nbs_rdb.USER_PROFILE NOTIFUSER
ON
NOTI.NOTIFICATION_SUBMITTED_BY=NOTIFUSER.NEDSS_ENTRY_ID
;	
QUIT;
PROC SQL;
CREATE TABLE 
	INV_SUMM_DATAMART AS 
SELECT
DISTINCT 
	A.INVESTIGATION_KEY,
	A.PATIENT_LOCAL_ID,
	A.PATIENT_KEY,
	A.INVESTIGATION_LOCAL_ID,
	A.DISEASE,
	A.DISEASE_CD,
	A.PATIENT_FIRST_NAME,
	A.PATIENT_LAST_NAME,
	A.PATIENT_DOB,
	A.PATIENT_CURRENT_SEX,
	A.AGE_REPORTED,
	A.AGE_REPORTED_UNIT,
	A.PATIENT_STREET_ADDRESS_1,
	A.PATIENT_STREET_ADDRESS_2,
	A.PATIENT_CITY ,
	A.PATIENT_STATE,
	A.PATIENT_ZIP ,
	A.PATIENT_COUNTY  ,
	A.PATIENT_ETHNICITY  ,
	A.RACE_CALCULATED   ,
	A.RACE_CALC_DETAILS ,
	A.INVESTIGATION_STATUS,
	A.EARLIEST_RPT_TO_CNTY_DT,
	A.EARLIEST_RPT_TO_STATE_DT,
	A.DIAGNOSIS_DATE,
	A.ILLNESS_ONSET_DATE ,
	A.CASE_STATUS,
	A.MMWR_WEEK,
	A.MMWR_YEAR ,
	A.INVESTIGATION_CREATE_DATE,
	A.INVESTIGATION_CREATED_BY,
	A.INVESTIGATION_LAST_UPDTD_DATE,
	A.NOTIFICATION_STATUS           ,
	A.INVESTIGATION_LAST_UPDTD_BY   ,
	A.PROGRAM_JURISDICTION_OID,
	A.PROGRAM_AREA,
	A.PHYSICIAN_LAST_NAME,
	A.PHYSICIAN_FIRST_NAME,
	A.NOTIFICATION_LOCAL_ID,
	A.NOTIFICATION_CREATE_DATE,
    A.NOTIFICATION_SUBMITTER,
	A.NOTIFICATION_LAST_UPDATED_DATE,
	A.NOTIFICATION_LAST_UPDATED_USER,
	A.FIRST_POSITIVE_CULTURE_DT,
	A.INV_START_DT,
	A.HSPTL_ADMISSION_DT,
	A.INV_RPT_DT,
	A.CONFIRMATION_DT,
	A.CONFIRMATION_METHOD,
	A.CURR_PROCESS_STATE,
	A.JURISDICTION_NM,
	A.PATIENT_COUNTY_CODE,
	B.LABORATORY_INFORMATION,
	B.SPECIMEN_COLLECTION_DT AS EARLIEST_SPECIMEN_COLLECT_DATE 'EARLIEST_SPECIMEN_COLLECT_DATE'
FROM 
	INV_SUMM_DATAMART_INIT A left outer join
	rdbdata.CASE_LAB_DATAMART_MODIFIED B 
on	A.INVESTIGATION_KEY=B.INVESTIGATION_KEY;
 QUIT;	DATA INV_SUMM_DATAMART;
	SET INV_SUMM_DATAMART;
	format EVENT_DATE datetime.;
	length EVENT_DATE_TYPE $200;
	IF MISSING(NOTIFICATION_CREATE_DATE) THEN DO;
		NOTIFICATION_LAST_UPDATED_DATE=.;
	 END;
	IF MISSING(NOTIFICATION_CREATE_DATE) THEN DO;
		NOTIFICATION_LAST_UPDATED_USER=.;
	 END;
	/* THIS IS THE DEFAULT VALUE */
	EVENT_DATE =INVESTIGATION_CREATE_DATE; 
	EVENT_DATE_TYPE	='Investigation Add Date';
	IF HSPTL_ADMISSION_DT~=. AND EVENT_DATE > HSPTL_ADMISSION_DT THEN DO;
		EVENT_DATE = HSPTL_ADMISSION_DT;
		EVENT_DATE_TYPE	='Hospitalization Admit Date';
	END;
	IF CONFIRMATION_DT~=. AND EVENT_DATE > CONFIRMATION_DT THEN DO;
		EVENT_DATE = CONFIRMATION_DT;
		EVENT_DATE_TYPE	='Confirmation Date';
	END;
	IF INV_START_DT~=. AND EVENT_DATE > INV_START_DT THEN DO;
		EVENT_DATE = INV_START_DT;
		EVENT_DATE_TYPE	='Investigation Start Date';
	END;
	IF INV_RPT_DT~=. AND EVENT_DATE > INV_RPT_DT THEN DO;
		EVENT_DATE = INV_RPT_DT;
		EVENT_DATE_TYPE	='Date of Report';
	END;
	IF EARLIEST_RPT_TO_STATE_DT~=. AND EVENT_DATE > EARLIEST_RPT_TO_STATE_DT  THEN DO;
		EVENT_DATE =EARLIEST_RPT_TO_STATE_DT;
		EVENT_DATE_TYPE	='Earliest date received by the state health department';
	END;
	
	IF  EARLIEST_RPT_TO_CNTY_DT~=. AND EVENT_DATE >  EARLIEST_RPT_TO_CNTY_DT THEN DO;
		EVENT_DATE =  EARLIEST_RPT_TO_CNTY_DT;
		EVENT_DATE_TYPE	='Earliest date received by the county/local health department';
	END;
	
	IF DIAGNOSIS_DATE~=. THEN DO;
		EVENT_DATE = DIAGNOSIS_DATE; 
		EVENT_DATE_TYPE	='Date of Diagnosis';
	END;
	
	IF EARLIEST_SPECIMEN_COLLECT_DATE~=. THEN DO;
		EVENT_DATE = EARLIEST_SPECIMEN_COLLECT_DATE;
		EVENT_DATE_TYPE	='Specimen Collection Date of Earliest Associated Lab';
	END;
	
	IF ILLNESS_ONSET_DATE~=. THEN DO;
		EVENT_DATE = ILLNESS_ONSET_DATE; 
		EVENT_DATE_TYPE	='Illness Onset Date';
	END;
	RUN;
PROC SORT DATA=INV_SUMM_DATAMART NODUPKEY OUT=rdbdata.INV_SUMM_DATAMART; BY INVESTIGATION_KEY; RUN;
%dbload (INV_SUMM_DATAMART, rdbdata.INV_SUMM_DATAMART);
