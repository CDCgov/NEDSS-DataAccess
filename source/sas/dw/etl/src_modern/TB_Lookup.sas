
%macro assign_additional_key (ds, key);
 data &ds;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_key;
PROC SQL;
CREATE TABLE L_TB_PAM_N AS
	SELECT TB_PAM_UID  FROM nbs_rdb.S_TB_PAM
	except SELECT TB_PAM_UID  FROM  nbs_rdb.L_TB_PAM;
CREATE TABLE L_TB_PAM_E AS
	SELECT S_TB_PAM.TB_PAM_UID, L_TB_PAM.TB_PAM_KEY, L_TB_PAM.D_TB_PAM_KEY  
		FROM nbs_rdb.S_TB_PAM, nbs_rdb.L_TB_PAM
where S_TB_PAM.TB_PAM_UID= L_TB_PAM.TB_PAM_UID;
ALTER TABLE L_TB_PAM_N ADD TB_PAM_KEY_MAX_VAL NUMERIC;
UPDATE L_TB_PAM_N SET TB_PAM_KEY_MAX_VAL=(select max(TB_PAM_KEY) from nbs_rdb.L_TB_PAM);
QUIT;
 %assign_additional_key (L_TB_PAM_N, TB_PAM_KEY);
 PROC SORT DATA=L_TB_PAM_N nodupkey; BY TB_PAM_KEY; RUN;
DATA L_TB_PAM_N;
SET L_TB_PAM_N;
if TB_PAM_KEY_MAX_VAL  ~=. then 
TB_PAM_KEY= TB_PAM_KEY+TB_PAM_KEY_MAX_VAL;
DROP TB_PAM_KEY_MAX_VAL;
RUN;

DATA L_TB_PAM_N;
RETAIN
RVTC_PAM_UID TB_PAM_KEY D_TB_PAM_KEY;
	SET L_TB_PAM_N;
	D_TB_PAM_KEY=TB_PAM_KEY;
	IF TB_PAM_UID ~>0 THEN TB_PAM_UID=1;
RUN;
data L_TB_PAM_N;
set L_TB_PAM_N;
if TB_PAM_UID ~=. then output;
run;
PROC SQL;
%DBLOAD (L_TB_PAM, L_TB_PAM_N);
PROC SQL;
CREATE TABLE L_TB_HIV_BASE_NEW AS
	SELECT TB_PAM_UID  FROM S_TB_HIV
	except SELECT TB_PAM_UID  FROM  nbs_rdb.L_TB_HIV;

CREATE TABLE L_TB_HIV_E AS
	SELECT S_TB_HIV.TB_PAM_UID, L_TB_HIV.TB_HIV_KEY, L_TB_HIV.D_TB_HIV_KEY  FROM nbs_rdb.S_TB_HIV, nbs_rdb.L_TB_HIV
where S_TB_HIV.TB_PAM_UID= L_TB_HIV.TB_PAM_UID;

ALTER TABLE L_TB_HIV_BASE_NEW ADD TB_HIV_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_TB_HIV_BASE_NEW ADD D_TB_HIV_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_TB_HIV_BASE_NEW ADD SOURCE_COUNT NUMERIC;
UPDATE L_TB_HIV_BASE_NEW SET TB_HIV_KEY_MAX_VAL=(select max(TB_HIV_KEY) from nbs_rdb.L_TB_HIV);
UPDATE L_TB_HIV_BASE_NEW SET D_TB_HIV_KEY_MAX_VAL=(select max(D_TB_HIV_KEY) from nbs_rdb.L_TB_HIV);
UPDATE L_TB_HIV_BASE_NEW SET SOURCE_COUNT=(select count(*) from S_TB_HIV);
QUIT;
 %ASSIGN_KEY (L_TB_HIV_BASE_NEW, D_TB_HIV_KEY);
DATA L_TB_HIV_BASE_NEW;
SET L_TB_HIV_BASE_NEW;
if TB_HIV_KEY_MAX_VAL  ~=. then 
D_TB_HIV_KEY= D_TB_HIV_KEY+D_TB_HIV_KEY_MAX_VAL;
if SOURCE_COUNT <1 then TB_HIV_KEY=null and D_TB_HIV_KEY=null and TB_PAM_UID=null; 
/*DROP D_TB_HIV_KEY_MAX_VAL;*/
RUN;
%macro assign_key2 (ds, key);
 data &ds;
  retain &key 0;
  if &key=1 then output;
  set &ds;
	&key+1;
	output;
 run;
%mend assign_key2;
PROC SQL;
CREATE TABLE L_TB_HIV_N AS 
   SELECT S_TB_PAM.TB_PAM_UID, L_TB_HIV_BASE_NEW.TB_PAM_UID as HIV_PAM_UID 'HIV_PAM_UID', D_TB_HIV_KEY,
   TB_HIV_KEY_MAX_VAL, SOURCE_COUNT
	   FROM   S_TB_PAM LEFT OUTER JOIN L_TB_HIV_BASE_NEW
           ON L_TB_HIV_BASE_NEW.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
QUIT;
 %assign_key2 (L_TB_HIV_N, TB_HIV_KEY);
DATA L_TB_HIV_N;
RETAIN
RVTC_PAM_UID HIV_PAM_UID D_TB_HIV_KEY TB_HIV_KEY D_TB_HIV_KEY_MAN;
	SET L_TB_HIV_N;
	IF D_TB_HIV_KEY ~>0 THEN D_TB_HIV_KEY=1;
RUN;
PROC SORT DATA=L_TB_HIV_N nodupkey; BY TB_HIV_KEY; RUN;
DATA L_TB_HIV_N;
SET L_TB_HIV_N;
if TB_HIV_KEY_MAX_VAL  ~=. then 
TB_HIV_KEY= TB_HIV_KEY+TB_HIV_KEY_MAX_VAL;
/*DROP TB_HIV_KEY_MAX_VAL;*/
RUN;
proc sql;
delete from L_TB_HIV_N where source_count <0;
quit;
%DBLOAD (L_TB_HIV, L_TB_HIV_N);

PROC SQL;
CREATE TABLE L_ADDL_RISK_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_ADDL_RISK;
QUIT;
 %ASSIGN_KEY (L_ADDL_RISK_GROUP_BASE, D_ADDL_RISK_GROUP_KEY);
PROC SQL;
CREATE TABLE L_ADDL_RISK_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_ADDL_RISK;
 QUIT;
 %ASSIGN_KEY (L_ADDL_RISK_BASE, D_ADDL_RISK_KEY);
PROC SQL;
CREATE TABLE L_ADDL_RISK_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_ADDL_RISK_GROUP_BASE.TB_PAM_UID as D_ADDL_RISK_UID 'D_ADDL_RISK_GROUP_KEY', L_ADDL_RISK_GROUP_BASE.D_ADDL_RISK_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_ADDL_RISK_GROUP_BASE
           ON L_ADDL_RISK_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_ADDL_RISK_GROUP ADD ADDL_RISK_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_ADDL_RISK_GROUP ADD D_ADDL_RISK_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_ADDL_RISK_GROUP ADD D_ADDL_RISK_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_ADDL_RISK_GROUP SET ADDL_RISK_KEY_MAX_VAL=(select max(ADDL_RISK_KEY) from nbs_rdb.L_ADDL_RISK);
UPDATE L_ADDL_RISK_GROUP SET D_ADDL_RISK_KEY_MAX_VAL=(select max(D_ADDL_RISK_KEY) from nbs_rdb.L_ADDL_RISK);
UPDATE L_ADDL_RISK_GROUP SET D_ADDL_RISK_GROUP_KEY_MAX_VAL=(select max(D_ADDL_RISK_GROUP_KEY) from nbs_rdb.L_ADDL_RISK);
QUIT;
PROC SQL;
CREATE TABLE L_ADDL_RISK AS 
   SELECT L_ADDL_RISK_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_ADDL_RISK_BASE.TB_PAM_UID as D_ADDL_RISK_UID, L_ADDL_RISK_BASE.D_ADDL_RISK_KEY,
			D_ADDL_RISK_GROUP_KEY,ADDL_RISK_KEY_MAX_VAL,D_ADDL_RISK_KEY_MAX_VAL, D_ADDL_RISK_GROUP_KEY_MAX_VAL
	   FROM   L_ADDL_RISK_GROUP LEFT OUTER JOIN L_ADDL_RISK_BASE
           ON L_ADDL_RISK_BASE.TB_PAM_UID=L_ADDL_RISK_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_ADDL_RISK, ADDL_RISK_KEY);
DATA L_ADDL_RISK;
SET L_ADDL_RISK;
IF D_ADDL_RISK_GROUP_KEY =.  THEN 
		D_ADDL_RISK_GROUP_KEY= 1;
IF D_ADDL_RISK_KEY =.  THEN 
		D_ADDL_RISK_KEY= 1;
if ADDL_RISK_KEY_MAX_VAL  ~=. then 
ADDL_RISK_KEY= ADDL_RISK_KEY+ADDL_RISK_KEY_MAX_VAL;
if D_ADDL_RISK_KEY_MAX_VAL  ~=. then 
D_ADDL_RISK_KEY= D_ADDL_RISK_KEY+D_ADDL_RISK_KEY_MAX_VAL;
if D_ADDL_RISK_GROUP_KEY_MAX_VAL  ~=. then 
D_ADDL_RISK_GROUP_KEY= D_ADDL_RISK_GROUP_KEY+D_ADDL_RISK_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_ADDL_RISK nodupkey; BY ADDL_RISK_KEY; RUN;
%DBLOAD (L_ADDL_RISK, L_ADDL_RISK);
PROC SQL;
CREATE TABLE L_DISEASE_SITE_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_DISEASE_SITE;
QUIT;
 %ASSIGN_KEY (L_DISEASE_SITE_GROUP_BASE, D_DISEASE_SITE_GROUP_KEY);
PROC SQL;
CREATE TABLE L_DISEASE_SITE_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_DISEASE_SITE;
 QUIT;
 %ASSIGN_KEY (L_DISEASE_SITE_BASE, D_DISEASE_SITE_KEY);
PROC SQL;
CREATE TABLE L_DISEASE_SITE_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_DISEASE_SITE_GROUP_BASE.TB_PAM_UID as D_DISEASE_SITE_UID 'D_DISEASE_SITE_GROUP_KEY', L_DISEASE_SITE_GROUP_BASE.D_DISEASE_SITE_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_DISEASE_SITE_GROUP_BASE
           ON L_DISEASE_SITE_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_DISEASE_SITE_GROUP ADD DISEASE_SITE_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_DISEASE_SITE_GROUP ADD D_DISEASE_SITE_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_DISEASE_SITE_GROUP ADD D_DISEASE_SITE_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_DISEASE_SITE_GROUP SET DISEASE_SITE_KEY_MAX_VAL=(select max(DISEASE_SITE_KEY) from nbs_rdb.L_DISEASE_SITE);
UPDATE L_DISEASE_SITE_GROUP SET D_DISEASE_SITE_KEY_MAX_VAL=(select max(D_DISEASE_SITE_KEY) from nbs_rdb.L_DISEASE_SITE);
UPDATE L_DISEASE_SITE_GROUP SET D_DISEASE_SITE_GROUP_KEY_MAX_VAL=(select max(D_DISEASE_SITE_GROUP_KEY) from nbs_rdb.L_DISEASE_SITE);
QUIT;
PROC SQL;
CREATE TABLE L_DISEASE_SITE AS 
   SELECT L_DISEASE_SITE_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_DISEASE_SITE_BASE.TB_PAM_UID as D_DISEASE_SITE_UID, L_DISEASE_SITE_BASE.D_DISEASE_SITE_KEY,
			D_DISEASE_SITE_GROUP_KEY,DISEASE_SITE_KEY_MAX_VAL,D_DISEASE_SITE_KEY_MAX_VAL, D_DISEASE_SITE_GROUP_KEY_MAX_VAL
	   FROM   L_DISEASE_SITE_GROUP LEFT OUTER JOIN L_DISEASE_SITE_BASE
           ON L_DISEASE_SITE_BASE.TB_PAM_UID=L_DISEASE_SITE_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_DISEASE_SITE, DISEASE_SITE_KEY);
DATA L_DISEASE_SITE;
SET L_DISEASE_SITE;
IF D_DISEASE_SITE_GROUP_KEY =.  THEN 
		D_DISEASE_SITE_GROUP_KEY= 1;
IF D_DISEASE_SITE_KEY =.  THEN 
		D_DISEASE_SITE_KEY= 1;
if DISEASE_SITE_KEY_MAX_VAL  ~=. then 
DISEASE_SITE_KEY= DISEASE_SITE_KEY+DISEASE_SITE_KEY_MAX_VAL;
if D_DISEASE_SITE_KEY_MAX_VAL  ~=. then 
D_DISEASE_SITE_KEY= D_DISEASE_SITE_KEY+D_DISEASE_SITE_KEY_MAX_VAL;
if D_DISEASE_SITE_GROUP_KEY_MAX_VAL  ~=. then 
D_DISEASE_SITE_GROUP_KEY= D_DISEASE_SITE_GROUP_KEY+D_DISEASE_SITE_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_DISEASE_SITE nodupkey; BY DISEASE_SITE_KEY; RUN;
%DBLOAD (L_DISEASE_SITE, L_DISEASE_SITE);
PROC SQL;
CREATE TABLE L_GT_12_REAS_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_GT_12_REAS;
QUIT;
 %ASSIGN_KEY (L_GT_12_REAS_GROUP_BASE, D_GT_12_REAS_GROUP_KEY);
PROC SQL;
CREATE TABLE L_GT_12_REAS_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_GT_12_REAS;
 QUIT;
 %ASSIGN_KEY (L_GT_12_REAS_BASE, D_GT_12_REAS_KEY);
PROC SQL;
CREATE TABLE L_GT_12_REAS_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_GT_12_REAS_GROUP_BASE.TB_PAM_UID as D_GT_12_REAS_UID 'D_GT_12_REAS_GROUP_KEY', L_GT_12_REAS_GROUP_BASE.D_GT_12_REAS_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_GT_12_REAS_GROUP_BASE
           ON L_GT_12_REAS_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_GT_12_REAS_GROUP ADD GT_12_REAS_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_GT_12_REAS_GROUP ADD D_GT_12_REAS_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_GT_12_REAS_GROUP ADD D_GT_12_REAS_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_GT_12_REAS_GROUP SET GT_12_REAS_KEY_MAX_VAL=(select max(GT_12_REAS_KEY) from nbs_rdb.L_GT_12_REAS);
UPDATE L_GT_12_REAS_GROUP SET D_GT_12_REAS_KEY_MAX_VAL=(select max(D_GT_12_REAS_KEY) from nbs_rdb.L_GT_12_REAS);
UPDATE L_GT_12_REAS_GROUP SET D_GT_12_REAS_GROUP_KEY_MAX_VAL=(select max(D_GT_12_REAS_GROUP_KEY) from nbs_rdb.L_GT_12_REAS);
QUIT;
PROC SQL;
CREATE TABLE L_GT_12_REAS AS 
   SELECT L_GT_12_REAS_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_GT_12_REAS_BASE.TB_PAM_UID as D_GT_12_REAS_UID, L_GT_12_REAS_BASE.D_GT_12_REAS_KEY,
			D_GT_12_REAS_GROUP_KEY,GT_12_REAS_KEY_MAX_VAL,D_GT_12_REAS_KEY_MAX_VAL, D_GT_12_REAS_GROUP_KEY_MAX_VAL
	   FROM   L_GT_12_REAS_GROUP LEFT OUTER JOIN L_GT_12_REAS_BASE
           ON L_GT_12_REAS_BASE.TB_PAM_UID=L_GT_12_REAS_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_GT_12_REAS, GT_12_REAS_KEY);
DATA L_GT_12_REAS;
SET L_GT_12_REAS;
IF D_GT_12_REAS_GROUP_KEY =.  THEN 
		D_GT_12_REAS_GROUP_KEY= 1;
IF D_GT_12_REAS_KEY =.  THEN 
		D_GT_12_REAS_KEY= 1;
if GT_12_REAS_KEY_MAX_VAL  ~=. then 
GT_12_REAS_KEY= GT_12_REAS_KEY+GT_12_REAS_KEY_MAX_VAL;
if D_GT_12_REAS_KEY_MAX_VAL  ~=. then 
D_GT_12_REAS_KEY= D_GT_12_REAS_KEY+D_GT_12_REAS_KEY_MAX_VAL;
if D_GT_12_REAS_GROUP_KEY_MAX_VAL  ~=. then 
D_GT_12_REAS_GROUP_KEY= D_GT_12_REAS_GROUP_KEY+D_GT_12_REAS_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_GT_12_REAS nodupkey; BY GT_12_REAS_KEY; RUN;
%DBLOAD (L_GT_12_REAS, L_GT_12_REAS);
PROC SQL;
CREATE TABLE L_HC_PROV_TY_3_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_HC_PROV_TY_3;
QUIT;
 %ASSIGN_KEY (L_HC_PROV_TY_3_GROUP_BASE, D_HC_PROV_TY_3_GROUP_KEY);
PROC SQL;
CREATE TABLE L_HC_PROV_TY_3_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_HC_PROV_TY_3;
 QUIT;
 %ASSIGN_KEY (L_HC_PROV_TY_3_BASE, D_HC_PROV_TY_3_KEY);
PROC SQL;
CREATE TABLE L_HC_PROV_TY_3_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_HC_PROV_TY_3_GROUP_BASE.TB_PAM_UID as D_HC_PROV_TY_3_UID 'D_HC_PROV_TY_3_GROUP_KEY', L_HC_PROV_TY_3_GROUP_BASE.D_HC_PROV_TY_3_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_HC_PROV_TY_3_GROUP_BASE
           ON L_HC_PROV_TY_3_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_HC_PROV_TY_3_GROUP ADD HC_PROV_TY_3_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_HC_PROV_TY_3_GROUP ADD D_HC_PROV_TY_3_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_HC_PROV_TY_3_GROUP ADD D_HC_PROV_TY_3_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_HC_PROV_TY_3_GROUP SET HC_PROV_TY_3_KEY_MAX_VAL=(select max(HC_PROV_TY_3_KEY) from nbs_rdb.L_HC_PROV_TY_3);
UPDATE L_HC_PROV_TY_3_GROUP SET D_HC_PROV_TY_3_KEY_MAX_VAL=(select max(D_HC_PROV_TY_3_KEY) from nbs_rdb.L_HC_PROV_TY_3);
UPDATE L_HC_PROV_TY_3_GROUP SET D_HC_PROV_TY_3_GROUP_KEY_MAX_VAL=(select max(D_HC_PROV_TY_3_GROUP_KEY) from nbs_rdb.L_HC_PROV_TY_3);
QUIT;
PROC SQL;
CREATE TABLE L_HC_PROV_TY_3 AS 
   SELECT L_HC_PROV_TY_3_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_HC_PROV_TY_3_BASE.TB_PAM_UID as D_HC_PROV_TY_3_UID, L_HC_PROV_TY_3_BASE.D_HC_PROV_TY_3_KEY,
			D_HC_PROV_TY_3_GROUP_KEY,HC_PROV_TY_3_KEY_MAX_VAL,D_HC_PROV_TY_3_KEY_MAX_VAL, D_HC_PROV_TY_3_GROUP_KEY_MAX_VAL
	   FROM   L_HC_PROV_TY_3_GROUP LEFT OUTER JOIN L_HC_PROV_TY_3_BASE
           ON L_HC_PROV_TY_3_BASE.TB_PAM_UID=L_HC_PROV_TY_3_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_HC_PROV_TY_3, HC_PROV_TY_3_KEY);
DATA L_HC_PROV_TY_3;
SET L_HC_PROV_TY_3;
IF D_HC_PROV_TY_3_GROUP_KEY =.  THEN 
		D_HC_PROV_TY_3_GROUP_KEY= 1;
IF D_HC_PROV_TY_3_KEY =.  THEN 
		D_HC_PROV_TY_3_KEY= 1;
if HC_PROV_TY_3_KEY_MAX_VAL  ~=. then 
HC_PROV_TY_3_KEY= HC_PROV_TY_3_KEY+HC_PROV_TY_3_KEY_MAX_VAL;
if D_HC_PROV_TY_3_KEY_MAX_VAL  ~=. then 
D_HC_PROV_TY_3_KEY= D_HC_PROV_TY_3_KEY+D_HC_PROV_TY_3_KEY_MAX_VAL;
if D_HC_PROV_TY_3_GROUP_KEY_MAX_VAL  ~=. then 
D_HC_PROV_TY_3_GROUP_KEY= D_HC_PROV_TY_3_GROUP_KEY+D_HC_PROV_TY_3_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_HC_PROV_TY_3 nodupkey; BY HC_PROV_TY_3_KEY; RUN;
%DBLOAD (L_HC_PROV_TY_3, L_HC_PROV_TY_3);
PROC SQL;
CREATE TABLE L_MOVE_CNTRY_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_MOVE_CNTRY;
QUIT;
 %ASSIGN_KEY (L_MOVE_CNTRY_GROUP_BASE, D_MOVE_CNTRY_GROUP_KEY);
PROC SQL;
CREATE TABLE L_MOVE_CNTRY_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_MOVE_CNTRY;
 QUIT;
 %ASSIGN_KEY (L_MOVE_CNTRY_BASE, D_MOVE_CNTRY_KEY);
PROC SQL;
CREATE TABLE L_MOVE_CNTRY_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_MOVE_CNTRY_GROUP_BASE.TB_PAM_UID as D_MOVE_CNTRY_UID 'D_MOVE_CNTRY_GROUP_KEY', L_MOVE_CNTRY_GROUP_BASE.D_MOVE_CNTRY_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_MOVE_CNTRY_GROUP_BASE
           ON L_MOVE_CNTRY_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_MOVE_CNTRY_GROUP ADD MOVE_CNTRY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVE_CNTRY_GROUP ADD D_MOVE_CNTRY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVE_CNTRY_GROUP ADD D_MOVE_CNTRY_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_MOVE_CNTRY_GROUP SET MOVE_CNTRY_KEY_MAX_VAL=(select max(MOVE_CNTRY_KEY) from nbs_rdb.L_MOVE_CNTRY);
UPDATE L_MOVE_CNTRY_GROUP SET D_MOVE_CNTRY_KEY_MAX_VAL=(select max(D_MOVE_CNTRY_KEY) from nbs_rdb.L_MOVE_CNTRY);
UPDATE L_MOVE_CNTRY_GROUP SET D_MOVE_CNTRY_GROUP_KEY_MAX_VAL=(select max(D_MOVE_CNTRY_GROUP_KEY) from nbs_rdb.L_MOVE_CNTRY);
QUIT;
PROC SQL;
CREATE TABLE L_MOVE_CNTRY AS 
   SELECT L_MOVE_CNTRY_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_MOVE_CNTRY_BASE.TB_PAM_UID as D_MOVE_CNTRY_UID, L_MOVE_CNTRY_BASE.D_MOVE_CNTRY_KEY,
			D_MOVE_CNTRY_GROUP_KEY,MOVE_CNTRY_KEY_MAX_VAL,D_MOVE_CNTRY_KEY_MAX_VAL, D_MOVE_CNTRY_GROUP_KEY_MAX_VAL
	   FROM   L_MOVE_CNTRY_GROUP LEFT OUTER JOIN L_MOVE_CNTRY_BASE
           ON L_MOVE_CNTRY_BASE.TB_PAM_UID=L_MOVE_CNTRY_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_MOVE_CNTRY, MOVE_CNTRY_KEY);
DATA L_MOVE_CNTRY;
SET L_MOVE_CNTRY;
IF D_MOVE_CNTRY_GROUP_KEY =.  THEN 
		D_MOVE_CNTRY_GROUP_KEY= 1;
IF D_MOVE_CNTRY_KEY =.  THEN 
		D_MOVE_CNTRY_KEY= 1;
if MOVE_CNTRY_KEY_MAX_VAL  ~=. then 
MOVE_CNTRY_KEY= MOVE_CNTRY_KEY+MOVE_CNTRY_KEY_MAX_VAL;
if D_MOVE_CNTRY_KEY_MAX_VAL  ~=. then 
D_MOVE_CNTRY_KEY= D_MOVE_CNTRY_KEY+D_MOVE_CNTRY_KEY_MAX_VAL;
if D_MOVE_CNTRY_GROUP_KEY_MAX_VAL  ~=. then 
D_MOVE_CNTRY_GROUP_KEY= D_MOVE_CNTRY_GROUP_KEY+D_MOVE_CNTRY_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_MOVE_CNTRY nodupkey; BY MOVE_CNTRY_KEY; RUN;
%DBLOAD (L_MOVE_CNTRY, L_MOVE_CNTRY);
PROC SQL;
CREATE TABLE L_MOVE_CNTY_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_MOVE_CNTY;
QUIT;
 %ASSIGN_KEY (L_MOVE_CNTY_GROUP_BASE, D_MOVE_CNTY_GROUP_KEY);
PROC SQL;
CREATE TABLE L_MOVE_CNTY_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_MOVE_CNTY;
 QUIT;
 %ASSIGN_KEY (L_MOVE_CNTY_BASE, D_MOVE_CNTY_KEY);
PROC SQL;
CREATE TABLE L_MOVE_CNTY_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_MOVE_CNTY_GROUP_BASE.TB_PAM_UID as D_MOVE_CNTY_UID 'D_MOVE_CNTY_GROUP_KEY', L_MOVE_CNTY_GROUP_BASE.D_MOVE_CNTY_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_MOVE_CNTY_GROUP_BASE
           ON L_MOVE_CNTY_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_MOVE_CNTY_GROUP ADD MOVE_CNTY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVE_CNTY_GROUP ADD D_MOVE_CNTY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVE_CNTY_GROUP ADD D_MOVE_CNTY_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_MOVE_CNTY_GROUP SET MOVE_CNTY_KEY_MAX_VAL=(select max(MOVE_CNTY_KEY) from nbs_rdb.L_MOVE_CNTY);
UPDATE L_MOVE_CNTY_GROUP SET D_MOVE_CNTY_KEY_MAX_VAL=(select max(D_MOVE_CNTY_KEY) from nbs_rdb.L_MOVE_CNTY);
UPDATE L_MOVE_CNTY_GROUP SET D_MOVE_CNTY_GROUP_KEY_MAX_VAL=(select max(D_MOVE_CNTY_GROUP_KEY) from nbs_rdb.L_MOVE_CNTY);
QUIT;
PROC SQL;
CREATE TABLE L_MOVE_CNTY AS 
   SELECT L_MOVE_CNTY_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_MOVE_CNTY_BASE.TB_PAM_UID as D_MOVE_CNTY_UID, L_MOVE_CNTY_BASE.D_MOVE_CNTY_KEY,
			D_MOVE_CNTY_GROUP_KEY,MOVE_CNTY_KEY_MAX_VAL,D_MOVE_CNTY_KEY_MAX_VAL, D_MOVE_CNTY_GROUP_KEY_MAX_VAL
	   FROM   L_MOVE_CNTY_GROUP LEFT OUTER JOIN L_MOVE_CNTY_BASE
           ON L_MOVE_CNTY_BASE.TB_PAM_UID=L_MOVE_CNTY_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_MOVE_CNTY, MOVE_CNTY_KEY);
DATA L_MOVE_CNTY;
SET L_MOVE_CNTY;
IF D_MOVE_CNTY_GROUP_KEY =.  THEN 
		D_MOVE_CNTY_GROUP_KEY= 1;
IF D_MOVE_CNTY_KEY =.  THEN 
		D_MOVE_CNTY_KEY= 1;
if MOVE_CNTY_KEY_MAX_VAL  ~=. then 
MOVE_CNTY_KEY= MOVE_CNTY_KEY+MOVE_CNTY_KEY_MAX_VAL;
if D_MOVE_CNTY_KEY_MAX_VAL  ~=. then 
D_MOVE_CNTY_KEY= D_MOVE_CNTY_KEY+D_MOVE_CNTY_KEY_MAX_VAL;
if D_MOVE_CNTY_GROUP_KEY_MAX_VAL  ~=. then 
D_MOVE_CNTY_GROUP_KEY= D_MOVE_CNTY_GROUP_KEY+D_MOVE_CNTY_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_MOVE_CNTY nodupkey; BY MOVE_CNTY_KEY; RUN;
%DBLOAD (L_MOVE_CNTY, L_MOVE_CNTY);
PROC SQL;
CREATE TABLE L_MOVE_STATE_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_MOVE_STATE;
QUIT;
 %ASSIGN_KEY (L_MOVE_STATE_GROUP_BASE, D_MOVE_STATE_GROUP_KEY);
PROC SQL;
CREATE TABLE L_MOVE_STATE_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_MOVE_STATE;
 QUIT;
 %ASSIGN_KEY (L_MOVE_STATE_BASE, D_MOVE_STATE_KEY);
PROC SQL;
CREATE TABLE L_MOVE_STATE_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_MOVE_STATE_GROUP_BASE.TB_PAM_UID as D_MOVE_STATE_UID 'D_MOVE_STATE_GROUP_KEY', L_MOVE_STATE_GROUP_BASE.D_MOVE_STATE_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_MOVE_STATE_GROUP_BASE
           ON L_MOVE_STATE_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_MOVE_STATE_GROUP ADD MOVE_STATE_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVE_STATE_GROUP ADD D_MOVE_STATE_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVE_STATE_GROUP ADD D_MOVE_STATE_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_MOVE_STATE_GROUP SET MOVE_STATE_KEY_MAX_VAL=(select max(MOVE_STATE_KEY) from nbs_rdb.L_MOVE_STATE);
UPDATE L_MOVE_STATE_GROUP SET D_MOVE_STATE_KEY_MAX_VAL=(select max(D_MOVE_STATE_KEY) from nbs_rdb.L_MOVE_STATE);
UPDATE L_MOVE_STATE_GROUP SET D_MOVE_STATE_GROUP_KEY_MAX_VAL=(select max(D_MOVE_STATE_GROUP_KEY) from nbs_rdb.L_MOVE_STATE);
QUIT;
PROC SQL;
CREATE TABLE L_MOVE_STATE AS 
   SELECT L_MOVE_STATE_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_MOVE_STATE_BASE.TB_PAM_UID as D_MOVE_STATE_UID, L_MOVE_STATE_BASE.D_MOVE_STATE_KEY,
			D_MOVE_STATE_GROUP_KEY,MOVE_STATE_KEY_MAX_VAL,D_MOVE_STATE_KEY_MAX_VAL, D_MOVE_STATE_GROUP_KEY_MAX_VAL
	   FROM   L_MOVE_STATE_GROUP LEFT OUTER JOIN L_MOVE_STATE_BASE
           ON L_MOVE_STATE_BASE.TB_PAM_UID=L_MOVE_STATE_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_MOVE_STATE, MOVE_STATE_KEY);
DATA L_MOVE_STATE;
SET L_MOVE_STATE;
IF D_MOVE_STATE_GROUP_KEY =.  THEN 
		D_MOVE_STATE_GROUP_KEY= 1;
IF D_MOVE_STATE_KEY =.  THEN 
		D_MOVE_STATE_KEY= 1;
if MOVE_STATE_KEY_MAX_VAL  ~=. then 
MOVE_STATE_KEY= MOVE_STATE_KEY+MOVE_STATE_KEY_MAX_VAL;
if D_MOVE_STATE_KEY_MAX_VAL  ~=. then 
D_MOVE_STATE_KEY= D_MOVE_STATE_KEY+D_MOVE_STATE_KEY_MAX_VAL;
if D_MOVE_STATE_GROUP_KEY_MAX_VAL  ~=. then 
D_MOVE_STATE_GROUP_KEY= D_MOVE_STATE_GROUP_KEY+D_MOVE_STATE_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_MOVE_STATE nodupkey; BY MOVE_STATE_KEY; RUN;
%DBLOAD (L_MOVE_STATE, L_MOVE_STATE);
PROC SQL;
CREATE TABLE L_MOVED_WHERE_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_MOVED_WHERE;
QUIT;
 %ASSIGN_KEY (L_MOVED_WHERE_GROUP_BASE, D_MOVED_WHERE_GROUP_KEY);
PROC SQL;
CREATE TABLE L_MOVED_WHERE_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_MOVED_WHERE;
 QUIT;
 %ASSIGN_KEY (L_MOVED_WHERE_BASE, D_MOVED_WHERE_KEY);
PROC SQL;
CREATE TABLE L_MOVED_WHERE_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_MOVED_WHERE_GROUP_BASE.TB_PAM_UID as D_MOVED_WHERE_UID 'D_MOVED_WHERE_GROUP_KEY', L_MOVED_WHERE_GROUP_BASE.D_MOVED_WHERE_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_MOVED_WHERE_GROUP_BASE
           ON L_MOVED_WHERE_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_MOVED_WHERE_GROUP ADD MOVED_WHERE_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVED_WHERE_GROUP ADD D_MOVED_WHERE_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_MOVED_WHERE_GROUP ADD D_MOVED_WHERE_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_MOVED_WHERE_GROUP SET MOVED_WHERE_KEY_MAX_VAL=(select max(MOVED_WHERE_KEY) from nbs_rdb.L_MOVED_WHERE);
UPDATE L_MOVED_WHERE_GROUP SET D_MOVED_WHERE_KEY_MAX_VAL=(select max(D_MOVED_WHERE_KEY) from nbs_rdb.L_MOVED_WHERE);
UPDATE L_MOVED_WHERE_GROUP SET D_MOVED_WHERE_GROUP_KEY_MAX_VAL=(select max(D_MOVED_WHERE_GROUP_KEY) from nbs_rdb.L_MOVED_WHERE);
QUIT;
PROC SQL;
CREATE TABLE L_MOVED_WHERE AS 
   SELECT L_MOVED_WHERE_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_MOVED_WHERE_BASE.TB_PAM_UID as D_MOVED_WHERE_UID, L_MOVED_WHERE_BASE.D_MOVED_WHERE_KEY,
			D_MOVED_WHERE_GROUP_KEY,MOVED_WHERE_KEY_MAX_VAL,D_MOVED_WHERE_KEY_MAX_VAL, D_MOVED_WHERE_GROUP_KEY_MAX_VAL
	   FROM   L_MOVED_WHERE_GROUP LEFT OUTER JOIN L_MOVED_WHERE_BASE
           ON L_MOVED_WHERE_BASE.TB_PAM_UID=L_MOVED_WHERE_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_MOVED_WHERE, MOVED_WHERE_KEY);
DATA L_MOVED_WHERE;
SET L_MOVED_WHERE;
IF D_MOVED_WHERE_GROUP_KEY =.  THEN 
		D_MOVED_WHERE_GROUP_KEY= 1;
IF D_MOVED_WHERE_KEY =.  THEN 
		D_MOVED_WHERE_KEY= 1;
if MOVED_WHERE_KEY_MAX_VAL  ~=. then 
MOVED_WHERE_KEY= MOVED_WHERE_KEY+MOVED_WHERE_KEY_MAX_VAL;
if D_MOVED_WHERE_KEY_MAX_VAL  ~=. then 
D_MOVED_WHERE_KEY= D_MOVED_WHERE_KEY+D_MOVED_WHERE_KEY_MAX_VAL;
if D_MOVED_WHERE_GROUP_KEY_MAX_VAL  ~=. then 
D_MOVED_WHERE_GROUP_KEY= D_MOVED_WHERE_GROUP_KEY+D_MOVED_WHERE_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_MOVED_WHERE nodupkey; BY MOVED_WHERE_KEY; RUN;
%DBLOAD (L_MOVED_WHERE, L_MOVED_WHERE);
PROC SQL;
CREATE TABLE L_OUT_OF_CNTRY_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_OUT_OF_CNTRY;
QUIT;
 %ASSIGN_KEY (L_OUT_OF_CNTRY_GROUP_BASE, D_OUT_OF_CNTRY_GROUP_KEY);
PROC SQL;
CREATE TABLE L_OUT_OF_CNTRY_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_OUT_OF_CNTRY;
 QUIT;
 %ASSIGN_KEY (L_OUT_OF_CNTRY_BASE, D_OUT_OF_CNTRY_KEY);
PROC SQL;
CREATE TABLE L_OUT_OF_CNTRY_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_OUT_OF_CNTRY_GROUP_BASE.TB_PAM_UID as D_OUT_OF_CNTRY_UID 'D_OUT_OF_CNTRY_GROUP_KEY', L_OUT_OF_CNTRY_GROUP_BASE.D_OUT_OF_CNTRY_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_OUT_OF_CNTRY_GROUP_BASE
           ON L_OUT_OF_CNTRY_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_OUT_OF_CNTRY_GROUP ADD OUT_OF_CNTRY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_OUT_OF_CNTRY_GROUP ADD D_OUT_OF_CNTRY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_OUT_OF_CNTRY_GROUP ADD D_OUT_OF_CNTRY_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_OUT_OF_CNTRY_GROUP SET OUT_OF_CNTRY_KEY_MAX_VAL=(select max(OUT_OF_CNTRY_KEY) from nbs_rdb.L_OUT_OF_CNTRY);
UPDATE L_OUT_OF_CNTRY_GROUP SET D_OUT_OF_CNTRY_KEY_MAX_VAL=(select max(D_OUT_OF_CNTRY_KEY) from nbs_rdb.L_OUT_OF_CNTRY);
UPDATE L_OUT_OF_CNTRY_GROUP SET D_OUT_OF_CNTRY_GROUP_KEY_MAX_VAL=(select max(D_OUT_OF_CNTRY_GROUP_KEY) from nbs_rdb.L_OUT_OF_CNTRY);
QUIT;
PROC SQL;
CREATE TABLE L_OUT_OF_CNTRY AS 
   SELECT L_OUT_OF_CNTRY_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_OUT_OF_CNTRY_BASE.TB_PAM_UID as D_OUT_OF_CNTRY_UID, L_OUT_OF_CNTRY_BASE.D_OUT_OF_CNTRY_KEY,
			D_OUT_OF_CNTRY_GROUP_KEY,OUT_OF_CNTRY_KEY_MAX_VAL,D_OUT_OF_CNTRY_KEY_MAX_VAL, D_OUT_OF_CNTRY_GROUP_KEY_MAX_VAL
	   FROM   L_OUT_OF_CNTRY_GROUP LEFT OUTER JOIN L_OUT_OF_CNTRY_BASE
           ON L_OUT_OF_CNTRY_BASE.TB_PAM_UID=L_OUT_OF_CNTRY_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_OUT_OF_CNTRY, OUT_OF_CNTRY_KEY);
DATA L_OUT_OF_CNTRY;
SET L_OUT_OF_CNTRY;
IF D_OUT_OF_CNTRY_GROUP_KEY =.  THEN 
		D_OUT_OF_CNTRY_GROUP_KEY= 1;
IF D_OUT_OF_CNTRY_KEY =.  THEN 
		D_OUT_OF_CNTRY_KEY= 1;
if OUT_OF_CNTRY_KEY_MAX_VAL  ~=. then 
OUT_OF_CNTRY_KEY= OUT_OF_CNTRY_KEY+OUT_OF_CNTRY_KEY_MAX_VAL;
if D_OUT_OF_CNTRY_KEY_MAX_VAL  ~=. then 
D_OUT_OF_CNTRY_KEY= D_OUT_OF_CNTRY_KEY+D_OUT_OF_CNTRY_KEY_MAX_VAL;
if D_OUT_OF_CNTRY_GROUP_KEY_MAX_VAL  ~=. then 
D_OUT_OF_CNTRY_GROUP_KEY= D_OUT_OF_CNTRY_GROUP_KEY+D_OUT_OF_CNTRY_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_OUT_OF_CNTRY nodupkey; BY OUT_OF_CNTRY_KEY; RUN;
%DBLOAD (L_OUT_OF_CNTRY, L_OUT_OF_CNTRY);
PROC SQL;
CREATE TABLE L_SMR_EXAM_TY_GROUP_BASE AS
	SELECT DISTINCT TB_PAM_UID  FROM S_SMR_EXAM_TY;
QUIT;
 %ASSIGN_KEY (L_SMR_EXAM_TY_GROUP_BASE, D_SMR_EXAM_TY_GROUP_KEY);
PROC SQL;
CREATE TABLE L_SMR_EXAM_TY_BASE AS
	SELECT TB_PAM_UID,  NBS_Case_Answer_UID  FROM S_SMR_EXAM_TY;
 QUIT;
 %ASSIGN_KEY (L_SMR_EXAM_TY_BASE, D_SMR_EXAM_TY_KEY);
PROC SQL;
CREATE TABLE L_SMR_EXAM_TY_GROUP AS 
   SELECT S_TB_PAM.TB_PAM_UID,  L_SMR_EXAM_TY_GROUP_BASE.TB_PAM_UID as D_SMR_EXAM_TY_UID 'D_SMR_EXAM_TY_GROUP_KEY', L_SMR_EXAM_TY_GROUP_BASE.D_SMR_EXAM_TY_GROUP_KEY
	   FROM   S_TB_PAM LEFT OUTER JOIN L_SMR_EXAM_TY_GROUP_BASE
           ON L_SMR_EXAM_TY_GROUP_BASE.TB_PAM_UID=S_TB_PAM.TB_PAM_UID;
ALTER TABLE L_SMR_EXAM_TY_GROUP ADD SMR_EXAM_TY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_SMR_EXAM_TY_GROUP ADD D_SMR_EXAM_TY_KEY_MAX_VAL NUMERIC;
ALTER TABLE L_SMR_EXAM_TY_GROUP ADD D_SMR_EXAM_TY_GROUP_KEY_MAX_VAL NUMERIC;
UPDATE L_SMR_EXAM_TY_GROUP SET SMR_EXAM_TY_KEY_MAX_VAL=(select max(SMR_EXAM_TY_KEY) from nbs_rdb.L_SMR_EXAM_TY);
UPDATE L_SMR_EXAM_TY_GROUP SET D_SMR_EXAM_TY_KEY_MAX_VAL=(select max(D_SMR_EXAM_TY_KEY) from nbs_rdb.L_SMR_EXAM_TY);
UPDATE L_SMR_EXAM_TY_GROUP SET D_SMR_EXAM_TY_GROUP_KEY_MAX_VAL=(select max(D_SMR_EXAM_TY_GROUP_KEY) from nbs_rdb.L_SMR_EXAM_TY);
QUIT;
PROC SQL;
CREATE TABLE L_SMR_EXAM_TY AS 
   SELECT L_SMR_EXAM_TY_GROUP.TB_PAM_UID,  NBS_Case_Answer_UID, L_SMR_EXAM_TY_BASE.TB_PAM_UID as D_SMR_EXAM_TY_UID, L_SMR_EXAM_TY_BASE.D_SMR_EXAM_TY_KEY,
			D_SMR_EXAM_TY_GROUP_KEY,SMR_EXAM_TY_KEY_MAX_VAL,D_SMR_EXAM_TY_KEY_MAX_VAL, D_SMR_EXAM_TY_GROUP_KEY_MAX_VAL
	   FROM   L_SMR_EXAM_TY_GROUP LEFT OUTER JOIN L_SMR_EXAM_TY_BASE
           ON L_SMR_EXAM_TY_BASE.TB_PAM_UID=L_SMR_EXAM_TY_GROUP.TB_PAM_UID;
QUIT;
 %assign_key2 (L_SMR_EXAM_TY, SMR_EXAM_TY_KEY);
DATA L_SMR_EXAM_TY;
SET L_SMR_EXAM_TY;
IF D_SMR_EXAM_TY_GROUP_KEY =.  THEN 
		D_SMR_EXAM_TY_GROUP_KEY= 1;
IF D_SMR_EXAM_TY_KEY =.  THEN 
		D_SMR_EXAM_TY_KEY= 1;
if SMR_EXAM_TY_KEY_MAX_VAL  ~=. then 
SMR_EXAM_TY_KEY= SMR_EXAM_TY_KEY+SMR_EXAM_TY_KEY_MAX_VAL;
if D_SMR_EXAM_TY_KEY_MAX_VAL  ~=. then 
D_SMR_EXAM_TY_KEY= D_SMR_EXAM_TY_KEY+D_SMR_EXAM_TY_KEY_MAX_VAL;
if D_SMR_EXAM_TY_GROUP_KEY_MAX_VAL  ~=. then 
D_SMR_EXAM_TY_GROUP_KEY= D_SMR_EXAM_TY_GROUP_KEY+D_SMR_EXAM_TY_GROUP_KEY_MAX_VAL;

RUN;
PROC SORT DATA=L_SMR_EXAM_TY nodupkey; BY SMR_EXAM_TY_KEY; RUN;
%DBLOAD (L_SMR_EXAM_TY, L_SMR_EXAM_TY);
