/*
	Collection of macro used in ETL

*/
 
/* assigns sequential primary keys to dimension tables */
%macro assign_key (ds, key);
 data &ds;
  retain &key 1;
  if &key=1 then output;
  set &ds; 
	&key+1;
	output;
 run;
%mend assign_key;

%MACRO ASSIGN_ADDITIONAL_KEY (DS, KEY);
 DATA &DS;
  IF &KEY=1 THEN OUTPUT;
  SET &DS;
	&KEY+1;
	OUTPUT;
 RUN;
%MEND ASSIGN_ADDITIONAL_KEY;

/***************************************/

/*  single-select coded observation responses */
%macro getobscode(outDS,childobsDS);
 Proc SQL;
  Create table &outDS as 
   Select obs.*,
		  ovc.code
    From &childobsDS obs LEFT JOIN nbs_cdc.obs_value_coded ovc
      On ovc.observation_uid = obs.child_obs_uid;
 Quit;

 /* get code description from format */
 Data &outDS;
   Format response $50.;
   Set &outDS;
   If code = 'NI' then response='No Input';
   Else do;
     respfmt = put(child_obs_cd, typefmt.);
   	 response = putc(code, respfmt);
   end;
   Drop respfmt;
 Run;
%mend getobscode;


/* single selection text responses */
%macro getobstxt(outDS,childobsDS);
 /* select only seq=1 records */
 Data obs_value_text_seq1;
   Set nbs_cdc.obs_value_txt(drop=value_image_txt);    /* remove BLOB data type */
   Where obs_value_txt_seq = 1;
 Run;

 Proc SQL;
  Create table &outDS as 
   Select obs.*,
		  obt.value_txt as response
	From &childobsDS obs LEFT JOIN obs_value_text_seq1 obt
	  On obt.observation_uid = obs.child_obs_uid;
 Quit;
%mend getobstxt;


/* single selection date responses */
%macro getobsdate(outDS,childobsDS,datefield);
 /* select only seq=1 records */
 Data obs_value_date_seq1;
   Set nbs_cdc.obs_value_date;
   Where obs_value_date_seq = 1;
/*     and &datefield is not null */
 Run;

 Proc SQL;
  Create table &outDS as 
   Select obs.*,	
		  obd.&datefield as response
	From &childobsDS obs LEFT JOIN obs_value_date_seq1 obd
	  On obd.observation_uid = obs.child_obs_uid;
 Quit;
%mend getobsdate;


/* single selection numeric responses */
%macro getobsnum(outDS,childobsDS,numfield);
 /* select only seq=1 records */
 Data obs_value_numeric_seq1;
   Set nbs_cdc.obs_value_numeric;
   Where obs_value_numeric_seq = 1;
/*     and &numfield is not null */
 Run;

 Proc SQL;
  Create table &outDS as 
   Select obs.*,
		  obn.&numfield as response
	From &childobsDS obs LEFT JOIN obs_value_numeric_seq1 obn
	  On obn.observation_uid = obs.child_obs_uid;
 Quit;
%mend getobsnum;


/* transpose responses to columns*/
%macro rows_to_columns(rowDS,columnDS);
 /*there should not be any dup keys*/
 Proc Sort nodupkey data=&rowDS; 
  By public_health_case_uid root_obs_uid col_nm; 
 Run;

 Proc Transpose data=&rowDS out=&columnDS(drop=_name_ _label_);
	ID COL_NM;
	By public_health_case_uid root_obs_uid;
	Var response;
 Run;

 Proc Sort data=&columnDS nodupkey; 
   By public_health_case_uid root_obs_uid; 
   where public_health_case_uid ~=.;
 Run;
%mend rows_to_columns;

/* transpose rows to columns - includes BY variable list, expects  root_obs_uid in row_data */
%macro rows_to_columns2(row_data, column_data, v_name, bylist );
 Proc Sort data=&row_data;
   By &bylist;
 Run;

 Proc Transpose data=&row_data out=&column_data(drop=_name_ _label_);
	id Col_nm;
	by  &bylist;
	var &v_name ;
 Run;

 Proc Sort data=&column_data nodupkey; 
   By &bylist;
   where  root_obs_uid ~=.;
 Run;
%mend rows_to_columns2;


%macro add_common_inv_keys(fact_tbl,fact_tb2);
/* use SQL join to avoid sort requirement */
 Proc SQL;
  Create table &fact_tbl as 
   Select fact.*,
		key.Condition_key,
		key.Patient_key,
		key.Investigator_key,
		key.Physician_key,
		key.Reporter_key,
		key.Rpt_Src_Org_key,
		key.ADT_HSPTL_KEY,
		key.Inv_Assigned_dt_key,		
		key.Investigation_key,
		key.INV_START_DT_KEY,
		key.DIAGNOSIS_DT_KEY,
		key.INV_RPT_DT_KEY,
		key.geocoding_location_key
    From &fact_tb2 fact LEFT JOIN rdbdata.Phc_keys key
	  On fact.public_health_case_uid = key.public_health_case_uid	;
 Quit;

/* assign missing key values */
 Data &fact_tbl;
  Set &fact_tbl; 
   If Condition_key=. then Condition_key=1;
   If Patient_key=. then Patient_key=1;
   If Investigator_key=. then Investigator_key=1;
   If Physician_key=. then Physician_key=1;
   If Reporter_key=. then Reporter_key=1;
   If Rpt_Src_Org_key=. then Rpt_Src_Org_key=1;
   If ADT_HSPTL_KEY=. then ADT_HSPTL_key=1;
   If Inv_Assigned_dt_key=. then Inv_Assigned_dt_key=1;
   If Investigation_key=. then Investigation_key=1;
   If INV_START_DT_key=. then INV_START_DT_key=1;
   If DIAGNOSIS_DT_KEY=. then DIAGNOSIS_DT_KEY=1;
   If INV_RPT_DT_KEY=. then INV_RPT_DT_KEY=1;
 Run;
%mend;

/* join to datetable to get date_key */
%macro AddDateKeytoFactTable (facttable, factcolumn, datekey);
 Proc SQL;
  Create table &facttable as
   Select f.*, d.date_key as &datekey
    From &facttable f, rdbdata.datetable d
     Where datepart(f.&factcolumn) = datepart(d.date_mm_dd_yyyy);
 Quit;
%mend;

/* macro to assign LDF_Group_Key in Fact table */
/* must be done before public_health_case_uid is dropped from Fact table */
/* does not apply to LAB, MORBIDITY */

%macro AddLDFGroupKeytoFactTable (facttable, facttable1);
 /* join Fact table with LDF_Group table to assign LDF_Group_Key */
 Proc SQL;
  Create table &facttable as
   Select fact.*, ldf.LDF_Group_Key
     From &facttable1 fact LEFT JOIN LDF_Group ldf
       On fact.public_health_case_uid = ldf.business_object_uid;
 Quit;
%mend;


/*******************************************************

	Update Condition Key
	On fact table

	Note: Requies the public_health_case_uid field on 
	the temporary fact table
********************************************************/
%macro update_Condition_Key2(fact_table);
proc sql;
	update &fact_table 
	set Condition_Key= 
	(select Condition_Key from rdbdata.Condition as con, rdbdata.Phcrootobs as phc
	where 	 &fact_table..public_health_case_uid = phc.public_health_case_uid
	and con.condition_cd =phc.condition_cd)
;

	update &fact_table
	set Condition_Key= 1 where Condition_Key= .;
quit;
%mend update_Condition_Key2;


/*************************************/

%macro dbdelete (DBtable);
/* delete all rows */
 Proc SQL;
  Delete *
   From nbs_rdb.&DBtable;
 Quit;
%mend dbdelete;

%macro dbload (DBtable, DSname);
/* append new data */
 Proc Append Force base=nbs_rdb.&DBtable data=&DSname;
 Run;
 Quit;
%mend dbload;  
%MACRO PROCESS_STAGING_DATA(STAGING_TABLE,TABLE_NM);
PROC SQL;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where (NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND upcase(DATA_TYPE)='TEXT')
OR (NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND RDB_COLUMN_NM like '%_CD');;
quit;
PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE TEXT_DATA AS
 SELECT  NBS_CASE_ANSWER_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	TRANSLATE(ANSWER_TXT,' ' ,'0D0A'x)	'ANSWER_TXT' as ANSWER_TXT,
ACT_UID LENGTH =8 AS PAGE_CASE_UID 'PAGE_CASE_UID',
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
nbs_cdc.NBS_CASE_ANSWER PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
LEFT OUTER JOIN PHC_UIDS on
PHC_UIDS.PAGE_CASE_UID=PA.act_uid
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE in ('CODED', 'TEXT')
ORDER BY 
	ACT_UID,NBS_CASE_ANSWER_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;
DATA TEXT_DATA;
SET TEXT_DATA;
if PAGE_CASE_UID=. THEN PAGE_CASE_UID = 1;
run;

PROC TRANSPOSE 
	DATA=TEXT_DATA OUT=TEXT_DATA_OUT;
	BY PAGE_CASE_UID;
	ID 	RDB_COLUMN_NM;
	VAR	ANSWER_TXT;
RUN;


proc sql;
create table rdb_ui_metadata as 
select distinct NUIM.NBS_QUESTION_UID,NRDBM.RDB_COLUMN_NM, NUIM.CODE_SET_GROUP_ID,  NUIM.unit_value,
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE,OTHER_VALUE_IND_CD
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND (upcase(DATA_TYPE)='CODED' or upcase(UNIT_TYPE_CD)='CODED')
AND RDB_COLUMN_NM not like '%_CD' ORDER BY OTHER_VALUE_IND_CD DESC, NBS_QUESTION_UID ASC;
quit;

data rdb_ui_metadata;
set rdb_ui_metadata;
if CODE_SET_GROUP_ID=. then data_type='CODED';
if CODE_SET_GROUP_ID=. then CODE_SET_GROUP_ID=unit_value;
run;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE CODED_TABLE AS
 SELECT  NBS_CASE_ANSWER_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT, ACT_UID LENGTH =8 AS PAGE_CASE_UID 'PAGE_CASE_UID',
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID,OTHER_VALUE_IND_CD
 FROM  rdb_ui_metadata  left outer join 
nbs_cdc.NBS_CASE_ANSWER PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
and pa.ANSWER_GROUP_SEQ_NBR IS NULL
LEFT OUTER JOIN PHC_UIDS on
PHC_UIDS.PAGE_CASE_UID=PA.act_uid
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND upcase(data_type) = 'CODED'
ORDER BY 
	ACT_UID,NBS_CASE_ANSWER_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA CODED_TABLE;
SET CODED_TABLE;
	X = INDEX(ANSWER_TXT, '^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANSWER_OTH=SUBSTR(ANSWER_TXT, x+1, LENGTH);
	IF X> 0 THEN ANSWER_TXT=SUBSTR(ANSWER_TXT, 1, (X-1));
	Y=LENGTHN(ANSWER_OTH);
	IF UPCASE (ANSWER_TXT)='OTH' THEN ANSWER_TXT='OTH';
RUN;


PROC SQL;

CREATE TABLE 
	CODED_TABLE_OTHER_EMPTY AS  SELECT DISTINCT CODED.CODE_SET_GROUP_ID, PAGE_CASE_UID, NBS_QUESTION_UID, RDB_COLUMN_NM ,
	  ANSWER_OTH AS ANSWER_DESC11 'ANSWER_DESC11', OTHER_VALUE_IND_CD
FROM CODED_TABLE CODED 	WHERE OTHER_VALUE_IND_CD= 'T'
AND ANSWER_TXT NE 'OTH'
ORDER BY NBS_CASE_ANSWER_UID, RDB_COLUMN_NM ;
QUIT;
DATA CODED_TABLE_OTHER_EMPTY;
SET CODED_TABLE_OTHER_EMPTY;
ANSWER_TXT = '';
RUN;

PROC SORT DATA=CODED_TABLE_OTHER_EMPTY NODUPKEY; BY CODE_SET_GROUP_ID PAGE_CASE_UID NBS_QUESTION_UID RDB_COLUMN_NM ANSWER_DESC11; RUN;
PROC SORT DATA=CODED_TABLE_OTHER_EMPTY; BY PAGE_CASE_UID RDB_COLUMN_NM;RUN;

PROC SQL;
CREATE TABLE 
	CODED_TABLE_OTHER_NONEMPTY AS  SELECT DISTINCT CODED.CODE_SET_GROUP_ID, PAGE_CASE_UID, NBS_QUESTION_UID, RDB_COLUMN_NM ,
	 NBS_CASE_ANSWER_UID, ANSWER_TXT, ANSWER_OTH AS ANSWER_DESC11 'ANSWER_DESC11', OTHER_VALUE_IND_CD
FROM CODED_TABLE CODED 	WHERE OTHER_VALUE_IND_CD= 'T'
AND (ANSWER_OTH IS NOT NULL OR ANSWER_TXT='OTH')
ORDER BY  PAGE_CASE_UID, RDB_COLUMN_NM;
QUIT;

PROC SQL;
DELETE 
FROM CODED_TABLE_OTHER_EMPTY AS A
WHERE A.RDB_COLUMN_NM = (SELECT B.RDB_COLUMN_NM  FROM CODED_TABLE_OTHER_NONEMPTY AS B 
	WHERE A.PAGE_CASE_UID=B.PAGE_CASE_UID
AND A.RDB_COLUMN_NM =B.RDB_COLUMN_NM);
QUIT;

DATA CODED_TABLE_OTHER; 
MERGE CODED_TABLE_OTHER_NONEMPTY(IN=In1) CODED_TABLE_OTHER_EMPTY(IN=In2);
 BY PAGE_CASE_UID RDB_COLUMN_NM;
 IF (In1=1 OR In2=1) then output;

RUN;

DATA CODED_TABLE_OTHER;
SET CODED_TABLE_OTHER;
LENGTH RDB_COLUMN_NM2 $26;
LENGTH RDB_COLUMN_NM $30;
RDB_COLUMN_NM2 =RDB_COLUMN_NM;
IF OTHER_VALUE_IND_CD = 'T' THEN RDB_COLUMN_NM = compress(RDB_COLUMN_NM2) || '_OTH';
IF (OTHER_VALUE_IND_CD = 'T' AND ANSWER_TXT   NE  'OTH') THEN ANSWER_TXT='';
DROP RDB_COLUMN_NM2;
RUN;
PROC SQL; 
CREATE TABLE  
	CODED_TABLE_STD AS  SELECT CODED.CODE_SET_GROUP_ID, PAGE_CASE_UID, NBS_QUESTION_UID,  
	 NBS_CASE_ANSWER_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, 
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1' 
FROM CODED_TABLE CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA 
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID 
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM 
AND CVG.CODE=CODED.ANSWER_TXT  
ORDER BY NBS_CASE_ANSWER_UID, RDB_COLUMN_NM; 
QUIT; 
PROC SQL;
CREATE TABLE RDB_UI_METADATA AS 
SELECT DISTINCT NUIM.NBS_QUESTION_UID,NRDBM.RDB_COLUMN_NM, NUIM.CODE_SET_GROUP_ID, 
NUIM.UNIT_VALUE, NUIM.INVESTIGATION_FORM_CD, MASK,CODE_SET_GROUP_ID,
QUESTION_GROUP_SEQ_NBR,DATA_TYPE, UNIT_VALUE, UNIT_TYPE_CD
FROM
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND ( (upcase(DATA_TYPE)='NUMERIC' and  upcase(mask)='NUM_TEMP')
OR  (upcase(DATA_TYPE)='NUMERIC' and  upcase(mask)='NUM_SN' and unit_type_cd='CODED')
OR  (upcase(DATA_TYPE)='NUMERIC' and  upcase(mask)='NUM' and unit_type_cd='CODED')
)
AND RDB_COLUMN_NM not like '%_CD';
quit;

data rdb_ui_metadata;
set rdb_ui_metadata;
if MISSING(CODE_SET_GROUP_ID) AND UNIT_TYPE_CD='CODED' then CODE_SET_GROUP_ID=unit_value;
run;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
PROC SQL;
 CREATE TABLE CODED_TABLE_SNTEMP AS
 SELECT  NBS_CASE_ANSWER_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT, ACT_UID LENGTH =8 AS PAGE_CASE_UID 'PAGE_CASE_UID',
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID, MASK
 FROM  rdb_ui_metadata  left outer join 
nbs_cdc.NBS_CASE_ANSWER PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
LEFT OUTER JOIN PHC_UIDS on
PHC_UIDS.PAGE_CASE_UID=PA.act_uid
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND upcase(data_type) = 'NUMERIC'
ORDER BY 
	ACT_UID,NBS_CASE_ANSWER_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA CODED_TABLE_SNTEMP;
SET CODED_TABLE_SNTEMP;
	X = INDEX(ANSWER_TXT, '^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANSWER_TXT_CODE=SUBSTR(ANSWER_TXT, x+1, LENGTH);
	IF X> 0 THEN ANSWER_VALUE=INPUT(SUBSTR(ANSWER_TXT, 1, (X-1)),  comma20.);
	DROP ANSWER_TXT;
RUN;

PROC SQL;
CREATE TABLE 
	CODED_TABLE_SNTEMP_TRANS_A AS  SELECT CODED.CODE_SET_GROUP_ID, PAGE_CASE_UID, 
ANSWER_TXT_CODE , ANSWER_VALUE, NBS_CASE_ANSWER_UID,  CVG.CODE_SET_NM, RDB_COLUMN_NM,  
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT2 'ANSWER_TXT2', MASK
FROM CODED_TABLE_SNTEMP CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND CVG.CODE=CODED.ANSWER_TXT_CODE
ORDER BY NBS_CASE_ANSWER_UID, RDB_COLUMN_NM;
QUIT;

DATA CODED_TABLE_SNTEMP_TRANS_A;
SET CODED_TABLE_SNTEMP_TRANS_A;
if length(MASK)> 0 THEN ANSWER_TXT=compress(ANSWER_VALUE);
if length(MASK)= 0 THEN ANSWER_TXT=  compress(ANSWER_VALUE) ||' '||compress(ANSWER_TXT2);
DROP CODE_SET_GROUP_ID;
RUN;
DATA CODED_TABLE_SNTEMP_TRANS_CODE;
SET CODED_TABLE_SNTEMP_TRANS_A;
LENGTH RDB_COLUMN_NM2 $25;
LENGTH RDB_COLUMN_NM $30;
RDB_COLUMN_NM2=RDB_COLUMN_NM;
if length(mask)> 0 THEN RDB_COLUMN_NM=compress(RDB_COLUMN_NM2|| '_UNIT');
if length(mask)> 0 THEN ANSWER_TXT=compress(ANSWER_TXT2);
DROP CODE_SET_GROUP_ID RDB_COLUMN_NM2;
RUN;

DATA CODED_TABLE ; 
  MERGE CODED_TABLE_STD CODED_TABLE_SNTEMP_TRANS_A CODED_TABLE_SNTEMP_TRANS_CODE; 
  BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; 
RUN;

DATA CODED_TABLE;
SET CODED_TABLE;
IF TRIM(ANSWER_TXT1)='' THEN ANSWER_TXT1=ANSWER_TXT;
RUN;
PROC SORT DATA=CODED_TABLE; BY PAGE_CASE_UID RDB_COLUMN_NM NBS_QUESTION_UID; RUN;


DATA CODED_TABLE_DESC;
SET CODED_TABLE;
	BY PAGE_CASE_UID RDB_COLUMN_NM NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	
		END;
		I = 0; ANSWER_DESC11 = ''; 
	END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID THEN OUTPUT;
RUN;

DATA CODED_TABLE_DESC;
SET CODED_TABLE_DESC;
 A=LENGTHN(ANSWER_TXT);
 IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 LENGTH=LENGTHN(ANSWER_DESC11);
 IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
RUN;


PROC SQL;
CREATE TABLE 
	CODED_COUNTY_TABLE AS 
SELECT 
	CODED.CODE_SET_GROUP_ID, PAGE_CASE_UID, NBS_QUESTION_UID, 
	NBS_CASE_ANSWER_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH,
	CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1'
FROM 
	CODED_TABLE CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  
	METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.V_STATE_COUNTY_CODE_VALUE CVG
ON 	
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND	
	CVG.CODE=CODED.ANSWER_TXT
WHERE METADATA.CODE_SET_NM= 'COUNTY_CCD';
QUIT;
PROC SORT DATA=CODED_COUNTY_TABLE; BY PAGE_CASE_UID NBS_QUESTION_UID; RUN;
DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE;
	BY PAGE_CASE_UID NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF  FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	END;
		I = 0; ANSWER_DESC11 = ''; 
		END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID  THEN OUTPUT;
	IF PAGE_CASE_UID=. THEN PAGE_CASE_UID= 1;
RUN;

DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE_DESC;
 	A=LENGTHN(ANSWER_TXT);
 	IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 	LENGTH=LENGTHN(ANSWER_DESC11);
 	IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
	IF PAGE_CASE_UID=. THEN PAGE_CASE_UID= 1;
RUN;


PROC SORT DATA=CODED_COUNTY_TABLE_DESC; BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_DESC; BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_OTHER; BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; RUN;

DATA CODED_TABLE_MERGED ; 
  MERGE CODED_TABLE_OTHER CODED_TABLE_DESC CODED_COUNTY_TABLE_DESC ; 
  BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; 
RUN;

PROC SORT DATA=CODED_TABLE_MERGED; BY PAGE_CASE_UID RDB_COLUMN_NM; RUN;

PROC TRANSPOSE 
	DATA=CODED_TABLE_MERGED OUT=CODED_DATA_OUT;	BY PAGE_CASE_UID;
	ID 	RDB_COLUMN_NM; VAR ANSWER_DESC11;
RUN;

PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
CODED_TABLE_SNM CODED_TABLE_NONSNM CODED_TABLE CODED_TABLE1 CODED_TABLE2 CODED_TABLE_DESC  CODED_TABLE_MERGED
RUN;
QUIT;

proc sql;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND DATA_TYPE in ('Date/Time','Date', 'DATETIME','DATE');
quit;
PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE DATE_DATA AS
 SELECT  NBS_CASE_ANSWER_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT, ACT_UID LENGTH =8 AS PAGE_CASE_UID 'PAGE_CASE_UID',
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
nbs_cdc.NBS_CASE_ANSWER PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
LEFT OUTER JOIN PHC_UIDS on
PHC_UIDS.PAGE_CASE_UID=PA.act_uid
left outer JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE IN( 'DATETIME','DATE')  
ORDER BY 
	ACT_UID,NBS_CASE_ANSWER_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA DATE_DATA;
SET DATE_DATA;
	ANSWER_TXT1=input(ANSWER_TXT,anydtdtm20.);
	informat ANSWER_TXT1 LAST_CHG_TIME  dateTIME22.3 ;
	format ANSWER_TXT1 LAST_CHG_TIME dateTIME22.3;
RUN;

DATA DATE_DATA; 
SET DATE_DATA;  
DROP _LABEL_; 
DROP _NAME_; 
IF PAGE_CASE_UID=. THEN PAGE_CASE_UID= 1;
RUN; 
PROC SQL;
CREATE TABLE DATE_DATA1 AS SELECT * FROM DATE_DATA;
QUIT;
%DBLOAD (PAGE_DATE_TABLE, DATE_DATA1); 
DATA PAGE_DATE_TABLE; SET nbs_rdb.PAGE_DATE_TABLE; BY PAGE_CASE_UID; RUN; 
PROC TRANSPOSE DATA=PAGE_DATE_TABLE OUT=DATE_DATA_OUT; 
	BY PAGE_CASE_UID; 
	ID 	RDB_COLUMN_NM; 
	VAR	ANSWER_TXT1; 
RUN; 
PROC SQL;
DROP TABLE nbs_rdb.PAGE_DATE_TABLE;
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
PAGE_DATE_TABLE
DATE_DATA
RUN;
QUIT;
proc sql;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND DATA_TYPE in ('Numeric', 'NUMERIC');
quit;
PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE NUMERIC_BASE_DATA AS
 SELECT  NBS_CASE_ANSWER_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT, ACT_UID LENGTH =8 AS PAGE_CASE_UID 'PAGE_CASE_UID',
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
nbs_cdc.NBS_CASE_ANSWER PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
LEFT OUTER JOIN PHC_UIDS on
PHC_UIDS.PAGE_CASE_UID=PA.act_uid
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE in ('Numeric', 'NUMERIC') 
ORDER BY 
	ACT_UID,NBS_CASE_ANSWER_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;
DATA NUMERIC_DATA1;
SET NUMERIC_BASE_DATA;
	X = INDEX(ANSWER_TXT, '^');
	ANSWER_TXT1=ANSWER_TXT;
	LENGTH=LENGTHN(ANSWER_TXT1);
	IF X> 0 THEN ANSWER_UNIT=SUBSTR(ANSWER_TXT, 1, (X-1));
	IF X> 0 THEN LENCODED=LENGTHN(ANSWER_UNIT);
	IF X> 0 THEN ANSWER_CODED=SUBSTR(ANSWER_TXT, (LENCODED+2), LENGTH);
	IF X> 0 THEN UNIT_VALUE1 = INPUT(ANSWER_UNIT, COMMA20.);
	Y=LENGTHN(ANSWER_CODED);
	IF(Y>0) THEN RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM) || ' UNIT';
RUN;

DATA NUMERIC_DATA2;
SET NUMERIC_DATA1;
IF(LENGTHN(RDB_COLUMN_NM2)>0) THEN RDB_COLUMN_NM=RDB_COLUMN_NM2;
RUN;

PROC SORT DATA=NUMERIC_DATA2; BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=NUMERIC_DATA1; BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; RUN;

DATA NUMERIC_DATA_MERGED ; 
  MERGE NUMERIC_DATA1 NUMERIC_DATA2; 
  BY NBS_CASE_ANSWER_UID RDB_COLUMN_NM; 
RUN;
PROC SQL;

CREATE TABLE 
	NUMERIC_DATA_TRANS  AS 
SELECT 
	PAGE_CASE_UID, NBS_QUESTION_UID, 
	 NBS_CASE_ANSWER_UID, ANSWER_UNIT,ANSWER_CODED, CVG.CODE_SET_NM,RDB_COLUMN_NM,
	ANSWER_TXT,	CODE,CODE_SHORT_DESC_TXT AS UNIT 'UNIT', ANSWER_UNIT 
FROM 
	NUMERIC_DATA_MERGED CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON 
	METADATA.CODE_SET_GROUP_ID=CODED.UNIT_VALUE1
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
ON 
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
WHERE 
	CVG.CODE=CODED.ANSWER_CODED
	ORDER BY PAGE_CASE_UID
		;
QUIT;
DATA NUMERIC_DATA_TRANS;
SET NUMERIC_DATA_TRANS;
	X=INDEX(RDB_COLUMN_NM,' UNIT');
	IF TRIM(UNIT)=''  THEN ANSWER_TXT=ANSWER_TXT;
	ELSE IF X>0 THEN ANSWER_TXT=UNIT;
	ELSE ANSWER_TXT=ANSWER_UNIT;
	if PAGE_CASE_UID=. then PAGE_CASE_UID=1;
RUN;
PROC SQL;
CREATE TABLE NUMERIC_DATA_TRANS1 AS 
SELECT DISTINCT PAGE_CASE_UID,
RDB_COLUMN_NM, 
ANSWER_UNIT,
ANSWER_TXT
FROM NUMERIC_DATA_TRANS;
QUIT;

PROC TRANSPOSE 
	DATA=NUMERIC_DATA_TRANS1 OUT=NUMERIC_DATA_PIVOT;
	BY PAGE_CASE_UID;
	ID 	RDB_COLUMN_NM;
	VAR	ANSWER_TXT;
RUN;

PROC SQL;
CREATE TABLE NUMERIC_DATA_OUT 
	AS SELECT * FROM NUMERIC_DATA_PIVOT 
	WHERE LENGTHN(_LABEL_)>0 AND PAGE_CASE_UID>0;
QUIT;
DATA NUMERIC_DATA_OUT;
SET NUMERIC_DATA_OUT;
DROP _LABEL_;
DROP _NAME_;
RUN;


proc sql;
create table Stageing_key_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,data_type,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL;

create table STAGING_KEY AS select
	ACT_UID LENGTH =8 AS PAGE_CASE_UID 'PAGE_CASE_UID',NBS_CASE_ANSWER_UID, PHC_UIDS.LAST_CHG_TIME
FROM  Stageing_key_metadata NUIM
	INNER JOIN
	nbs_cdc.NBS_CASE_ANSWER PA 
ON	NUIM.NBS_QUESTION_UID =PA.NBS_QUESTION_UID
	INNER JOIN 
	PHC_UIDS 
ON	PHC_UIDS.PAGE_CASE_UID=PA.ACT_UID
WHERE 
ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	ACT_UID,NBS_CASE_ANSWER_UID, NUIM.CODE_SET_GROUP_ID;
quit;

/* PROC SORT DATA=STAGING_KEY NODUPKEY; BY PAGE_CASE_UID; RUN; -- old code commented*/
/* Texas - Added tagsort to Proc Sort statement + NEW CODE (PROC SORTs & Create Index) 08/20/2020 */
PROC SORT tagsort DATA=STAGING_KEY NODUPKEY; BY PAGE_CASE_UID; RUN;

proc datasets lib=work nolist;	
	modify STAGING_KEY; index create page_case_uid;
quit;	
/* --------------------------- 08/20/2020 ------------------------------------ */ 
PROC SQL;
DROP TABLE nbs_rdb.&STAGING_TABLE;
QUIT;

PROC SQL;
CREATE TABLE 
	nbs_rdb.&STAGING_TABLE(DROP=_NAME_ _LABEL_) AS 
SELECT * 
FROM 
	STAGING_KEY
	LEFT OUTER JOIN NUMERIC_DATA_OUT
ON 
	NUMERIC_DATA_OUT.PAGE_CASE_UID=STAGING_KEY.PAGE_CASE_UID
	LEFT OUTER  JOIN DATE_DATA_OUT 
ON 
	DATE_DATA_OUT.PAGE_CASE_UID=STAGING_KEY.PAGE_CASE_UID
	LEFT OUTER  JOIN CODED_DATA_OUT
ON 
	CODED_DATA_OUT.PAGE_CASE_UID=STAGING_KEY.PAGE_CASE_UID
	LEFT OUTER  JOIN TEXT_DATA_OUT 
ON 
	TEXT_DATA_OUT.PAGE_CASE_UID=STAGING_KEY.PAGE_CASE_UID;
QUIT;

PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
TEXT_DATA TEXT_DATA_OUT
CODED_DATA_OUT CODED_TABLE 
DATE_DATA DATE_DATA_OUT DATE_DATA1
NUMERIC_BASE_DATA NUMERIC_DATA1 
NUMERIC_DATA2 NUMERIC_DATA_MERGED 
NUMERIC_DATA_OUT NUMERIC_DATA_PIVOT 
NUMERIC_DATA_TRANS NUMERIC_DATA_TRANS1
STAGING_KEY &STAGING_TABLE Rdb_ui_metadata RUN;
QUIT;
%MEND PROCESS_STAGING_DATA;

%MACRO PAGE_DIMENSIONAL(DIM, DIM_KEY,SOURCE,SOURCE_UID, LOOKUP, LOOKUP_UID);
PROC SQL;
DROP TABLE nbs_rdb.&DIM;
QUIT;
PROC SQL;
CREATE TABLE 
	&DIM AS 
SELECT * 
FROM  nbs_rdb.&LOOKUP INNER JOIN nbs_rdb.&SOURCE 
ON &SOURCE_UID=&LOOKUP_UID;
QUIT;

DATA &DIM;
SET &DIM;
DROP PAGE_CASE_UID;
DROP LAST_CHG_TIME;
RUN;
PROC SQL;
DELETE FROM &DIM WHERE &DIM_KEY=1;
QUIT;
PROC SQL;
INSERT INTO &DIM (&DIM_KEY) VALUES (1); 
QUIT;

/* PROC SORT DATA=&DIM NODUPKEY; BY &DIM_KEY ; RUN; -- old code commented*/
/* Texas- Added tagsort to Proc Sort statement 08/20/2020 */
PROC SORT tagsort DATA=&DIM NODUPKEY; BY &DIM_KEY ; RUN;
/* --------------------------- 08/20/2020 ------------------------------------ */ 
%DBLOAD (&DIM, &DIM);
%MEND PAGE_DIMENSIONAL;
%MACRO PAGE_LOOKUP(LOOKUP_TABLE,STAGING_TABLE,STAGING_TABLE_UID, D_KEY);
PROC SQL;
CREATE TABLE LOOKUP_TABLE_N AS
SELECT &STAGING_TABLE_UID AS  PAGE_CASE_UID 'PAGE_CASE_UID'
FROM nbs_rdb.&STAGING_TABLE;
QUIT;
PROC SQL;
CREATE TABLE LOOKUP_TABLE1 AS
SELECT PHC_UIDS.PAGE_CASE_UID 
FROM PHC_UIDS EXCEPT SELECT  PAGE_CASE_UID FROM nbs_rdb.&STAGING_TABLE;
QUIT;
DATA LOOKUP_TABLE1;
SET LOOKUP_TABLE1;
D_NE_KEY=1;
RUN;
%ASSIGN_ADDITIONAL_KEY (LOOKUP_TABLE_N, &D_KEY);
/* PROC SORT DATA=LOOKUP_TABLE_N NODUPKEY; BY &D_KEY;RUN;  -- old code commented*/
/* Texas- Added tagsort to Proc Sort statement 08/20/2020 */
PROC SORT tagsort DATA=LOOKUP_TABLE_N NODUPKEY; BY &D_KEY;RUN;
/* --------------------------- 08/20/2020 ------------------------------------ */ 
PROC SQL;
CREATE TABLE &LOOKUP_TABLE AS SELECT 
LOOKUP_TABLE_N.PAGE_CASE_UID AS PAGE_CASE_UID_N 'PAGE_CASE_UID_N',
LOOKUP_TABLE1.PAGE_CASE_UID AS  PAGE_CASE_UID_NE 'PAGE_CASE_UID_NE',
LOOKUP_TABLE_N.&D_KEY,
LOOKUP_TABLE1.D_NE_KEY
FROM LOOKUP_TABLE1 FULL JOIN LOOKUP_TABLE_N
ON LOOKUP_TABLE1.PAGE_CASE_UID=LOOKUP_TABLE_N.PAGE_CASE_UID;
QUIT;
DATA &LOOKUP_TABLE;
SET &LOOKUP_TABLE;
IF PAGE_CASE_UID_N~=. THEN PAGE_CASE_UID=PAGE_CASE_UID_N;
ELSE PAGE_CASE_UID=PAGE_CASE_UID_NE;
IF &D_KEY~=. THEN &D_KEY=&D_KEY +1;
ELSE &D_KEY=D_NE_KEY;
RUN;
DATA &LOOKUP_TABLE;
SET &LOOKUP_TABLE;
DROP D_NE_KEY;
DROP PAGE_CASE_UID_NE;
DROP PAGE_CASE_UID_N;
RUN; 
PROC SORT DATA=&LOOKUP_TABLE NODUPKEY; BY PAGE_CASE_UID; RUN;

%DBLOAD (&LOOKUP_TABLE, &LOOKUP_TABLE);
%MEND PAGE_LOOKUP;
%MACRO PROCESS_DYNAMIC_DATA(ODS_TABLE, TABLE_NM, STAGING_UIDS, UID, DATA_LOCATION, ACT_UID, answer_UID);
PROC SQL;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND upcase(DATA_TYPE)='TEXT'
AND data_location = &DATA_LOCATION;
quit;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE TEXT_DATA AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
TRANSLATE(ANSWER_TXT,' ' ,'0D0A'x)	'ANSWER_TXT' as ANSWER_TXT,
 &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID ,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS on
&STAGING_UIDS .&uid=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE = 'TEXT'
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA TEXT_DATA;
set TEXT_DATA;
IF PAGE_CASE_UID=. THEN PAGE_CASE_UID= 1;
RUN;
PROC TRANSPOSE 
	DATA=TEXT_DATA OUT=TEXT_DATA_OUT;
	BY  &UID;
	ID 	RDB_COLUMN_NM;
	VAR	ANSWER_TXT;
RUN;


proc sql;
create table rdb_ui_metadata as 
select distinct NUIM.NBS_QUESTION_UID,NRDBM.RDB_COLUMN_NM, NUIM.CODE_SET_GROUP_ID,  NUIM.unit_value,
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION

AND (upcase(DATA_TYPE)='CODED' or upcase(UNIT_TYPE_CD)='CODED');
quit;

data rdb_ui_metadata;
set rdb_ui_metadata;
if CODE_SET_GROUP_ID=. then data_type='CODED';
if CODE_SET_GROUP_ID=. then CODE_SET_GROUP_ID=unit_value;
run;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE CODED_TABLE AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,   &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID ,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS  on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND upcase(data_type) = 'CODED'
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA CODED_TABLE;
SET CODED_TABLE;
	X = INDEX(ANSWER_TXT, '^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANSWER_OTH=SUBSTR(ANSWER_TXT, x+1, LENGTH);
	IF X> 0 THEN ANSWER_TXT=SUBSTR(ANSWER_TXT, 1, (X-1));
	Y=LENGTHN(ANSWER_OTH);
	IF(Y>0) THEN RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM) || '_OTH';
	IF UPCASE (ANSWER_TXT)='OTH' THEN ANSWER_TXT='OTH';
RUN;


PROC SQL;
CREATE TABLE 
	CODED_TABLE_SNM AS  SELECT CODED.CODE_SET_GROUP_ID,&UID, NBS_QUESTION_UID, 
	 &answer_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, 
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT2 'ANSWER_TXT2'
FROM CODED_TABLE CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND CVG.CODE=CODED.ANSWER_OTH where answer_OTH is not null and  answer_txt<>'OTH'
ORDER BY &answer_UID, RDB_COLUMN_NM;
QUIT;
PROC SQL; 
CREATE TABLE  
	CODED_TABLE_NONSNM AS  SELECT CODED.CODE_SET_GROUP_ID,&UID, NBS_QUESTION_UID,  
	 &answer_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, RDB_COLUMN_NM2, 
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1' 
FROM CODED_TABLE CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA 
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID 
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM 
AND CVG.CODE=CODED.ANSWER_TXT where &answer_UID not in (select &answer_UID from CODED_TABLE_SNM) 
ORDER BY &answer_UID, RDB_COLUMN_NM; 
QUIT; 

DATA CODED_TABLE_SNM; 
SET CODED_TABLE_SNM; 
DROP answer_oth; 
ANSWER_TXT=  compress(ANSWER_TXT) ||' '||compress(ANSWER_TXT2);
RUN;

proc sql;
create table rdb_ui_metadata as 
select distinct NUIM.NBS_QUESTION_UID,NRDBM.RDB_COLUMN_NM, NUIM.CODE_SET_GROUP_ID,  NUIM.unit_value,
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE, UNIT_VALUE
FROM
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION
AND ( (upcase(DATA_TYPE)='NUMERIC' and  upcase(mask)='NUM_TEMP')
OR  (upcase(DATA_TYPE)='NUMERIC' and  upcase(mask)='NUM_SN' and unit_type_cd='CODED'))
AND RDB_COLUMN_NM not like '%_CD';
quit;

data rdb_ui_metadata;
set rdb_ui_metadata;
if CODE_SET_GROUP_ID=. then CODE_SET_GROUP_ID=unit_value;
run;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE CODED_TABLE_SNTEMP AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,   &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID ,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS  on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND upcase(data_type) = 'CODED'
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA CODED_TABLE_SNTEMP;
SET CODED_TABLE_SNTEMP;
	X = INDEX(ANSWER_TXT, '^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANSWER_TXT_CODE=SUBSTR(ANSWER_TXT, x+1, LENGTH);
	IF X> 0 THEN ANSWER_VALUE=INPUT(SUBSTR(ANSWER_TXT, 1, (X-1)),  comma20.);
	DROP ANSWER_TXT;
RUN;

PROC SQL;
CREATE TABLE 
	CODED_TABLE_SNTEMP_TRANS AS  SELECT CODED.CODE_SET_GROUP_ID, &UID, 
ANSWER_TXT_CODE , ANSWER_VALUE, &answer_UID,  CVG.CODE_SET_NM, RDB_COLUMN_NM,  
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT2 'ANSWER_TXT2'
FROM CODED_TABLE_SNTEMP CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND CVG.CODE=CODED.ANSWER_TXT_CODE
ORDER BY &answer_UID, RDB_COLUMN_NM;
QUIT;
DATA CODED_TABLE_SNTEMP_TRANS;
SET CODED_TABLE_SNTEMP_TRANS;
ANSWER_TXT=  compress(ANSWER_VALUE) ||' '||compress(ANSWER_TXT2);
DROP CODE_SET_GROUP_ID;
RUN;

DATA CODED_TABLE ; 
  MERGE CODED_TABLE_NONSNM CODED_TABLE_SNM CODED_TABLE_SNTEMP_TRANS; 
  BY &answer_UID RDB_COLUMN_NM; 
RUN;

DATA CODED_TABLE;
SET CODED_TABLE;
IF TRIM(ANSWER_TXT1)='' THEN ANSWER_TXT1=ANSWER_TXT;
RUN;
PROC SORT DATA=CODED_TABLE; BY &UID NBS_QUESTION_UID; RUN;
DATA CODED_TABLE_DESC;
SET CODED_TABLE;
	BY &UID NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	
		END;
		I = 0; ANSWER_DESC11 = ''; 
	END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID THEN OUTPUT;
RUN;

DATA CODED_TABLE_DESC;
SET CODED_TABLE_DESC;
 A=LENGTHN(ANSWER_TXT);
 IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 LENGTH=LENGTHN(ANSWER_DESC11);
 IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
RUN;


PROC SQL;
CREATE TABLE 
	CODED_COUNTY_TABLE AS 
SELECT 
	CODED.CODE_SET_GROUP_ID, &UID, NBS_QUESTION_UID, 
	&answer_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, RDB_COLUMN_NM2,
	CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1'
FROM 
	CODED_TABLE CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  
	METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.V_STATE_COUNTY_CODE_VALUE CVG
ON 	
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND	
	CVG.CODE=CODED.ANSWER_TXT
WHERE METADATA.CODE_SET_NM= 'COUNTY_CCD';
QUIT;
PROC SORT DATA=CODED_COUNTY_TABLE; BY  &UID NBS_QUESTION_UID; RUN;
DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE;
	BY  &UID NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF  FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	END;
		I = 0; ANSWER_DESC11 = ''; 
		END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID  THEN OUTPUT;
RUN;

DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE_DESC;
 	A=LENGTHN(ANSWER_TXT);
 	IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 	LENGTH=LENGTHN(ANSWER_DESC11);
 	IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
RUN;

DATA CODED_TABLE_OTH;
SET CODED_TABLE;
 IF LENGTHN(TRIM(RDB_COLUMN_NM2))>0;
 IF(LENGTHN(RDB_COLUMN_NM2)>0) 
   THEN RDB_COLUMN_NM=RDB_COLUMN_NM2;
IF(LENGTHN(TRIM(RDB_COLUMN_NM2))>0) 
   THEN ANSWER_DESC11=ANSWER_OTH;
RUN;
PROC SORT DATA=CODED_COUNTY_TABLE_DESC; BY &answer_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_DESC; BY &answer_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_OTH; BY &answer_UID RDB_COLUMN_NM; RUN;
DATA CODED_TABLE_MERGED ; 
  MERGE CODED_TABLE_DESC CODED_COUNTY_TABLE_DESC CODED_TABLE_OTH; 
  BY &answer_UID RDB_COLUMN_NM; 
RUN;

PROC SORT DATA=CODED_TABLE_MERGED; BY &UID RDB_COLUMN_NM; RUN;

DATA CODED_TABLE_MERGED; set CODED_TABLE_MERGED;IF  &UID= . THEN  &UID=1;RUN;
PROC TRANSPOSE 
	DATA=CODED_TABLE_MERGED OUT=CODED_DATA_OUT;	BY  &UID;
	ID 	RDB_COLUMN_NM; VAR ANSWER_DESC11;
RUN;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
CODED_TABLE_SNM CODED_TABLE_NONSNM CODED_TABLE CODED_TABLE1 CODED_TABLE2 CODED_TABLE_DESC CODED_TABLE_OTH CODED_TABLE_MERGED
RUN;
QUIT;
proc sql;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID

AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION
AND DATA_TYPE in ('Date/Time','Date', 'DATETIME','DATE');
quit;
PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE DATE_DATA AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,  &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS  on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE IN( 'DATETIME','DATE')  
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID; 
QUIT;

DATA DATE_DATA;
SET DATE_DATA;
	ANSWER_TXT1=input(ANSWER_TXT,anydtdtm20.);
	informat ANSWER_TXT1 LAST_CHG_TIME  dateTIME22.3 ;
	format ANSWER_TXT1 LAST_CHG_TIME dateTIME22.3;
RUN;

DATA DATE_DATA; 
SET DATE_DATA;  
DROP _LABEL_; 
DROP _NAME_; 
RUN; 
DATA DATE_DATA; set DATE_DATA;IF  &UID= . THEN  &UID=1;RUN;
PROC SQL;
CREATE TABLE DATE_DATA1 AS SELECT * FROM DATE_DATA;
QUIT;
%DBLOAD (PAGE_DATE_TABLE, DATE_DATA1); 

DATA PAGE_DATE_TABLE(sortedby=&UID); SET nbs_rdb.PAGE_DATE_TABLE; RUN; 
PROC TRANSPOSE DATA=PAGE_DATE_TABLE OUT=DATE_DATA_OUT; 
	BY  &UID; 
	ID 	RDB_COLUMN_NM; 
	VAR	ANSWER_TXT1; 
RUN; 
PROC SQL;
DROP TABLE nbs_rdb.PAGE_DATE_TABLE;
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
PAGE_DATE_TABLE
DATE_DATA
RUN;
QUIT;
proc sql;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION
AND DATA_TYPE in ('Numeric', 'NUMERIC');
quit;
PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE NUMERIC_BASE_DATA AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,  &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE in ('Numeric', 'NUMERIC') 
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;
DATA NUMERIC_DATA1;
SET NUMERIC_BASE_DATA;
	X = INDEX(ANSWER_TXT, '^');
	ANSWER_TXT1=ANSWER_TXT;
	LENGTH=LENGTHN(ANSWER_TXT1);
	IF X> 0 THEN ANSWER_UNIT=SUBSTR(ANSWER_TXT, 1, (X-1));
	IF X> 0 THEN LENCODED=LENGTHN(ANSWER_UNIT);
	IF X> 0 THEN ANSWER_CODED=SUBSTR(ANSWER_TXT, (LENCODED+2), LENGTH);
	IF X> 0 THEN UNIT_VALUE1 = INPUT(ANSWER_UNIT, COMMA20.);
	Y=LENGTHN(ANSWER_CODED);
	IF(Y>0) THEN RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM) || ' UNIT';
RUN;

DATA NUMERIC_DATA2;
SET NUMERIC_DATA1;
IF(LENGTHN(RDB_COLUMN_NM2)>0) THEN RDB_COLUMN_NM=RDB_COLUMN_NM2;
RUN;

PROC SORT DATA=NUMERIC_DATA2; BY &answer_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=NUMERIC_DATA1; BY &answer_UID RDB_COLUMN_NM; RUN;

DATA NUMERIC_DATA_MERGED ; 
  MERGE NUMERIC_DATA1 NUMERIC_DATA2; 
  BY &answer_UID RDB_COLUMN_NM; 
RUN;
PROC SQL;

CREATE TABLE 
	NUMERIC_DATA_TRANS  AS 
SELECT 
	&UID, NBS_QUESTION_UID, 
	 &answer_UID, ANSWER_UNIT,ANSWER_CODED, CVG.CODE_SET_NM,RDB_COLUMN_NM,
	ANSWER_TXT,	CODE,CODE_SHORT_DESC_TXT AS UNIT 'UNIT', ANSWER_UNIT 
FROM 
	NUMERIC_DATA_MERGED CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON 
	METADATA.CODE_SET_GROUP_ID=CODED.UNIT_VALUE1
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
ON 
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
WHERE 
	CVG.CODE=CODED.ANSWER_CODED
	ORDER BY &UID
		;
QUIT;
DATA NUMERIC_DATA_TRANS;
SET NUMERIC_DATA_TRANS;
	X=INDEX(RDB_COLUMN_NM,' UNIT');
	IF TRIM(UNIT)=''  THEN ANSWER_TXT=ANSWER_TXT;
	ELSE IF X>0 THEN ANSWER_TXT=UNIT;
	ELSE ANSWER_TXT=ANSWER_UNIT;
RUN;
PROC SQL;
CREATE TABLE NUMERIC_DATA_TRANS1 AS 
SELECT DISTINCT  &UID,
RDB_COLUMN_NM, 
ANSWER_UNIT,
ANSWER_TXT
FROM NUMERIC_DATA_TRANS;
QUIT;
DATA NUMERIC_DATA_TRANS1; set NUMERIC_DATA_TRANS1;IF  &UID= . THEN  &UID=1;RUN;

PROC TRANSPOSE 
	DATA=NUMERIC_DATA_TRANS1 OUT=NUMERIC_DATA_PIVOT;
	BY  &UID;
	ID 	RDB_COLUMN_NM;
	VAR	ANSWER_TXT;
RUN;

PROC SQL;
CREATE TABLE NUMERIC_DATA_OUT 
	AS SELECT * FROM NUMERIC_DATA_PIVOT 
	WHERE LENGTHN(_LABEL_)>0 AND  &UID>0;
QUIT;
DATA NUMERIC_DATA_OUT;
SET NUMERIC_DATA_OUT;
DROP _LABEL_;
DROP _NAME_;
RUN;

%MEND PROCESS_DYNAMIC_DATA;

%macro contact_interview_incl;
PROC SQL;
CREATE TABLE F_CONTACT_RECORD_CASE AS SELECT L_CONTACT_RECORD.D_CONTACT_RECORD_KEY, THIRD_PARTY_ENTITY_KEY,
CONTACT_KEY, SUBJECT_KEY, THIRD_PARTY_INVESTIGATION_KEY, SUBJECT_INVESTIGATION_KEY, CONTACT_INVESTIGATION_KEY,
CONTACT_INTERVIEW_KEY 
FROM L_CONTACT_RECORD
	LEFT OUTER  JOIN CONTACT_PHC
ON 
	CONTACT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_PHC
ON 
	SUBJECT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_THIRD_PARTY_PHC
ON 
	CONTACT_THIRD_PARTY_PHC.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_ENTITITY
ON 
	SUBJECT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_ENTITITY
ON 
	CONTACT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN THIRD_PARTY_ENTITITY
ON 
	THIRD_PARTY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_INTERVIEWS
ON 
	CONTACT_INTERVIEWS.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
;
QUIT;
%mend;
%macro contact_interview_excl;
PROC SQL;
CREATE TABLE F_CONTACT_RECORD_CASE AS SELECT L_CONTACT_RECORD.D_CONTACT_RECORD_KEY, THIRD_PARTY_ENTITY_KEY,
CONTACT_KEY, SUBJECT_KEY, THIRD_PARTY_INVESTIGATION_KEY, SUBJECT_INVESTIGATION_KEY, CONTACT_INVESTIGATION_KEY
FROM L_CONTACT_RECORD
	LEFT OUTER  JOIN CONTACT_PHC 
ON 
	CONTACT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_PHC
ON 
	SUBJECT_PHC.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_THIRD_PARTY_PHC
ON 
	CONTACT_THIRD_PARTY_PHC.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN SUBJECT_ENTITITY
ON 
	SUBJECT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN CONTACT_ENTITITY
ON 
	CONTACT_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID
	LEFT OUTER  JOIN THIRD_PARTY_ENTITITY
ON 
	THIRD_PARTY_ENTITITY.CT_CONTACT_UID=L_CONTACT_RECORD.CT_CONTACT_UID;
QUIT;
%mend;
%MACRO PROCESS_DYNAMIC_LOOKUP(STAGING, LOOKUP,  UID, KEY, KEY_MAX_VAL);
CREATE TABLE &LOOKUP_N  AS 
	SELECT DISTINCT &STAGING.&UID FROM nbs_rdb.&STAGING
	EXCEPT SELECT &LOOKUP.&UID FROM nbs_rdb.&LOOKUP;
CREATE TABLE &LOOKUP_E AS
	SELECT &STAGING.&UID,&LOOKUP.&KEY
		FROM nbs_rdb.&STAGING,nbs_rdb.&LOOKUP
WHERE &STAGING.&UID= &LOOKUP.&UID;
ALTER TABLE &LOOKUP_N ADD &KEY_MAX_VAL  NUMERIC;
UPDATE &LOOKUP_N SET &KEY_MAX_VAL=(SELECT MAX(&KEY) FROM nbs_rdb.&LOOKUP);
QUIT;
%ASSIGN_ADDITIONAL_KEY (&LOOKUP_N, &KEY);
PROC SORT DATA=&LOOKUP_N NODUPKEY; BY &KEY; RUN;
DATA &LOOKUP_N;
SET &LOOKUP_N;
IF &KEY_MAX_VAL  ~=. THEN &KEY= &KEY+&KEY_MAX_VAL;
IF &KEY_MAX_VAL  =. THEN &KEY= &KEY+1;
DROP &KEY_MAX_VAL;
RUN;
%DBLOAD (&LOOKUP, &LOOKUP_N);
%MEND PROCESS_DYNAMIC_LOOKUP;

%MACRO INCREMENTAL(L_EVN_N, L_EVN,L_EVN_E, S_EVN, S_EVNT, UID, EVN_KEY);
%DBLOAD (&S_EVN, &S_EVN);
PROC SQL;
CREATE TABLE &L_EVN_N  AS 
	SELECT DISTINCT &S_EVN .&UID FROM nbs_rdb.&S_EVN
	EXCEPT SELECT &L_EVN .&UID FROM nbs_rdb.&L_EVN;
CREATE TABLE &L_EVN_E AS
	SELECT &S_EVN .&UID,&L_EVN .&EVN_KEY
		FROM nbs_rdb.&S_EVN,nbs_rdb.&L_EVN
WHERE &S_EVN .&UID= &L_EVN .&UID;
ALTER TABLE &L_EVN_N ADD EVN_KEY_MAX_VAL  NUMERIC;
UPDATE &L_EVN_N SET EVN_KEY_MAX_VAL=(SELECT MAX(&EVN_KEY) FROM nbs_rdb.&L_EVN);
QUIT;
%ASSIGN_ADDITIONAL_KEY (&L_EVN_N, &EVN_KEY);
PROC SORT DATA=&L_EVN_N NODUPKEY; BY &EVN_KEY; RUN;

DATA &L_EVN_N;
SET &L_EVN_N;
IF EVN_KEY_MAX_VAL  ~=. THEN &EVN_KEY= &EVN_KEY+EVN_KEY_MAX_VAL;
IF EVN_KEY_MAX_VAL  =. THEN &EVN_KEY= &EVN_KEY+1;
DROP EVN_KEY_MAX_VAL;
RUN;
%DBLOAD (&L_EVN, &L_EVN_N);

PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM &S_EVN),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM nbs_rdb.&S_EVN),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=(SELECT COUNT(*) FROM &L_EVN_N),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM &L_EVN_E),
PROCESS_UID= (SELECT PROCESS_UID FROM nbs_rdb.ETL_PROCESS WHERE PROCESS_NAME=&S_EVNT);
QUIT;
DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID=. THEN ACTIVITY_LOG_DETAIL_UID=1;
IF ROW_COUNT_UPDATE<0 THEN ROW_COUNT_UPDATE=0;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN '|| &S_EVNT ||' TABLE.'||
' THERE IS(ARE) NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOAL NUMBER OF RECORD(S) IN THE '|| &S_EVNT ||' TABLE.';
RUN;

%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);
PROC SQL;
	UPDATE ACTIVITY_LOG_DETAIL SET START_DATE=DATETIME();
QUIT;
%MEND INCREMENTAL; 
%MACRO PAGE_DYNAMIC_LOOKUP(DIM_S,DIM_N, DIM_L,DIM_L_E, DIM_D,DIM_TEXT_D, DIM_D_KEY, UID);
PROC SQL;
CREATE TABLE 
	&DIM_N AS 
SELECT * 
FROM  &DIM_L LEFT OUTER JOIN &DIM_S 
ON &DIM_S .&UID=&DIM_L .&UID;
QUIT;


PROC SORT DATA=&DIM_N NODUPKEY; BY &DIM_D_KEY ; RUN;
PROC SQL;
CREATE TABLE 
	DIM_E AS 
SELECT * 
FROM  &DIM_L_E LEFT OUTER JOIN &DIM_S 
ON &DIM_S .&UID=&DIM_L_E .&UID;
QUIT;


PROC SORT DATA=DIM_E NODUPKEY; BY &DIM_D_KEY ; RUN;


%DBLOAD (&DIM_D, &DIM_N);

/*DATA NBS_RDB .&DIM_D;
 MODIFY NBS_RDB . &DIM_D DIM_E;
 BY &DIM_D_KEY;
RUN;
*/
data DIM_E;
set DIM_E;
	DROP &UID;
RUN;



DATA NBS_RDB .&DIM_D;
 MODIFY NBS_RDB . &DIM_D DIM_E UPDATEMODE=NOMISSINGCHECK;
 BY &DIM_D_KEY;
RUN;


PROC SQL;
UPDATE ACTIVITY_LOG_DETAIL SET SOURCE_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB .&DIM_S),
END_DATE=DATETIME(),
DESTINATION_ROW_COUNT=(SELECT COUNT(*) FROM NBS_RDB .&DIM_D),
ACTIVITY_LOG_DETAIL_UID= ((SELECT MAX(ACTIVITY_LOG_DETAIL_UID) FROM nbs_rdb.ACTIVITY_LOG_DETAIL)+1),
ROW_COUNT_INSERT=(SELECT COUNT(*) FROM &DIM_N),
ROW_COUNT_UPDATE=(SELECT COUNT(*) FROM DIM_E),
PROCESS_UID= (SELECT PROCESS_UID FROM nbs_rdb.ETL_PROCESS WHERE PROCESS_NAME= &DIM_TEXT_D);
QUIT;
 proc print data=ACTIVITY_LOG_DETAIL;
 var PROCESS_UID;
 run;

DATA ACTIVITY_LOG_DETAIL;
SET ACTIVITY_LOG_DETAIL;
IF ACTIVITY_LOG_DETAIL_UID=. THEN ACTIVITY_LOG_DETAIL_UID=1;
IF ROW_COUNT_UPDATE<0 THEN ROW_COUNT_UPDATE=0;
ADMIN_COMMENT=COMPRESS(ROW_COUNT_INSERT) || ' RECORD(S) INSERTED AND ' ||COMPRESS(ROW_COUNT_UPDATE) || ' RECORD(S) UPDATED IN '|| &DIM_TEXT_D ||' TABLE.'||
' THERE IS(ARE) NOW '|| COMPRESS(DESTINATION_ROW_COUNT) || ' TOAL NUMBER OF RECORD(S) IN THE '|| &DIM_TEXT_D ||' TABLE.';
RUN;
%DBLOAD (ACTIVITY_LOG_DETAIL, ACTIVITY_LOG_DETAIL);

%MEND PAGE_DYNAMIC_LOOKUP;
%MACRO PROCESS_INCR_STAGING_DATA(ODS_TABLE, TABLE_NM, STAGING_UIDS, UID, DATA_LOCATION, ACT_UID, answer_UID);
PROC SQL;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
 AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND upcase(DATA_TYPE)='TEXT'
AND data_location = &DATA_LOCATION;
quit;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE TEXT_DATA AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
TRANSLATE(ANSWER_TXT,' ' ,'0D0A'x)	'ANSWER_TXT' as ANSWER_TXT,
 &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID ,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS on
&STAGING_UIDS .&uid=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE = 'TEXT'
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
AND &ODS_TABLE .LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER_LAST.START_DATE) FROM  ACTIVITY_LOG_MASTER_LAST)
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA TEXT_DATA;
set TEXT_DATA;
IF PAGE_CASE_UID=. THEN PAGE_CASE_UID= 1;
RUN;
PROC TRANSPOSE 
	DATA=TEXT_DATA OUT=TEXT_DATA_OUT;
	BY  &UID;
	ID 	RDB_COLUMN_NM;
	VAR	ANSWER_TXT;
RUN;


proc sql;
create table rdb_ui_metadata as 
select distinct NUIM.NBS_QUESTION_UID,NRDBM.RDB_COLUMN_NM, NUIM.CODE_SET_GROUP_ID,  NUIM.unit_value,
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION

AND (upcase(DATA_TYPE)='CODED' or upcase(UNIT_TYPE_CD)='CODED');
quit;

data rdb_ui_metadata;
set rdb_ui_metadata;
if CODE_SET_GROUP_ID=. then data_type='CODED';
if CODE_SET_GROUP_ID=. then CODE_SET_GROUP_ID=unit_value;
run;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE CODED_TABLE AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,   &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID ,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS  on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND upcase(data_type) = 'CODED'
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID
AND &ODS_TABLE .LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER_LAST.START_DATE) FROM  ACTIVITY_LOG_MASTER_LAST);
QUIT;

DATA CODED_TABLE;
SET CODED_TABLE;
	X = INDEX(ANSWER_TXT, '^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANSWER_OTH=SUBSTR(ANSWER_TXT, x+1, LENGTH);
	IF X> 0 THEN ANSWER_TXT=SUBSTR(ANSWER_TXT, 1, (X-1));
	Y=LENGTHN(ANSWER_OTH);
	IF(Y>0) THEN RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM) || '_OTH';
	IF UPCASE (ANSWER_TXT)='OTH' THEN ANSWER_TXT='OTH';
RUN;


PROC SQL;
CREATE TABLE 
	CODED_TABLE_SNM AS  SELECT CODED.CODE_SET_GROUP_ID,&UID, NBS_QUESTION_UID, 
	 &answer_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, 
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT2 'ANSWER_TXT2'
FROM CODED_TABLE CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND CVG.CODE=CODED.ANSWER_OTH where answer_OTH is not null and  answer_txt<>'OTH'
ORDER BY &answer_UID, RDB_COLUMN_NM;
QUIT;
PROC SQL; 
CREATE TABLE  
	CODED_TABLE_NONSNM AS  SELECT CODED.CODE_SET_GROUP_ID,&UID, NBS_QUESTION_UID,  
	 &answer_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, RDB_COLUMN_NM2, 
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1' 
FROM CODED_TABLE CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA 
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID 
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM 
AND CVG.CODE=CODED.ANSWER_TXT where &answer_UID not in (select &answer_UID from CODED_TABLE_SNM) 
ORDER BY &answer_UID, RDB_COLUMN_NM; 
QUIT; 

DATA CODED_TABLE_SNM; 
SET CODED_TABLE_SNM; 
DROP answer_oth; 
ANSWER_TXT=  compress(ANSWER_TXT) ||' '||compress(ANSWER_TXT2);
RUN;
proc sql;
create table rdb_ui_metadata as 
select distinct NUIM.NBS_QUESTION_UID,NRDBM.RDB_COLUMN_NM, NUIM.CODE_SET_GROUP_ID,  NUIM.unit_value,
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE, UNIT_VALUE
FROM
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION
AND ( (upcase(DATA_TYPE)='NUMERIC' and  upcase(mask)='NUM_TEMP')
OR  (upcase(DATA_TYPE)='NUMERIC' and  upcase(mask)='NUM_SN' and unit_type_cd='CODED'))
AND RDB_COLUMN_NM not like '%_CD';
quit;

data rdb_ui_metadata;
set rdb_ui_metadata;
if CODE_SET_GROUP_ID=. then CODE_SET_GROUP_ID=unit_value;
run;

PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE CODED_TABLE_SNTEMP AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,   &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID ,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS  on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND upcase(data_type) = 'CODED'
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA CODED_TABLE_SNTEMP;
SET CODED_TABLE_SNTEMP;
	X = INDEX(ANSWER_TXT, '^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANSWER_TXT_CODE=SUBSTR(ANSWER_TXT, x+1, LENGTH);
	IF X> 0 THEN ANSWER_VALUE=INPUT(SUBSTR(ANSWER_TXT, 1, (X-1)),  comma20.);
	DROP ANSWER_TXT;
RUN;

PROC SQL;
CREATE TABLE 
	CODED_TABLE_SNTEMP_TRANS AS  SELECT CODED.CODE_SET_GROUP_ID, &UID, 
ANSWER_TXT_CODE , ANSWER_VALUE, &answer_UID,  CVG.CODE_SET_NM, RDB_COLUMN_NM,  
	 CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT2 'ANSWER_TXT2'
FROM CODED_TABLE_SNTEMP CODED 	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG ON  CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND CVG.CODE=CODED.ANSWER_TXT_CODE
ORDER BY &answer_UID, RDB_COLUMN_NM;
QUIT;
DATA CODED_TABLE_SNTEMP_TRANS;
SET CODED_TABLE_SNTEMP_TRANS;
ANSWER_TXT=  compress(ANSWER_VALUE) ||' '||compress(ANSWER_TXT2);
DROP CODE_SET_GROUP_ID;
RUN;


DATA CODED_TABLE ; 
  MERGE CODED_TABLE_NONSNM CODED_TABLE_SNM CODED_TABLE_SNTEMP_TRANS; 
  BY &answer_UID RDB_COLUMN_NM; 
RUN;

DATA CODED_TABLE;
SET CODED_TABLE;
IF TRIM(ANSWER_TXT1)='' THEN ANSWER_TXT1=ANSWER_TXT;
RUN;
PROC SORT DATA=CODED_TABLE; BY &UID NBS_QUESTION_UID; RUN;
DATA CODED_TABLE_DESC;
SET CODED_TABLE;
	BY &UID NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	
		END;
		I = 0; ANSWER_DESC11 = ''; 
	END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID THEN OUTPUT;
RUN;

DATA CODED_TABLE_DESC;
SET CODED_TABLE_DESC;
 A=LENGTHN(ANSWER_TXT);
 IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 LENGTH=LENGTHN(ANSWER_DESC11);
 IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
RUN;


PROC SQL;
CREATE TABLE 
	CODED_COUNTY_TABLE AS 
SELECT 
	CODED.CODE_SET_GROUP_ID, &UID, NBS_QUESTION_UID, 
	&answer_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, RDB_COLUMN_NM2,
	CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1'
FROM 
	CODED_TABLE CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  
	METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.V_STATE_COUNTY_CODE_VALUE CVG
ON 	
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND	
	CVG.CODE=CODED.ANSWER_TXT
WHERE METADATA.CODE_SET_NM= 'COUNTY_CCD';
QUIT;
PROC SORT DATA=CODED_COUNTY_TABLE; BY  &UID NBS_QUESTION_UID; RUN;
DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE;
	BY  &UID NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF  FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	END;
		I = 0; ANSWER_DESC11 = ''; 
		END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID  THEN OUTPUT;
RUN;

DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE_DESC;
 	A=LENGTHN(ANSWER_TXT);
 	IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 	LENGTH=LENGTHN(ANSWER_DESC11);
 	IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
RUN;

DATA CODED_TABLE_OTH;
SET CODED_TABLE;
 IF LENGTHN(TRIM(RDB_COLUMN_NM2))>0;
 IF(LENGTHN(RDB_COLUMN_NM2)>0) 
   THEN RDB_COLUMN_NM=RDB_COLUMN_NM2;
IF(LENGTHN(TRIM(RDB_COLUMN_NM2))>0) 
   THEN ANSWER_DESC11=ANSWER_OTH;
RUN;
PROC SORT DATA=CODED_COUNTY_TABLE_DESC; BY &answer_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_DESC; BY &answer_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_OTH; BY &answer_UID RDB_COLUMN_NM; RUN;
DATA CODED_TABLE_MERGED ; 
  MERGE CODED_TABLE_DESC CODED_COUNTY_TABLE_DESC CODED_TABLE_OTH; 
  BY &answer_UID RDB_COLUMN_NM; 
RUN;

PROC SORT DATA=CODED_TABLE_MERGED; BY &UID RDB_COLUMN_NM; RUN;

DATA CODED_TABLE_MERGED; set CODED_TABLE_MERGED;IF  &UID= . THEN  &UID=1;RUN;
PROC TRANSPOSE 
	DATA=CODED_TABLE_MERGED OUT=CODED_DATA_OUT;	BY  &UID;
	ID 	RDB_COLUMN_NM; VAR ANSWER_DESC11;
RUN;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
CODED_TABLE_SNM CODED_TABLE_NONSNM CODED_TABLE CODED_TABLE1 CODED_TABLE2 CODED_TABLE_DESC CODED_TABLE_OTH CODED_TABLE_MERGED
RUN;
QUIT;
proc sql;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID

AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION
AND DATA_TYPE in ('Date/Time','Date', 'DATETIME','DATE');
quit;
PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE DATE_DATA AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,  &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS  on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE IN( 'DATETIME','DATE')  
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
AND &ODS_TABLE .LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER_LAST.START_DATE) FROM  ACTIVITY_LOG_MASTER_LAST)
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;

DATA DATE_DATA;
SET DATE_DATA;
	ANSWER_TXT1=input(ANSWER_TXT,anydtdtm20.);
	informat ANSWER_TXT1 LAST_CHG_TIME  dateTIME22.3 ;
	format ANSWER_TXT1 LAST_CHG_TIME dateTIME22.3;
RUN;

DATA DATE_DATA; 
SET DATE_DATA;  
DROP _LABEL_; 
DROP _NAME_; 
RUN; 
DATA DATE_DATA; set DATE_DATA;IF  &UID= . THEN  &UID=1;RUN;
PROC SQL;
CREATE TABLE DATE_DATA1 AS SELECT * FROM DATE_DATA;
QUIT;
%DBLOAD (PAGE_DATE_TABLE, DATE_DATA1); 


DATA PAGE_DATE_TABLE(sortedby=&UID); SET nbs_rdb.PAGE_DATE_TABLE; RUN; 
PROC SORT tagsort DATA=PAGE_DATE_TABLE; BY &UID RDB_COLUMN_NM; RUN;

PROC SQL;
CREATE TABLE rdbdata.DATA_CONTACT_date AS SELECT * FROM PAGE_DATE_TABLE;
QUIT;
PROC TRANSPOSE DATA=PAGE_DATE_TABLE OUT=DATE_DATA_OUT; 
	BY  &UID; 
	ID 	RDB_COLUMN_NM; 
	VAR	ANSWER_TXT1; 
RUN; 
PROC SQL;
DROP TABLE nbs_rdb.PAGE_DATE_TABLE;
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
PAGE_DATE_TABLE
DATE_DATA
RUN;
QUIT;
proc sql;
create table rdb_ui_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND NRDBM.RDB_TABLE_NM=&TABLE_NM
AND QUESTION_GROUP_SEQ_NBR IS NULL
AND data_location = &DATA_LOCATION
AND DATA_TYPE in ('Numeric', 'NUMERIC');
quit;
PROC SORT DATA=rdb_ui_metadata nodupkey; BY NBS_QUESTION_UID; RUN;
proc sql;
 CREATE TABLE NUMERIC_BASE_DATA AS
 SELECT  &answer_UID, 
rdb_ui_metadata.CODE_SET_GROUP_ID,  RDB_COLUMN_NM,
	ANSWER_TXT,  &ODS_TABLE .&ACT_UID LENGTH =8 AS &UID,
	PA.RECORD_STATUS_CD, rdb_ui_metadata.NBS_QUESTION_UID
 FROM  rdb_ui_metadata  left outer join 
NBS_ODS.&ODS_TABLE PA 
on
rdb_ui_metadata.nbs_question_uid=PA.nbs_question_uid
LEFT OUTER JOIN &STAGING_UIDS on
&STAGING_UIDS .&UID=PA. &ACT_UID
INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
 ON 	upcase(CVG.CODE)=upcase(rdb_ui_metadata.DATA_TYPE)
 WHERE CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE in ('Numeric', 'NUMERIC') 
AND pa.ANSWER_GROUP_SEQ_NBR IS NULL
AND &ODS_TABLE .LAST_CHG_TIME> (SELECT MAX(ACTIVITY_LOG_MASTER_LAST.START_DATE) FROM  ACTIVITY_LOG_MASTER_LAST)
ORDER BY 
	 &ACT_UID,&answer_UID, rdb_ui_metadata.CODE_SET_GROUP_ID;
QUIT;
DATA NUMERIC_DATA1;
SET NUMERIC_BASE_DATA;
	X = INDEX(ANSWER_TXT, '^');
	ANSWER_TXT1=ANSWER_TXT;
	LENGTH=LENGTHN(ANSWER_TXT1);
	IF X> 0 THEN ANSWER_UNIT=SUBSTR(ANSWER_TXT, 1, (X-1));
	IF X> 0 THEN LENCODED=LENGTHN(ANSWER_UNIT);
	IF X> 0 THEN ANSWER_CODED=SUBSTR(ANSWER_TXT, (LENCODED+2), LENGTH);
	IF X> 0 THEN UNIT_VALUE1 = INPUT(ANSWER_UNIT, COMMA20.);
	Y=LENGTHN(ANSWER_CODED);
	IF(Y>0) THEN RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM) || ' UNIT';
RUN;

DATA NUMERIC_DATA2;
SET NUMERIC_DATA1;
IF(LENGTHN(RDB_COLUMN_NM2)>0) THEN RDB_COLUMN_NM=RDB_COLUMN_NM2;
RUN;

PROC SORT DATA=NUMERIC_DATA2; BY &answer_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=NUMERIC_DATA1; BY &answer_UID RDB_COLUMN_NM; RUN;

DATA NUMERIC_DATA_MERGED ; 
  MERGE NUMERIC_DATA1 NUMERIC_DATA2; 
  BY &answer_UID RDB_COLUMN_NM; 
RUN;
PROC SQL;

CREATE TABLE 
	NUMERIC_DATA_TRANS  AS 
SELECT 
	&UID, NBS_QUESTION_UID, 
	 &answer_UID, ANSWER_UNIT,ANSWER_CODED, CVG.CODE_SET_NM,RDB_COLUMN_NM,
	ANSWER_TXT,	CODE,CODE_SHORT_DESC_TXT AS UNIT 'UNIT', ANSWER_UNIT 
FROM 
	NUMERIC_DATA_MERGED CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON 
	METADATA.CODE_SET_GROUP_ID=CODED.UNIT_VALUE1
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
ON 
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
WHERE 
	CVG.CODE=CODED.ANSWER_CODED
	ORDER BY &UID
		;
QUIT;
DATA NUMERIC_DATA_TRANS;
SET NUMERIC_DATA_TRANS;
	X=INDEX(RDB_COLUMN_NM,' UNIT');
	IF TRIM(UNIT)=''  THEN ANSWER_TXT=ANSWER_TXT;
	ELSE IF X>0 THEN ANSWER_TXT=UNIT;
	ELSE ANSWER_TXT=ANSWER_UNIT;
RUN;
PROC SQL;
CREATE TABLE NUMERIC_DATA_TRANS1 AS 
SELECT DISTINCT  &UID,
RDB_COLUMN_NM, 
ANSWER_UNIT,
ANSWER_TXT
FROM NUMERIC_DATA_TRANS;
QUIT;
DATA NUMERIC_DATA_TRANS1; set NUMERIC_DATA_TRANS1;IF  &UID= . THEN  &UID=1;RUN;

PROC TRANSPOSE 
	DATA=NUMERIC_DATA_TRANS1 OUT=NUMERIC_DATA_PIVOT;
	BY  &UID;
	ID 	RDB_COLUMN_NM;
	VAR	ANSWER_TXT;
RUN;

PROC SQL;
CREATE TABLE NUMERIC_DATA_OUT 
	AS SELECT * FROM NUMERIC_DATA_PIVOT 
	WHERE LENGTHN(_LABEL_)>0 AND  &UID>0;
QUIT;
DATA NUMERIC_DATA_OUT;
SET NUMERIC_DATA_OUT;
DROP _LABEL_;
DROP _NAME_;
RUN;

%MEND PROCESS_INCR_STAGING_DATA;


%MACRO ProcessRepeatData(UID_TABLE, ANSWER_TABLE, ANSWER_UID, S_REPEAT, L_REPEAT, D_REPEAT, D_REPEAT_KEY);
PROC SQL;
CREATE TABLE 
	TEXT_METADATA AS
SELECT DISTINCT NUIM.QUESTION_GROUP_SEQ_NBR, NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
	UPCASE(NRDBM.RDB_COLUMN_NM) AS RDB_COLUMN_NM,
	NUIM.QUESTION_GROUP_SEQ_NBR
FROM  
	nbs_ods.NBS_RDB_METADATA NRDBM 
 INNER JOIN 
	nbs_ods.NBS_UI_METADATA NUIM
ON 
	NUIM.NBS_UI_METADATA_UID=NRDBM.NBS_UI_METADATA_UID
	INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
ON 
	CVG.CODE=NUIM.DATA_TYPE 
WHERE 		CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE = 'TEXT' AND QUESTION_GROUP_SEQ_NBR IS NOT NULL
ORDER BY 	NBS_QUESTION_UID;
PROC SQL;
create index NBS_QUESTION_UID on TEXT_METADATA(NBS_QUESTION_UID);
quit;
PROC SQL;
CREATE TABLE 
	TEXT_DATA AS
SELECT DISTINCT  &ANSWER_UID, PA.ANSWER_GROUP_SEQ_NBR,TRANSLATE(ANSWER_TXT,' ' ,'0D0A'x)	'ANSWER_TXT' as ANSWER_TXT,
ACT_UID LENGTH =8 AS PAGE_UID 'PAGE_UID',
	PA.RECORD_STATUS_CD, A.*	
FROM  
	TEXT_METADATA A LEFT OUTER JOIN 
	NBS_ODS.&ANSWER_TABLE PA 
ON 
	A.NBS_QUESTION_UID =PA.NBS_QUESTION_UID 
	WHERE ANSWER_GROUP_SEQ_NBR IS NOT NULL
ORDER BY 	ACT_UID;
QUIT;
PROC SORT DATA=TEXT_DATA NODUPKEY OUT=TEXT_DATA; BY &ANSWER_UID; RUN;
PROC SORT  DATA= TEXT_DATA; BY PAGE_UID ANSWER_GROUP_SEQ_NBR; RUN;
PROC TRANSPOSE 
	DATA=TEXT_DATA OUT=TEXT_DATA_PIVOT;
	BY PAGE_UID ANSWER_GROUP_SEQ_NBR;
	ID 	RDB_COLUMN_NM; 	VAR	ANSWER_TXT;
	COPY &ANSWER_UID;
RUN;
PROC SQL;
CREATE TABLE TEXT_DATA_OUT 
	AS SELECT * FROM TEXT_DATA_PIVOT 
	WHERE LENGTHN(_NAME_)>0 AND PAGE_UID>0;
QUIT;
PROC SQL;
CREATE TABLE 
	CODED_METADATA AS
SELECT DISTINCT NUIM.QUESTION_GROUP_SEQ_NBR, NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
	UPCASE(NRDBM.RDB_COLUMN_NM) AS RDB_COLUMN_NM,
	NUIM.QUESTION_GROUP_SEQ_NBR, NUIM.investigation_form_cd
FROM  
	nbs_ods.NBS_RDB_METADATA NRDBM 
 INNER JOIN 
	nbs_ods.NBS_UI_METADATA NUIM
ON 
	NUIM.NBS_UI_METADATA_UID=NRDBM.NBS_UI_METADATA_UID
	INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
ON 
	CVG.CODE=NUIM.DATA_TYPE 
WHERE 		CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE = 'CODED' AND QUESTION_GROUP_SEQ_NBR IS NOT NULL
ORDER BY 	NUIM.CODE_SET_GROUP_ID;

CREATE TABLE 
	CODED_TABLE AS
SELECT   &ANSWER_UID, PA.ANSWER_GROUP_SEQ_NBR,ANSWER_TXT, ACT_UID LENGTH =8 AS PAGE_UID 'PAGE_UID',
	PA.RECORD_STATUS_CD, A.*	
FROM  
	CODED_METADATA A 
inner JOIN 
	NBS_ODS.&ANSWER_TABLE PA 
ON 
	A.NBS_QUESTION_UID =PA.NBS_QUESTION_UID 
inner join 
&UID_TABLE 
on
	&UID_TABLE .page_uid =PA.act_uid
WHERE ANSWER_GROUP_SEQ_NBR IS NOT NULL
/*AND &UID_TABLE.investigation_form_cd=a.investigation_form_cd*/
ORDER BY 	ACT_UID;

QUIT;
PROC SORT DATA=CODED_TABLE NODUPKEY OUT=CODED_DATA; BY &ANSWER_UID; RUN;
DATA CODED_TABLE;
SET CODED_TABLE;
	X = INDEX(ANSWER_TXT, '^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANSWER_OTH=SUBSTR(ANSWER_TXT, (5), LENGTH);
	IF X> 0 THEN ANSWER_TXT=SUBSTR(ANSWER_TXT, 1, (X-1));
	Y=LENGTHN(ANSWER_OTH);
	IF(Y>0) THEN RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM) || '_OTH';
	IF UPCASE (ANSWER_TXT)='OTH' THEN ANSWER_TXT='OTH';
RUN;
PROC SQL;
CREATE TABLE 
	CODED_TABLE AS 
SELECT 
	ANSWER_GROUP_SEQ_NBR, CODED.CODE_SET_GROUP_ID, PAGE_UID, NBS_QUESTION_UID, 
	&ANSWER_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, RDB_COLUMN_NM2,
	CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1'
FROM 
	CODED_TABLE CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  
	METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
ON 	
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND	
	CVG.CODE=CODED.ANSWER_TXT;
QUIT;
PROC SORT DATA=CODED_TABLE; BY PAGE_UID ANSWER_GROUP_SEQ_NBR NBS_QUESTION_UID; RUN;

DATA CODED_TABLE_DESC;
SET CODED_TABLE;
	BY PAGE_UID ANSWER_GROUP_SEQ_NBR NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF  FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	END;
		I = 0; ANSWER_DESC11 = ''; 
		END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID  THEN OUTPUT;
RUN;

DATA CODED_TABLE_DESC;
SET CODED_TABLE_DESC;
 	A=LENGTHN(ANSWER_TXT);
 	IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 	LENGTH=LENGTHN(ANSWER_DESC11);
 	IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
RUN;
PROC SQL;
CREATE TABLE 
	CODED_COUNTY_TABLE AS 
SELECT 
	ANSWER_GROUP_SEQ_NBR, CODED.CODE_SET_GROUP_ID, PAGE_UID, NBS_QUESTION_UID, 
	&ANSWER_UID, ANSWER_TXT, CVG.CODE_SET_NM, RDB_COLUMN_NM, ANSWER_OTH, RDB_COLUMN_NM2,
	CVG.CODE,CODE_SHORT_DESC_TXT AS ANSWER_TXT1 'ANSWER_TXT1'
FROM 
	CODED_TABLE CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON  
	METADATA.CODE_SET_GROUP_ID=CODED.CODE_SET_GROUP_ID
	LEFT JOIN NBS_SRT.V_STATE_COUNTY_CODE_VALUE CVG
ON 	
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
AND	
	CVG.CODE=CODED.ANSWER_TXT
WHERE METADATA.CODE_SET_NM= 'COUNTY_CCD';
QUIT;
PROC SORT DATA=CODED_COUNTY_TABLE; BY PAGE_UID ANSWER_GROUP_SEQ_NBR NBS_QUESTION_UID; RUN;
DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE;
	BY PAGE_UID ANSWER_GROUP_SEQ_NBR NBS_QUESTION_UID;
	FORMAT ANSWER_DESC1-ANSWER_DESC10 $40. ANSWER_DESC11 $4000.;
	ARRAY ANSWER_DESC(10) ANSWER_DESC1-ANSWER_DESC10;
	RETAIN ANSWER_DESC1-ANSWER_DESC11 ' ' I 0;
	IF  FIRST.NBS_QUESTION_UID THEN DO;
		DO J=1 TO 10; ANSWER_DESC(J) = ' ';	END;
		I = 0; ANSWER_DESC11 = ''; 
		END;
	I+1;
	IF I <= 10 THEN DO;
		ANSWER_DESC(I) = ANSWER_TXT1;
		ANSWER_DESC11 =LEFT(TRIM(ANSWER_TXT1))||' | '|| LEFT(TRIM(ANSWER_DESC11)) ;
	END;
	IF LAST.NBS_QUESTION_UID  THEN OUTPUT;
RUN;

DATA CODED_COUNTY_TABLE_DESC;
SET CODED_COUNTY_TABLE_DESC;
 	A=LENGTHN(ANSWER_TXT);
 	IF TRIM(ANSWER_DESC11)=' |' THEN ANSWER_DESC11='';
 	LENGTH=LENGTHN(ANSWER_DESC11);
 	IF LENGTH> 0 THEN ANSWER_DESC11=TRIM(SUBSTR(ANSWER_DESC11, 1, (LENGTH-1)));
RUN;
DATA CODED_TABLE_OTH;
SET CODED_TABLE;
	IF LENGTHN(TRIM(RDB_COLUMN_NM2))>0;
 	IF(LENGTHN(RDB_COLUMN_NM2)>0) 
   		THEN RDB_COLUMN_NM=RDB_COLUMN_NM2;
	IF(LENGTHN(TRIM(RDB_COLUMN_NM2))>0) 
   		THEN ANSWER_DESC11=ANSWER_OTH;
RUN;
PROC SORT DATA=CODED_COUNTY_TABLE_DESC; BY &ANSWER_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_DESC; BY &ANSWER_UID RDB_COLUMN_NM; RUN;
PROC SORT DATA=CODED_TABLE_OTH NODUPKEY; BY &ANSWER_UID RDB_COLUMN_NM; RUN;

DATA CODED_TABLE_MERGED ; 
  MERGE CODED_TABLE_DESC CODED_COUNTY_TABLE_DESC CODED_TABLE_OTH; 
  BY &ANSWER_UID RDB_COLUMN_NM; 
RUN;
PROC SORT  DATA= CODED_TABLE_MERGED; BY PAGE_UID ANSWER_GROUP_SEQ_NBR NBS_QUESTION_UID RDB_COLUMN_NM; RUN;
PROC TRANSPOSE 
	DATA=CODED_TABLE_MERGED OUT=CODED_DATA_PIVOT;	BY PAGE_UID ANSWER_GROUP_SEQ_NBR;
	ID 	RDB_COLUMN_NM; VAR ANSWER_DESC11;
	COPY &ANSWER_UID;
RUN;
PROC SQL;
CREATE TABLE CODED_DATA_OUT 
	AS SELECT * FROM CODED_DATA_PIVOT 
	WHERE LENGTHN(_NAME_)>0 AND PAGE_UID>0;
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE CODED_TABLE CODED_TABLE1 CODED_TABLE2 CODED_TABLE_DESC CODED_TABLE_OTH CODED_TABLE_MERGED TEXT_DATA_PIVOT
RUN;
QUIT;
PROC SQL;
CREATE TABLE 
	DATE_METADATA AS
SELECT DISTINCT NUIM.QUESTION_GROUP_SEQ_NBR, NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
	UPCASE(NRDBM.RDB_COLUMN_NM) AS RDB_COLUMN_NM,
	NUIM.QUESTION_GROUP_SEQ_NBR
FROM  
	nbs_ods.NBS_RDB_METADATA NRDBM 
 INNER JOIN 
	nbs_ods.NBS_UI_METADATA NUIM
ON 
	NUIM.NBS_UI_METADATA_UID=NRDBM.NBS_UI_METADATA_UID
	INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
ON 
	CVG.CODE=NUIM.DATA_TYPE 
WHERE 		CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE IN( 'DATETIME','DATE') AND QUESTION_GROUP_SEQ_NBR IS NOT NULL
ORDER BY 	NBS_QUESTION_UID;
QUIT;
PROC SQL;
create index NBS_QUESTION_UID on DATE_METADATA(NBS_QUESTION_UID);
quit;
PROC SQL;
CREATE TABLE 
	DATE_DATA AS
SELECT DISTINCT  &ANSWER_UID, PA.ANSWER_GROUP_SEQ_NBR,ANSWER_TXT, ACT_UID LENGTH =8 AS PAGE_UID 'PAGE_UID',
	PA.RECORD_STATUS_CD, A.*	
FROM  
	DATE_METADATA A LEFT OUTER JOIN 
	NBS_ODS.&ANSWER_TABLE PA 
ON 
	A.NBS_QUESTION_UID =PA.NBS_QUESTION_UID 
	WHERE ANSWER_GROUP_SEQ_NBR IS NOT NULL
ORDER BY 	ACT_UID;
QUIT;
PROC SORT DATA=DATE_DATA NODUPKEY OUT=DATE_DATA; BY &ANSWER_UID; RUN;

DATA DATE_DATA;
SET DATE_DATA;
	ANSWER_TXT1=input(ANSWER_TXT,anydtdtm20.);
	informat ANSWER_TXT1 LAST_CHG_TIME  dateTIME22.3 ;
	format ANSWER_TXT1 LAST_CHG_TIME dateTIME22.3;
RUN;

DATA DATE_DATA; 
SET DATE_DATA;  
DROP _LABEL_; 
DROP _NAME_; 
RUN; 
PROC SQL;
CREATE TABLE DATE_DATA1 AS SELECT * FROM DATE_DATA;
QUIT;
%DBLOAD (PAGE_DATE_TABLE, DATE_DATA1); 
DATA PAGE_DATE_TABLE; SET nbs_rdb.PAGE_DATE_TABLE; RUN; 
PROC SORT  DATA= PAGE_DATE_TABLE; BY PAGE_UID ANSWER_GROUP_SEQ_NBR; RUN;
PROC TRANSPOSE DATA=PAGE_DATE_TABLE OUT=DATE_DATA_PIVOT; 
	BY PAGE_UID ANSWER_GROUP_SEQ_NBR; 
	ID 	RDB_COLUMN_NM; 
	VAR	ANSWER_TXT1; 
	COPY &ANSWER_UID;
RUN; 
PROC SQL;
CREATE TABLE DATE_DATA_OUT 
	AS SELECT * FROM DATE_DATA_PIVOT 
	WHERE LENGTHN(_NAME_)>0 AND PAGE_UID>0;
QUIT;
PROC SQL;
DROP TABLE nbs_rdb.PAGE_DATE_TABLE;
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
PAGE_DATE_TABLE DATE_DATA1
DATE_DATA
RUN;
QUIT;
PROC SQL;
CREATE TABLE 
	NUMERIC_METADATA AS
SELECT DISTINCT NUIM.QUESTION_GROUP_SEQ_NBR, NUIM.NBS_QUESTION_UID, NUIM.UNIT_VALUE as CODE_SET_GROUP_ID 'CODE_SET_GROUP_ID',  
	UPCASE(NRDBM.RDB_COLUMN_NM) AS RDB_COLUMN_NM,
	NUIM.QUESTION_GROUP_SEQ_NBR
FROM  
	nbs_ods.NBS_RDB_METADATA NRDBM 
 INNER JOIN 
	nbs_ods.NBS_UI_METADATA NUIM
ON 
	NUIM.NBS_UI_METADATA_UID=NRDBM.NBS_UI_METADATA_UID
	INNER JOIN NBS_SRT.CODE_VALUE_GENERAL CVG 
ON 
	CVG.CODE=NUIM.DATA_TYPE 
WHERE 		CVG.CODE_SET_NM = 'NBS_DATA_TYPE' AND CODE = 'NUMERIC' AND QUESTION_GROUP_SEQ_NBR IS NOT NULL
ORDER BY 	NUIM.CODE_SET_GROUP_ID;

QUIT;
PROC SQL;
create index NBS_QUESTION_UID on NUMERIC_METADATA(NBS_QUESTION_UID);
QUIT;
PROC SQL;
CREATE TABLE 
	NUMERIC_BASE_DATA AS
SELECT DISTINCT  &ANSWER_UID, PA.ANSWER_GROUP_SEQ_NBR,ANSWER_TXT, ACT_UID LENGTH =8 AS PAGE_UID 'PAGE_UID',
	PA.RECORD_STATUS_CD, A.*	
FROM  
	NUMERIC_METADATA A LEFT OUTER JOIN 
	NBS_ODS.&ANSWER_TABLE PA 
ON 
	A.NBS_QUESTION_UID =PA.NBS_QUESTION_UID 
	WHERE ANSWER_GROUP_SEQ_NBR IS NOT NULL
ORDER BY 	ACT_UID;
QUIT;
PROC SORT DATA=NUMERIC_BASE_DATA NODUPKEY OUT=NUMERIC_BASE_DATA; BY &ANSWER_UID; RUN;
DATA NUMERIC_DATA1;
SET NUMERIC_BASE_DATA;
	X = INDEX(ANSWER_TXT, '^');
	ANSWER_TXT1=ANSWER_TXT;
	LENGTH=LENGTHN(ANSWER_TXT1);
	IF X> 0 THEN ANSWER_UNIT=SUBSTR(ANSWER_TXT, 1, (X-1));
	IF X= 0 THEN ANSWER_UNIT=ANSWER_TXT;
	IF X> 0 THEN LENCODED=LENGTHN(ANSWER_UNIT);
	IF X> 0 THEN ANSWER_CODED=SUBSTR(ANSWER_TXT, (LENCODED+2), LENGTH);
	IF X> 0 THEN UNIT_VALUE1 = INPUT(CODE_SET_GROUP_ID, COMMA20.);
	Y=LENGTHN(ANSWER_CODED);
	IF(Y>0) THEN RDB_COLUMN_NM2= TRIM(RDB_COLUMN_NM) || ' UNIT';
RUN;
DATA NUMERIC_DATA2;
SET NUMERIC_DATA1;
	IF(LENGTHN(RDB_COLUMN_NM2)>0) THEN RDB_COLUMN_NM=RDB_COLUMN_NM2;
RUN;
PROC SORT DATA=NUMERIC_DATA2; BY &ANSWER_UID RDB_COLUMN_NM; RUN;
 PROC SORT DATA=NUMERIC_DATA1; BY &ANSWER_UID RDB_COLUMN_NM; RUN;
DATA NUMERIC_DATA_MERGED ; 
  MERGE NUMERIC_DATA1 NUMERIC_DATA2; 
  BY &ANSWER_UID RDB_COLUMN_NM; 
RUN;
PROC SQL;
CREATE TABLE 
	NUMERIC_DATA_TRANS  AS 
SELECT 
	PAGE_UID, NBS_QUESTION_UID,  ANSWER_GROUP_SEQ_NBR,
	 &ANSWER_UID, ANSWER_UNIT,ANSWER_CODED, CVG.CODE_SET_NM,RDB_COLUMN_NM,
	ANSWER_TXT,	CODE,CODE_SHORT_DESC_TXT AS UNIT 'UNIT', ANSWER_UNIT 
FROM 
	NUMERIC_DATA_MERGED CODED
	LEFT JOIN NBS_SRT.CODESET_GROUP_METADATA METADATA
ON 
	METADATA.CODE_SET_GROUP_ID=CODED.UNIT_VALUE1
	LEFT JOIN NBS_SRT.CODE_VALUE_GENERAL CVG
ON 
	CVG.CODE_SET_NM=METADATA.CODE_SET_NM
WHERE 
	CVG.CODE=CODED.ANSWER_CODED
	ORDER BY PAGE_UID;
QUIT;
DATA NUMERIC_DATA_TRANS;
SET NUMERIC_DATA_TRANS;
	X=INDEX(RDB_COLUMN_NM,' UNIT');
	IF TRIM(UNIT)=''  THEN ANSWER_TXT=ANSWER_TXT;
	ELSE IF X>0 THEN ANSWER_TXT=UNIT;
	ELSE ANSWER_TXT=ANSWER_UNIT;
RUN;
PROC SQL;
CREATE TABLE NUMERIC_DATA_TRANS1 AS 
SELECT DISTINCT 
	PAGE_UID,
	RDB_COLUMN_NM,
	ANSWER_UNIT,
	ANSWER_TXT,
	ANSWER_GROUP_SEQ_NBR,
	&ANSWER_UID
FROM NUMERIC_DATA_TRANS;
QUIT;
PROC SORT  DATA= NUMERIC_DATA_TRANS1; BY PAGE_UID ANSWER_GROUP_SEQ_NBR; RUN;
PROC TRANSPOSE 
	DATA=NUMERIC_DATA_TRANS1 OUT=NUMERIC_DATA_PIVOT;
	BY PAGE_UID  ANSWER_GROUP_SEQ_NBR;
	ID 	RDB_COLUMN_NM;
	VAR	ANSWER_TXT;
	COPY &ANSWER_UID;
RUN;
PROC SQL;
CREATE TABLE NUMERIC_DATA_OUT 
	AS SELECT * FROM NUMERIC_DATA_PIVOT 
WHERE LENGTHN(_LABEL_)>0 AND PAGE_UID>0;
QUIT;
DATA NUMERIC_DATA_OUT;
SET NUMERIC_DATA_OUT;
DROP _LABEL_;
DROP _NAME_;
RUN;
proc sql;
create table Stageing_key_metadata as 
select distinct NRDBM.RDB_COLUMN_NM,NUIM.NBS_QUESTION_UID, NUIM.CODE_SET_GROUP_ID,  
NUIM.INVESTIGATION_FORM_CD,data_type,
CODE_SET_GROUP_ID,QUESTION_GROUP_SEQ_NBR,DATA_TYPE
from
nbs_ods.NBS_RDB_METADATA NRDBM,
nbs_ods.NBS_UI_METADATA NUIM
where NRDBM.NBS_UI_METADATA_UID=NUIM.NBS_UI_METADATA_UID
AND QUESTION_GROUP_SEQ_NBR IS not NULL;

create table STAGING_KEY AS select
	ACT_UID LENGTH =8 AS PAGE_UID 'PAGE_UID',&ANSWER_UID, &UID_TABLE .LAST_CHG_TIME
FROM  Stageing_key_metadata NUIM
	INNER JOIN
	NBS_ODS.&ANSWER_TABLE PA 
ON	NUIM.NBS_QUESTION_UID =PA.NBS_QUESTION_UID
	INNER JOIN 
	&UID_TABLE 
ON	&UID_TABLE .PAGE_UID=PA.ACT_UID
WHERE 
ANSWER_GROUP_SEQ_NBR IS not NULL
ORDER BY 
	ACT_UID,&ANSWER_UID, NUIM.CODE_SET_GROUP_ID;
quit;
PROC SORT DATA=STAGING_KEY NODUPKEY; BY PAGE_UID; RUN;
PROC SQL;
DROP TABLE nbs_rdb.&S_REPEAT;
QUIT;
PROC SORT DATA=NUMERIC_DATA_OUT; BY PAGE_UID ANSWER_GROUP_SEQ_NBR; RUN;
PROC SORT DATA=DATE_DATA_OUT; BY PAGE_UID ANSWER_GROUP_SEQ_NBR; RUN;
PROC SORT DATA=CODED_DATA_OUT; BY PAGE_UID ANSWER_GROUP_SEQ_NBR; RUN;
PROC SORT DATA=TEXT_DATA_OUT; BY PAGE_UID ANSWER_GROUP_SEQ_NBR; RUN;
DATA &S_REPEAT; 
MERGE 
	NUMERIC_DATA_OUT
	DATE_DATA_OUT
	CODED_DATA_OUT
	TEXT_DATA_OUT;
BY PAGE_UID ANSWER_GROUP_SEQ_NBR;
RUN;
PROC SQL;
DROP TABLE nbs_rdb.&S_REPEAT;
QUIT;
DATA &S_REPEAT;
	SET &S_REPEAT(DROP=_NAME_ _LABEL_ );
RUN;
PROC SQL;
CREATE TABLE 
	nbs_rdb.&S_REPEAT AS 
SELECT * FROM &S_REPEAT;
QUIT;
PROC SQL;
DROP TABLE nbs_rdb.&L_REPEAT;
CREATE TABLE &L_REPEAT AS SELECT DISTINCT PAGE_UID FROM &S_REPEAT;
QUIT;
%ASSIGN_KEY (&L_REPEAT, &D_REPEAT_KEY);

%DBLOAD (&L_REPEAT, &L_REPEAT);
PROC SQL;
CREATE TABLE &D_REPEAT AS
SELECT A.*, B.&D_REPEAT_KEY FROM &L_REPEAT B LEFT OUTER JOIN &S_REPEAT A
ON A.PAGE_UID=B.PAGE_UID;
QUIT;
DATA &D_REPEAT;
	SET &D_REPEAT(DROP=&ANSWER_UID);
RUN;
PROC SQL;
DROP TABLE nbs_rdb.&D_REPEAT;
QUIT;
PROC SQL;
CREATE TABLE 
	nbs_rdb.&D_REPEAT AS 
SELECT 
	* 
FROM 
	&D_REPEAT;
QUIT;
PROC DATASETS LIBRARY = WORK NOLIST;
DELETE 
	&S_REPEAT
	NUMERIC_BASE_METADATA
	DATE_DATA_PIVOT
	CODED_DATA_PIVOT
	CODED_DATA
	TEXT_DATA TEXT_DATA_OUT
	CODED_DATA_OUT CODED_TABLE 
	DATE_DATA DATE_DATA_OUT 
	TEXT_METADATA NUMERIC_METADATA 
	CODED_METADATA DATE_METADATA
	NUMERIC_BASE_DATA NUMERIC_DATA1 
	NUMERIC_DATA2 NUMERIC_DATA_MERGED 
	NUMERIC_DATA_OUT NUMERIC_DATA_PIVOT 
	NUMERIC_DATA_TRANS NUMERIC_DATA_TRANS1
	STAGING_KEY &D_REPEAT INVESTIGATION_REPEAT_INIT RUN;
QUIT;
%MEND ProcessRepeatData;

/*
%macro deleteCMG;
	PROC SQL ;
		SELECT INVESTIGATION_KEY into :s1 separated by ',' FROM INVESTIGATION_E_KEYHOLDER;
		DELETE FROM nbs_rdb.CONFIRMATION_METHOD_GROUP WHERE INVESTIGATION_KEY IN (&s1);
	QUIT;
%mend deleteCMG;

%macro deleteCM;
	PROC SQL ;
		SELECT INVESTIGATION_KEY into :s1 separated by ',' FROM INVESTIGATION_E_KEYHOLDER;
		DELETE FROM nbs_rdb.L_CONFIRMATION_METHOD WHERE INVESTIGATION_KEY IN (&s1);
	QUIT;
%mend deleteCM;
*/