%msglib; 
%macro dbload (DBtable, DSname);
 Proc Append Force base=NBS_MSG.&DBtable data=&DSname;
 Run;
 Quit; 
%mend dbload;
PROC DATASETS LIB=WORK MEMTYPE=DATA
		KILL;
RUN; 
QUIT;
%MACRO AUTHDATA(IN_SOURCE, OUT_SOURCE, AUTHOR_ID);
PROC SQL;
CREATE TABLE  &OUT_SOURCE AS SELECT A.*, 
B.FIRST_NM AS CHG_USER_FIRST_NAME 'CHG_USER_FIRST_NAME', B.LAST_NM AS CHG_USER_LAST_NAME 'CHG_USER_LAST_NAME' 
FROM
&IN_SOURCE A 
LEFT OUTER JOIN NBS_ODS.USER_PROFILE B
ON A.LAST_CHG_USER_ID=B.NEDSS_ENTRY_ID;
QUIT; 
DATA &OUT_SOURCE;
SET &OUT_SOURCE;
LENGTH &AUTHOR_ID $50;
&AUTHOR_ID= TRIM(CHG_USER_LAST_NAME)|| ', ' ||TRIM(CHG_USER_FIRST_NAME);
IF LENGTH(COMPRESS(CHG_USER_FIRST_NAME))> 0 AND LENGTHN(COMPRESS(CHG_USER_LAST_NAME))>0 THEN &AUTHOR_ID= TRIM(CHG_USER_LAST_NAME)|| ', ' ||TRIM(CHG_USER_FIRST_NAME);
ELSE IF LENGTHN(COMPRESS(CHG_USER_FIRST_NAME))> 0 THEN &AUTHOR_ID= TRIM(CHG_USER_FIRST_NAME);
ELSE IF LENGTHN(COMPRESS(CHG_USER_LAST_NAME))> 0 THEN &AUTHOR_ID= TRIM(CHG_USER_LAST_NAME);
DROP CHG_USER_FIRST_NAME CHG_USER_LAST_NAME LAST_CHG_USER_ID;
RUN;
%MEND AUTHDATA;
%MACRO ADDCODINGSYSTEM(IN_DATA, OUT_DATA);
DATA &IN_DATA;
SET &IN_DATA;
	X = INDEX(ANSWER_TXT, 'OTH^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANS_DISPLAY_TXT_OTH=ANSWER_TXT;
	IF X> 0 THEN ANSWER_TXT='OTH';
RUN; 
PROC SQL;
CREATE TABLE &OUT_DATA AS
SELECT DISTINCT  
C.ANS_FROM_CODE_SYSTEM_CD AS ANS_CODE_SYSTEM_CD  'ANS_CODE_SYSTEM_CD', 
C.ANS_FROM_CODE_SYSTEM_DESC_TXT AS ANS_CODE_SYSTEM_DESC_TXT 'ANS_CODE_SYSTEM_DESC_TXT',  
C.ANS_FROM_DISPLAY_NM AS ANS_DISPLAY_TXT 'ANS_DISPLAY_TXT',
D.QUES_CODE_SYSTEM_CD  , 
D.QUES_CODE_SYSTEM_DESC_TXT  ,  
D.QUESTION_DISPLAY_NAME AS QUES_DISPLAY_TXT 'QUES_DISPLAY_TXT', A.*
FROM
&IN_DATA A 
INNER JOIN NBS_MSG.MSG_QUESTION_LOOKUP D ON
A.QUESTION_IDENTIFIER = D.QUESTION_IDENTIFIER 
LEFT OUTER  JOIN NBS_MSG.MSG_ANSWER_LOOKUP C ON 
UPCASE(A.ANSWER_TXT) = UPCASE(C.ANS_FROM_CODE)
AND  C.QUES_CODE_SYSTEM_CD = D.QUES_CODE_SYSTEM_CD 
WHERE A.ANSWER_TXT  NOT LIKE '%   .%' AND A.ANSWER_TXT~='.'
AND D.DATA_TYPE ='CODED_COUNTY' 
and C.investigation_form_cd='GENERIC'
UNION 
SELECT  
DISTINCT  
C.ANS_FROM_CODE_SYSTEM_CD AS ANS_CODE_SYSTEM_CD  'ANS_CODE_SYSTEM_CD', 
C.ANS_FROM_CODE_SYSTEM_DESC_TXT AS ANS_CODE_SYSTEM_DESC_TXT 'ANS_CODE_SYSTEM_DESC_TXT',  
C.ANS_FROM_DISPLAY_NM AS ANS_DISPLAY_TXT 'ANS_DISPLAY_TXT',
E.QUES_CODE_SYSTEM_CD AS QUES_CODE_SYSTEM_CD  'QUES_CODE_SYSTEM_CD', 
E.QUES_CODE_SYSTEM_DESC_TXT AS QUES_CODE_SYSTEM_DESC_TXT  'QUES_CODE_SYSTEM_DESC_TXT',  
E.QUESTION_DISPLAY_NAME AS QUES_DISPLAY_TXT  'QUES_DISPLAY_TXT', A.*
FROM
&IN_DATA A 
INNER JOIN NBS_ODS.NBS_UI_METADATA D ON
A.QUESTION_IDENTIFIER = D.QUESTION_IDENTIFIER 
AND A.INVESTIGATION_FORM_CD=D.INVESTIGATION_FORM_CD
AND D.QUESTION_OID IS NOT NULL
INNER JOIN NBS_MSG.MSG_QUESTION_LOOKUP E ON
E.QUESTION_IDENTIFIER = D.QUESTION_IDENTIFIER
AND D.QUESTION_OID = E.QUES_CODE_SYSTEM_CD
LEFT OUTER  JOIN NBS_MSG.MSG_ANSWER_LOOKUP C ON 
A.QUESTION_IDENTIFIER = C.QUESTION_IDENTIFIER
AND UPCASE(A.ANSWER_TXT) = UPCASE(C.ANS_FROM_CODE)
AND  C.QUES_CODE_SYSTEM_CD = D.QUESTION_OID 
WHERE A.ANSWER_TXT  NOT LIKE '%   .%' AND A.ANSWER_TXT~='.'
AND (D.code_set_group_id not EQ 560  OR
D.code_set_group_id is null);
QUIT;

RUN; 
PROC SORT DATA=&OUT_DATA NODUPKEY; BY MSG_CONTAINER_UID MSG_EVENT_ID ANSWER_TXT QUESTION_IDENTIFIER QUES_CODE_SYSTEM_CD SEQ_NBR ANSWER_GROUP_SEQ_NBR QUESTION_GROUP_SEQ_NBR ; RUN;
DATA &OUT_DATA;
SET &OUT_DATA;
	X = INDEX(ANS_DISPLAY_TXT_OTH, 'OTH^');
	LENGTH=LENGTHN(ANS_DISPLAY_TXT_OTH);
	IF X > 0 THEN ANS_DISPLAY_TXT= CATS(ANS_DISPLAY_TXT,SUBSTRN(ANS_DISPLAY_TXT_OTH,4,LENGTH(ANS_DISPLAY_TXT_OTH)));
	DROP ANS_DISPLAY_TXT_OTH;
RUN; 
%MEND ADDCODINGSYSTEM;

%MACRO ADDNONCASECODINGSYSTEM(IN_DATA, OUT_DATA);
DATA &IN_DATA;
SET &IN_DATA;
	X = INDEX(ANSWER_TXT, 'OTH^');
	LENGTH=LENGTHN(ANSWER_TXT);
	IF X> 0 THEN ANS_DISPLAY_TXT_OTH=ANSWER_TXT;
	IF X> 0 THEN ANSWER_TXT='OTH';
RUN; 
PROC SQL;
CREATE TABLE &OUT_DATA AS
SELECT DISTINCT  
C.ANS_FROM_CODE_SYSTEM_CD AS ANS_CODE_SYSTEM_CD  'ANS_CODE_SYSTEM_CD', 
C.ANS_FROM_CODE_SYSTEM_DESC_TXT AS ANS_CODE_SYSTEM_DESC_TXT 'ANS_CODE_SYSTEM_DESC_TXT',  
C.ANS_FROM_DISPLAY_NM AS ANS_DISPLAY_TXT 'ANS_DISPLAY_TXT',
D.QUES_CODE_SYSTEM_CD  , 
D.QUES_CODE_SYSTEM_DESC_TXT  ,  
D.QUESTION_DISPLAY_NAME AS QUES_DISPLAY_TXT 'QUES_DISPLAY_TXT', A.*
FROM
&IN_DATA A 
INNER JOIN NBS_MSG.MSG_QUESTION_LOOKUP D ON
A.QUESTION_IDENTIFIER = D.QUESTION_IDENTIFIER 
LEFT OUTER  JOIN NBS_MSG.MSG_ANSWER_LOOKUP C ON 
UPCASE(A.ANSWER_TXT) = UPCASE(C.ANS_FROM_CODE)
AND  C.QUES_CODE_SYSTEM_CD = D.QUES_CODE_SYSTEM_CD 
WHERE A.ANSWER_TXT  NOT LIKE '%   .%' AND A.ANSWER_TXT~='.'
AND D.DATA_TYPE ='CODED_COUNTY' 
and C.investigation_form_cd='GENERIC'
UNION 
SELECT  
DISTINCT  
C.ANS_FROM_CODE_SYSTEM_CD AS ANS_CODE_SYSTEM_CD  'ANS_CODE_SYSTEM_CD', 
C.ANS_FROM_CODE_SYSTEM_DESC_TXT AS ANS_CODE_SYSTEM_DESC_TXT 'ANS_CODE_SYSTEM_DESC_TXT',  
C.ANS_FROM_DISPLAY_NM AS ANS_DISPLAY_TXT 'ANS_DISPLAY_TXT',
E.QUES_CODE_SYSTEM_CD AS QUES_CODE_SYSTEM_CD  'QUES_CODE_SYSTEM_CD', 
E.QUES_CODE_SYSTEM_DESC_TXT AS QUES_CODE_SYSTEM_DESC_TXT  'QUES_CODE_SYSTEM_DESC_TXT',  
E.QUESTION_DISPLAY_NAME AS QUES_DISPLAY_TXT  'QUES_DISPLAY_TXT', A.*

FROM
&IN_DATA A 
INNER JOIN NBS_ODS.NBS_UI_METADATA D ON
A.QUESTION_IDENTIFIER = D.QUESTION_IDENTIFIER 
AND D.QUESTION_OID IS NOT NULL
INNER JOIN NBS_MSG.MSG_QUESTION_LOOKUP E ON
E.QUESTION_IDENTIFIER = D.QUESTION_IDENTIFIER
AND D.QUESTION_OID = E.QUES_CODE_SYSTEM_CD
LEFT OUTER  JOIN NBS_MSG.MSG_ANSWER_LOOKUP C ON 
A.QUESTION_IDENTIFIER = C.QUESTION_IDENTIFIER
AND UPCASE(A.ANSWER_TXT) = UPCASE(C.ANS_FROM_CODE)
AND  C.QUES_CODE_SYSTEM_CD = D.QUESTION_OID 
WHERE A.ANSWER_TXT  NOT LIKE '%   .%' AND A.ANSWER_TXT~='.'
AND (D.code_set_group_id not EQ 560  OR
D.code_set_group_id is null);
QUIT;
RUN; 

PROC SORT DATA=&OUT_DATA NODUPKEY; BY MSG_CONTAINER_UID MSG_EVENT_ID ANSWER_TXT QUESTION_IDENTIFIER QUES_CODE_SYSTEM_CD SEQ_NBR ANSWER_GROUP_SEQ_NBR QUESTION_GROUP_SEQ_NBR ; RUN;
DATA &OUT_DATA;
SET &OUT_DATA;
	X = INDEX(ANS_DISPLAY_TXT_OTH, 'OTH^');
	LENGTH=LENGTHN(ANS_DISPLAY_TXT_OTH);
	IF X > 0 THEN ANS_DISPLAY_TXT= CATS(ANS_DISPLAY_TXT,SUBSTRN(ANS_DISPLAY_TXT_OTH,4,LENGTH(ANS_DISPLAY_TXT_OTH)));
	DROP ANS_DISPLAY_TXT_OTH;
RUN; 
%MEND ADDNONCASECODINGSYSTEM;
%MACRO ASSIGN_UID (DS, UID);
 DATA &DS;
  retain &UID 1;
/*  IF &UID=1 THEN OUTPUT;*/
  SET &DS;
	&UID+1;
	OUTPUT;
 RUN;
%MEND ASSIGN_UID;

PROC SQL;
CREATE TABLE MSG_CONTAINER as select 
Notification.Notification_uid,
Notification.Local_id as MSG_LOCAL_ID 'MSG_LOCAL_ID',
Notification.RECORD_STATUS_CD as RECORD_STATUS_CD 'RECORD_STATUS_CD',
Notification.RECORD_STATUS_TIME as RECORD_STATUS_TIME 'RECORD_STATUS_TIME',
Notification.VERSION_CTRL_NBR as VERSION_CTRL_NBR 'VERSION_CTRL_NBR',
/**TODO CHANGE TO phc VERSION CONTROL NUMBER*/
Notification.last_chg_time, EXPORT_RECEIVING_FACILITY.RECEIVING_SYSTEM_SHORT_NM as RECEIVING_SYSTEM 'RECEIVING_SYSTEM',
NOTIFICATION.CD AS NOTIFICATION_CD, NOTIFICATION_UID
FROM NBS_ODS.NOTIFICATION
INNER JOIN NBS_ODS.EXPORT_RECEIVING_FACILITY ON
NOTIFICATION.EXPORT_RECEIVING_FACILITY_UID= EXPORT_RECEIVING_FACILITY.EXPORT_RECEIVING_FACILITY_UID
WHERE NOTIFICATION.CD IN ('EXP_NOTF_PHDC', 'SHARE_NOTF_PHDC') 
AND NOTIFICATION.RECORD_STATUS_CD <> 'COMPLETED';

QUIT;

DATA MSG_CONTAINER;
SET MSG_CONTAINER;
LENGTH   NBS_INTERFACE_UID MAX_MSG_CONTAINER_UID MAX_MSG_CONTAINER_UID_IN_HIST 8;
LENGTH ADD_REASON_CD AUTHOR_ID CD CUSTODIAN_ID DOCUMENT_ID SENDING_SYSTEM_CD DOC_TYPE_CD DOC_TYPE_VERSION_TXT $250;
	ADD_REASON_CD = 'PHC1463';
	/*todo ADD SHARE /TEANSFER*/
	EFFECTIVE_TIME=LAST_CHG_TIME;
	EFFECTIVE_DATETIME=PUT((LAST_CHG_TIME),DATETIME22.3);
	CD ='55751-2';
	DATA_MIGRATION_STATUS = -1;
	ONGOING_CASE = 'YES';
	SENDING_SYSTEM_CD='NBS';
	DOC_TYPE_CD='PHDC^1.3';
RUN;
PROC SQL;
	UPDATE MSG_CONTAINER SET MAX_MSG_CONTAINER_UID = (SELECT MAX(MSG_CONTAINER_UID) FROM NBS_MSG.MSG_CONTAINER WHERE MSG_CONTAINER_UID<10000000);
	UPDATE MSG_CONTAINER SET AUTHOR_ID  = (SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_APPLICATION_OID');
	UPDATE MSG_CONTAINER SET CUSTODIAN_ID  = (SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_FACILITY_OID');
	UPDATE MSG_CONTAINER SET DOCUMENT_ID  = COMPRESS((SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_APPLICATION_OID')
										|| (SELECT CONFIG_VALUE FROM NBS_ODS.NBS_CONFIGURATION WHERE CONFIG_KEY='MSG_SENDING_FACILITY_OID')
										|| EFFECTIVE_DATETIME);
QUIT;
 %ASSIGN_UID (MSG_CONTAINER, MSG_CONTAINER_UID);

DATA MSG_CONTAINER;
SET MSG_CONTAINER;
if  MAX_MSG_CONTAINER_UID~=. then MSG_CONTAINER_UID= MSG_CONTAINER_UID+MAX_MSG_CONTAINER_UID-1;
else MSG_CONTAINER_UID =MSG_CONTAINER_UID-1;
DROP MAX_MSG_CONTAINER_UID EFFECTIVE_DATETIME;
RUN;
PROC SQL;
DELETE FROM MSG_CONTAINER WHERE EFFECTIVE_TIME IS NULL;
RUN;
%DBLOAD (MSG_CONTAINER, MSG_CONTAINER);

PROC SQL; 
CREATE TABLE NOTIFICATION_CASE_MAP AS
SELECT 
	MSG_CONTAINER.MSG_CONTAINER_UID,
	TARGET_ACT_UID AS ACT_UID, ACT_RELATIONSHIP.TYPE_CD, PUBLIC_HEALTH_CASE.LOCAL_ID, 'CASE'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
	CONDITION_CODE.INVESTIGATION_FORM_CD, NOTIFICATION_UID, NOTIFICATION_CD
		FROM MSG_CONTAINER 
	INNER JOIN NBS_ODS.ACT_RELATIONSHIP 
		ON SOURCE_ACT_UID=NOTIFICATION_UID
INNER JOIN NBS_ODS.PUBLIC_HEALTH_CASE ON
TARGET_ACT_UID = PUBLIC_HEALTH_CASE_UID
INNER JOIN NBS_SRT.CONDITION_CODE ON
CONDITION_CODE.CONDITION_CD = PUBLIC_HEALTH_CASE.CD;
QUIT;

PROC SQL;
	CREATE TABLE NOTIFICATION_TRT_ACT_MAP AS
	SELECT NOTIFICATION_CASE_MAP.MSG_CONTAINER_UID,
	SOURCE_ACT_UID AS ACT_UID, ACT_RELATIONSHIP.TYPE_CD, TREATMENT.LOCAL_ID, 'TRT'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
	NOTIFICATION_CASE_MAP.INVESTIGATION_FORM_CD, 0 AS NOTIFICATION_UID, 'TREATMENT' AS NOTIFICATION_CD
	FROM NBS_ODS.ACT_RELATIONSHIP 
	INNER JOIN NOTIFICATION_CASE_MAP 
	ON ACT_RELATIONSHIP.TARGET_ACT_UID=NOTIFICATION_CASE_MAP.ACT_UID
	INNER JOIN NBS_ODS.TREATMENT ON
	TREATMENT.TREATMENT_UID = ACT_RELATIONSHIP.SOURCE_ACT_UID
WHERE ACT_RELATIONSHIP.TYPE_CD IN ( 'TreatmentToPHC');
QUIT;

PROC SQL;
	CREATE TABLE NOTIFICATION_IXS_ACT_MAP AS
	SELECT NOTIFICATION_CASE_MAP.MSG_CONTAINER_UID,
	SOURCE_ACT_UID AS ACT_UID, ACT_RELATIONSHIP.TYPE_CD, INTERVIEW.LOCAL_ID, 'IXS'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
	NOTIFICATION_CASE_MAP.INVESTIGATION_FORM_CD, 0 AS NOTIFICATION_UID, 'INTERVIEW' AS NOTIFICATION_CD
	FROM NBS_ODS.ACT_RELATIONSHIP 
	INNER JOIN NOTIFICATION_CASE_MAP 
	ON ACT_RELATIONSHIP.TARGET_ACT_UID=NOTIFICATION_CASE_MAP.ACT_UID
	INNER JOIN NBS_ODS.INTERVIEW ON
	INTERVIEW.INTERVIEW_UID = ACT_RELATIONSHIP.SOURCE_ACT_UID
WHERE ACT_RELATIONSHIP.TYPE_CD IN ( 'IXS');
QUIT;

PROC SQL;
CREATE TABLE NOTIFICATION_ACT_MAP 
AS SELECT * FROM NOTIFICATION_CASE_MAP
UNION 
SELECT * FROM NOTIFICATION_TRT_ACT_MAP
UNION 
SELECT * FROM NOTIFICATION_IXS_ACT_MAP ORDER BY MSG_CONTAINER_UID ;
QUIT;

PROC SQL;
CREATE TABLE NOTIFICATION_PSN_MAP AS
SELECT MSG_CONTAINER_UID,SUBJECT_ENTITY_UID,  PARTICIPATION.ACT_UID, PARTICIPATION.TYPE_CD, PARTICIPATION.SUBJECT_CLASS_CD , 
	PERSON.LAST_CHG_TIME AS PAT_EFFECTIVE_TIME 'PAT_EFFECTIVE_TIME',
	PERSON.LAST_CHG_USER_ID, 
	PERSON.LOCAL_ID AS LOCAL_ID 'LOCAL_ID', NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD
FROM NBS_ODS.PARTICIPATION 
INNER JOIN NOTIFICATION_ACT_MAP ON
NOTIFICATION_ACT_MAP.ACT_UID =PARTICIPATION.ACT_UID
INNER JOIN NBS_ODS.PERSON ON
PARTICIPATION.SUBJECT_ENTITY_UID =PERSON.PERSON_UID 
ORDER BY MSG_CONTAINER_UID;
QUIT;
PROC SQL;
CREATE TABLE NOTIFICATION_ORG_MAP AS
SELECT MSG_CONTAINER_UID,SUBJECT_ENTITY_UID,  PARTICIPATION.ACT_UID, PARTICIPATION.TYPE_CD,PARTICIPATION.SUBJECT_CLASS_CD , 
	ORGANIZATION.LAST_CHG_TIME AS PAT_EFFECTIVE_TIME 'PAT_EFFECTIVE_TIME',
	ORGANIZATION.LAST_CHG_USER_ID, 
	ORGANIZATION.LOCAL_ID AS LOCAL_ID 'LOCAL_ID',  NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD
FROM NBS_ODS.PARTICIPATION 
INNER JOIN NOTIFICATION_ACT_MAP ON
NOTIFICATION_ACT_MAP.ACT_UID =PARTICIPATION.ACT_UID
INNER JOIN NBS_ODS.ORGANIZATION ON
PARTICIPATION.SUBJECT_ENTITY_UID =ORGANIZATION.ORGANIZATION_UID 
ORDER BY MSG_CONTAINER_UID;
QUIT;

PROC SQL;
CREATE TABLE NOTIFICATION_ENTITY_MAP AS SELECT * FROM NOTIFICATION_ORG_MAP
UNION 
SELECT * FROM NOTIFICATION_PSN_MAP ORDER BY MSG_CONTAINER_UID,act_uid ;
QUIT;

PROC SQL;
CREATE TABLE PARTICIPATIONS AS
SELECT DISTINCT NBS_QUESTION.QUESTION_IDENTIFIER,
NBS_QUESTION.PART_TYPE_CD
FROM NBS_ODS.NBS_QUESTION WHERE (DATA_LOCATION LIKE '%PERSON_UID' OR DATA_LOCATION LIKE '%ORGANIZATION_UID' OR DATA_LOCATION LIKE '%SUBJECT_ENTITY_UID' OR DATA_LOCATION LIKE '%PLACE_UID') 
AND DATA_TYPE='PART' ORDER BY NBS_QUESTION.PART_TYPE_CD;
QUIT;

PROC SQL;
CREATE TABLE MSG_PARTICIPATIONS AS
SELECT DISTINCT NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD, NOTIFICATION_ENTITY_MAP.MSG_CONTAINER_UID, NOTIFICATION_ENTITY_MAP.LOCAL_ID AS ANSWER_TXT  'ANSWER_TXT', 0 AS SEQ_NBR 'SEQ_NBR', 
'' AS ANSWER_GROUP_SEQ_NBR 'ANSWER_GROUP_SEQ_NBR', '' AS QUESTION_GROUP_SEQ_NBR 'QUESTION_GROUP_SEQ_NBR',
PARTICIPATIONS.QUESTION_IDENTIFIER, PARTICIPATIONS.PART_TYPE_CD,
NOTIFICATION_ACT_MAP.LOCAL_ID LENGTH = 100 format=$100. AS MSG_EVENT_ID, MSG_EVENT_TYPE
FROM NOTIFICATION_ENTITY_MAP INNER JOIN NOTIFICATION_ACT_MAP ON  
NOTIFICATION_ENTITY_MAP.ACT_UID = NOTIFICATION_ACT_MAP.ACT_UID 
AND NOTIFICATION_ENTITY_MAP.MSG_CONTAINER_UID = NOTIFICATION_ACT_MAP.MSG_CONTAINER_UID
INNER JOIN PARTICIPATIONS ON 
PARTICIPATIONS.PART_TYPE_CD = NOTIFICATION_ENTITY_MAP.TYPE_CD ORDER BY NOTIFICATION_ENTITY_MAP.MSG_CONTAINER_UID, PARTICIPATIONS.PART_TYPE_CD;
QUIT;
%ADDNONCASECODINGSYSTEM(MSG_PARTICIPATIONS, MSG_PARTICIPATIONS);
%dbload(MSG_ANSWER, MSG_PARTICIPATIONS);
PROC SQL;
CREATE TABLE MSG_CASE_INVESTIGATION AS 
SELECT DISTINCT
    NOTIFICATION_ACT_MAP.MSG_CONTAINER_UID,
	PUBLIC_HEALTH_CASE.LAST_CHG_USER_ID,
	PUBLIC_HEALTH_CASE.LOCAL_ID AS INV_LOCAL_ID 'INV_LOCAL_ID',
	NOTIFICATION_ENTITY_MAP.LOCAL_ID AS PAT_LOCAL_ID 'PAT_LOCAL_ID',
	PUBLIC_HEALTH_CASE.INVESTIGATION_STATUS_CD LENGTH = 100 format=$100. AS INV_STATUS_CD  'INV_STATUS_CD',
/*	PUBLIC_HEALTH_CASE.INVESTIGATOR_ASSIGNED_TIME AS INV110  'INV110',*/
	PUBLIC_HEALTH_CASE.RPT_FORM_CMPLT_TIME AS INV_REPORT_DT  'INV_REPORT_DT',
	PUBLIC_HEALTH_CASE.RPT_SOURCE_CD LENGTH = 100 format=$100. AS INV_SOURCE_TYPE_CD  'INV_SOURCE_TYPE_CD',
	PUBLIC_HEALTH_CASE.RPT_TO_COUNTY_TIME AS INV_REPORT_TO_COUNTY_DT  'INV_REPORT_TO_COUNTY_DT',
	PUBLIC_HEALTH_CASE.RPT_TO_STATE_TIME AS INV_REPORT_TO_STATE_DT  'INV_REPORT_TO_STATE_DT',
	PUBLIC_HEALTH_CASE.HOSPITALIZED_IND_CD  LENGTH = 100 format=$100. AS INV_HOSPITALIZED_IND_CD  'INV_HOSPITALIZED_IND_CD',
	PUBLIC_HEALTH_CASE.HOSPITALIZED_ADMIN_TIME AS INV_HOSPITALIZED_ADMIT_DT  'INV_HOSPITALIZED_ADMIT_DT',
	PUBLIC_HEALTH_CASE.HOSPITALIZED_DISCHARGE_TIME AS INV_HOSPITALIZED_DISCHARGE_DT  'INV_HOSPITALIZED_DISCHARGE_DT',
	PUBLIC_HEALTH_CASE.HOSPITALIZED_DURATION_AMT AS INV_HOSP_STAY_DURATION  'INV_HOSP_STAY_DURATION',
	PUBLIC_HEALTH_CASE.DIAGNOSIS_TIME AS INV_DIAGNOSIS_DT  'INV_DIAGNOSIS_DT',
	PUBLIC_HEALTH_CASE.EFFECTIVE_FROM_TIME AS INV_ILLNESS_START_DT  'INV_ILLNESS_START_DT',
	PUBLIC_HEALTH_CASE.EFFECTIVE_TO_TIME AS INV_ILLNESS_END_DT  'INV_ILLNESS_END_DT',
	INPUT (PUBLIC_HEALTH_CASE.EFFECTIVE_DURATION_AMT, 3.) AS INV_ILLNESS_DURATION 'INV_ILLNESS_DURATION' ,
	PUBLIC_HEALTH_CASE.EFFECTIVE_DURATION_UNIT_CD  LENGTH = 100  format=$100. AS INV_ILLNESS_DURATION_UNIT_CD  'INV_ILLNESS_DURATION_UNIT_CD',
	INPUT (PUBLIC_HEALTH_CASE.PAT_AGE_AT_ONSET, 3.)   AS INV_ILLNESS_ONSET_AGE 'INV_ILLNESS_ONSET_AGE' ,
	PUBLIC_HEALTH_CASE.PAT_AGE_AT_ONSET_UNIT_CD LENGTH = 100 format=$100. AS INV_ILLNESS_ONSET_AGE_UNIT_CD  'INV_ILLNESS_ONSET_AGE_UNIT_CD',
	PUBLIC_HEALTH_CASE.OUTCOME_CD LENGTH = 100 format=$100. AS INV_PATIENT_DEATH_IND_CD  'INV_PATIENT_DEATH_IND_CD',
	PUBLIC_HEALTH_CASE.DECEASED_TIME AS INV_PATIENT_DEATH_DT  'INV_PATIENT_DEATH_DT',
	PUBLIC_HEALTH_CASE.ACTIVITY_FROM_TIME AS INV_START_DT  'INV_START_DT',
	PUBLIC_HEALTH_CASE.INVESTIGATOR_ASSIGNED_TIME AS INV_INVESTIGATOR_ASSIGNED_DT 'INV_INVESTIGATOR_ASSIGNED_DT',
	PUBLIC_HEALTH_CASE.DAY_CARE_IND_CD LENGTH = 100 format=$100. AS INV_DAYCARE_IND_CD  'INV_DAYCARE_IND_CD',
	PUBLIC_HEALTH_CASE.FOOD_HANDLER_IND_CD LENGTH = 100format=$100. AS INV_FOODHANDLER_IND_CD  'INV_FOODHANDLER_IND_CD',
	PUBLIC_HEALTH_CASE.OUTBREAK_IND LENGTH = 100 format=$100. AS INV_OUTBREAK_IND_CD  'INV_OUTBREAK_IND_CD',
	PUBLIC_HEALTH_CASE.OUTBREAK_NAME LENGTH = 100 format=$100. AS INV_OUTBREAK_NAME_CD  'INV_OUTBREAK_NAME_CD',
	PUBLIC_HEALTH_CASE.DISEASE_IMPORTED_CD LENGTH = 100 format=$100. AS INV_DISEASE_ACQUIRED_LOC_CD  'INV_DISEASE_ACQUIRED_LOC_CD',
	PUBLIC_HEALTH_CASE.IMPORTED_COUNTRY_CD LENGTH = 100 format=$100. AS INV_IMPORT_COUNTRY_CD  'INV_IMPORT_COUNTRY_CD',
	PUBLIC_HEALTH_CASE.IMPORTED_STATE_CD LENGTH = 100 format=$100. AS INV_IMPORT_STATE_CD  'INV_IMPORT_STATE_CD',
	PUBLIC_HEALTH_CASE.IMPORTED_CITY_DESC_TXT LENGTH = 250 format=$100. AS INV_IMPORT_CITY_TXT  'INV_IMPORT_CITY_TXT',
	PUBLIC_HEALTH_CASE.IMPORTED_COUNTY_CD LENGTH = 100 format=$100. AS INV_IMPORT_COUNTY_CD  'INV_IMPORT_COUNTY_CD',
	PUBLIC_HEALTH_CASE.TRANSMISSION_MODE_CD LENGTH = 100 format=$100. AS INV_TRANSMISSION_MODE_CD  'INV_TRANSMISSION_MODE_CD',
	PUBLIC_HEALTH_CASE.DETECTION_METHOD_CD LENGTH = 100 format=$100. AS INV_DETECTION_METHOD_CD  'INV_DETECTION_METHOD_CD',
	PUBLIC_HEALTH_CASE.CASE_CLASS_CD LENGTH = 100 format=$100. AS INV_CASE_STATUS_CD  'INV_CASE_STATUS_CD',
	PUBLIC_HEALTH_CASE.MMWR_WEEK LENGTH = 2 format=$2. AS INV_MMWR_WEEK_TXT  'INV_MMWR_WEEK_TXT',
	PUBLIC_HEALTH_CASE.MMWR_YEAR LENGTH = 4 format=$4. AS INV_MMWR_YEAR_TXT  'INV_MMWR_YEAR_TXT',
	PUBLIC_HEALTH_CASE.TXT LENGTH = 2000 AS INV_COMMENT_TXT  'INV_COMMENT_TXT',
	PUBLIC_HEALTH_CASE.LOCAL_ID  LENGTH = 100 format=$100. AS CHILD_LOCAL_ID  'CHILD_LOCAL_ID',
	PUBLIC_HEALTH_CASE.CD  LENGTH = 100 format=$100. AS INV_CONDITION_CD  'INV_CONDITION_CD',
	PUBLIC_HEALTH_CASE.PREGNANT_IND_CD LENGTH = 100 format=$100. AS INV_PREGNANCY_IND_CD  'INV_PREGNANCY_IND_CD',
	PUBLIC_HEALTH_CASE.ACTIVITY_TO_TIME AS INV_CLOSE_DT  'INV_CLOSE_DT',
	PUBLIC_HEALTH_CASE.SHARED_IND  LENGTH = 1 format=$1.  AS INV_SHARED_IND_CD  'INV_SHARED_IND_CD',
	PUBLIC_HEALTH_CASE.PRIORITY_CD LENGTH = 100 format=$100. AS INV_CONTACT_INV_PRIORITY_CD  'INV_CONTACT_INV_PRIORITY_CD',
	PUBLIC_HEALTH_CASE.INFECTIOUS_FROM_DATE AS INV_INFECTIOUS_FROM_DT  'INV_INFECTIOUS_FROM_DT',
	PUBLIC_HEALTH_CASE.INFECTIOUS_TO_DATE AS INV_INFECTIOUS_TO_DT  'INV_INFECTIOUS_TO_DT',
	PUBLIC_HEALTH_CASE.CONTACT_INV_STATUS_CD LENGTH = 100 format=$100. AS INV_CONTACT_INV_STATUS_CD  'INV_CONTACT_INV_STATUS_CD',
	PUBLIC_HEALTH_CASE.CONTACT_INV_TXT LENGTH = 2000 format=$2000. AS INV_CONTACT_INV_COMMENT_TXT  'INV_CONTACT_INV_COMMENT_TXT',
	PUBLIC_HEALTH_CASE.REFERRAL_BASIS_CD  LENGTH = 100 format=$100. AS INV_REFERRAL_BASIS_CD  'INV_REFERRAL_BASIS_CD',
	PUBLIC_HEALTH_CASE.CURR_PROCESS_STATE_CD LENGTH = 100 format=$100. AS INV_CURR_PROCESS_STATE_CD  'INV_CURR_PROCESS_STATE_CD',
	PUBLIC_HEALTH_CASE.COINFECTION_ID LENGTH = 100 format=$100. AS INV_COINFECTION_ID 'INV_COINFECTION_ID',
	PUBLIC_HEALTH_CASE.LAST_CHG_TIME AS INV_EFFECTIVE_TIME 'INV_EFFECTIVE_TIME',
	PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID,
	STATE.ROOT_EXTENSION_TXT  LENGTH = 199 format=$199. AS INV_STATE_ID,
	LEGACY.ROOT_EXTENSION_TXT LENGTH = 199 format=$199. AS INV_LEGACY_CASE_ID
FROM NBS_ODS.PUBLIC_HEALTH_CASE
INNER JOIN NOTIFICATION_ACT_MAP ON
NOTIFICATION_ACT_MAP.ACT_UID = PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID
INNER JOIN NOTIFICATION_ENTITY_MAP ON
NOTIFICATION_ACT_MAP.ACT_UID = NOTIFICATION_ENTITY_MAP.ACT_UID
AND NOTIFICATION_ENTITY_MAP.TYPE_CD='SubjOfPHC'
LEFT OUTER JOIN NBS_ODS.ACT_ID STATE
ON NOTIFICATION_ACT_MAP.ACT_UID = STATE.ACT_UID
AND STATE.TYPE_CD='STATE'
LEFT OUTER JOIN NBS_ODS.ACT_ID LEGACY
ON NOTIFICATION_ACT_MAP.ACT_UID = LEGACY.ACT_UID
AND LEGACY.TYPE_CD='LEGACY'
ORDER BY PUBLIC_HEALTH_CASE_UID;
QUIT;
%AUTHDATA(MSG_CASE_INVESTIGATION, MSG_CASE_INVESTIGATION, INV_AUTHOR_ID);
PROC SQL;
CREATE TABLE CONFIRMATION_METHOD AS 
SELECT DISTINCT  NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD, 
	CONFIRMATION_METHOD_CD AS INV161 'INV161' , CONFIRMATION_METHOD_TIME , MSG_CONTAINER_UID , ACT_UID, LOCAL_ID
FROM NOTIFICATION_ACT_MAP
LEFT JOIN NBS_ODS.CONFIRMATION_METHOD
ON CONFIRMATION_METHOD.PUBLIC_HEALTH_CASE_UID = NOTIFICATION_ACT_MAP.ACT_UID 
ORDER BY MSG_CONTAINER_UID, CONFIRMATION_METHOD_CD, CONFIRMATION_METHOD_TIME;
QUIT;
DATA CONFIRMATION_METHOD_ANSWER_INIT;
SET CONFIRMATION_METHOD;
LENGTH INV162 $50;
INV162=PUT(DATEPART(CONFIRMATION_METHOD_TIME),mmddyys10.);	
RUN;

PROC SQL;
	CREATE TABLE CONFIRMATION_METHOD_ANSWER_INIT AS SELECT 
	ACT_UID, INVESTIGATION_FORM_CD, MSG_CONTAINER_UID, 'INV161' AS QUESTION_IDENTIFIER, INV161 AS ANSWER_TXT 'ANSWER_TXT',  ACT_UID, 
	LOCAL_ID LENGTH = 100 format=$100. AS MSG_EVENT_ID, 'CASE'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
	'' AS ANSWER_GROUP_SEQ_NBR 'ANSWER_GROUP_SEQ_NBR', '' AS QUESTION_GROUP_SEQ_NBR 'QUESTION_GROUP_SEQ_NBR'
	FROM CONFIRMATION_METHOD_ANSWER_INIT WHERE INV161~='' AND INV161 ~= 'NA'
	UNION
	SELECT 
	ACT_UID, INVESTIGATION_FORM_CD, MSG_CONTAINER_UID, 'INV162' AS QUESTION_IDENTIFIER, INV162 AS ANSWER_TXT 'ANSWER_TXT',  ACT_UID, 
	LOCAL_ID LENGTH = 100 format=$100. AS MSG_EVENT_ID, 'CASE'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
	'' AS ANSWER_GROUP_SEQ_NBR 'ANSWER_GROUP_SEQ_NBR', '' AS QUESTION_GROUP_SEQ_NBR 'QUESTION_GROUP_SEQ_NBR'
	FROM CONFIRMATION_METHOD_ANSWER_INIT WHERE CONFIRMATION_METHOD_TIME~=.
	ORDER BY  MSG_CONTAINER_UID, QUESTION_IDENTIFIER;
QUIT;

data CONFIRMATION_METHOD_ANSWER;
set CONFIRMATION_METHOD_ANSWER_INIT;
SEQ_NBR +1;
BY MSG_CONTAINER_UID;
IF first.MSG_CONTAINER_UID THEN SEQ_NBR=1 ;
IF QUESTION_IDENTIFIER='INV162' THEN SEQ_NBR=0 ;
run;
%ADDCODINGSYSTEM(CONFIRMATION_METHOD_ANSWER, CONFIRMATION_METHOD_ANSWER);
%dbload(MSG_ANSWER, CONFIRMATION_METHOD_ANSWER);
PROC SQL;
CREATE TABLE MSG_CASE_MANAGE_ANSWER AS SELECT 
NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD,
ACT_REF_TYPE_CD AS NBS177 'NBS177',
FIELD_FOLL_UP_OOJ_OUTCOME AS NBS182 'NBS182',
FLD_FOLL_UP_DISPO AS NBS173 'NBS173',
FLD_FOLL_UP_EXPECTED_IN AS NBS168 'NBS168',
FLD_FOLL_UP_INTERNET_OUTCOME AS NBS178 'NBS178',
FLD_FOLL_UP_NOTIFICATION_PLAN AS NBS167 'NBS167',
FLD_FOLL_UP_PROV_DIAGNOSIS AS NBS166 'NBS166',
FLD_FOLL_UP_PROV_EXM_REASON AS NBS165 'NBS165',
INIT_FOLL_UP AS NBS140 'NBS140',
INIT_FOLL_UP_NOTIFIABLE AS NBS143 'NBS143',
INITIATING_AGNCY AS NBS111 'NBS111',
INTERNET_FOLL_UP AS NBS142 'NBS142',
OOJ_AGENCY AS NBS179 'NBS179',
PAT_INTV_STATUS_CD AS NBS192 'NBS192',
STATUS_900 AS NBS153 'NBS153',
SURV_PATIENT_FOLL_UP AS NBS151 'NBS151',
SURV_PROV_DIAGNOSIS AS NBS150 'NBS150',
SURV_PROV_EXM_REASON AS NBS149 'NBS149',
SURV_PROVIDER_CONTACT AS NBS148 'NBS148',
CASE_CLOSED_DATE,   
FLD_FOLL_UP_DISPO_DATE,   
FLD_FOLL_UP_EXAM_DATE,   
FLD_FOLL_UP_EXPECTED_DATE,   
FOLL_UP_ASSIGNED_DATE,   
INIT_FOLL_UP_ASSIGNED_DATE,   
INIT_FOLL_UP_CLOSED_DATE,   
INIT_INTERVIEW_ASSIGNED_DATE,   
INTERVIEW_ASSIGNED_DATE,   
OOJ_DUE_DATE,   
OOJ_INITG_AGNCY_OUTC_DUE_DATE,   
OOJ_INITG_AGNCY_OUTC_SNT_DATE,   
OOJ_INITG_AGNCY_RECD_DATE,   
SURV_ASSIGNED_DATE,   
SURV_CLOSED_DATE,   
EPI_LINK_ID AS NBS191 'NBS191',
FIELD_RECORD_NUMBER AS NBS160 'NBS160',
INIT_FOLL_UP_CLINIC_CODE AS NBS144 'NBS144',
OOJ_NUMBER AS NBS180 'NBS180',
SUBJ_COMPLEXION AS NBS158 'NBS158',
SUBJ_HAIR AS NBS157 'NBS157',
SUBJ_HEIGHT AS NBS155 'NBS155',
SUBJ_OTH_IDNTFYNG_INFO AS NBS159 'NBS159',
SUBJ_SIZE_BUILD AS NBS156 'NBS156',
MSG_CONTAINER_UID
FROM NBS_ODS.CASE_MANAGEMENT
INNER JOIN 
	NOTIFICATION_ACT_MAP
ON
	NOTIFICATION_ACT_MAP.ACT_UID=CASE_MANAGEMENT.PUBLIC_HEALTH_CASE_UID
ORDER BY
	MSG_CONTAINER_UID;
QUIT;

DATA MSG_CASE_MANAGE_ANSWER;
SET MSG_CASE_MANAGE_ANSWER;
LENGTH NBS196  NBS174 NBS170 NBS169 NBS162 NBS164 NBS141 NBS189 NBS187 NBS181 NBS113 NBS114 NBS112 NBS146 NBS147 $50;
NBS196=PUT(DATEPART(CASE_CLOSED_DATE),YYMMDDD10.);		
NBS174=PUT(DATEPART(FLD_FOLL_UP_DISPO_DATE),YYMMDDD10.);		
NBS170=PUT(DATEPART(FLD_FOLL_UP_EXAM_DATE),YYMMDDD10.);		
NBS169=PUT(DATEPART(FLD_FOLL_UP_EXPECTED_DATE),YYMMDDD10.);		
NBS162=PUT(DATEPART(FOLL_UP_ASSIGNED_DATE),YYMMDDD10.);		
NBS164=PUT(DATEPART(INIT_FOLL_UP_ASSIGNED_DATE),YYMMDDD10.);		
NBS141=PUT(DATEPART(INIT_FOLL_UP_CLOSED_DATE),YYMMDDD10.);		
NBS189=PUT(DATEPART(INIT_INTERVIEW_ASSIGNED_DATE),YYMMDDD10.);		
NBS187=PUT(DATEPART(INTERVIEW_ASSIGNED_DATE),YYMMDDD10.);		
NBS181=PUT(DATEPART(OOJ_DUE_DATE),YYMMDDD10.);		
NBS113=PUT(DATEPART(OOJ_INITG_AGNCY_OUTC_DUE_DATE),YYMMDDD10.);		
NBS114=PUT(DATEPART(OOJ_INITG_AGNCY_OUTC_SNT_DATE),YYMMDDD10.);		
NBS112=PUT(DATEPART(OOJ_INITG_AGNCY_RECD_DATE),YYMMDDD10.);		
NBS146=PUT(DATEPART(SURV_ASSIGNED_DATE),YYMMDDD10.);		
NBS147=PUT(DATEPART(SURV_CLOSED_DATE),YYMMDDD10.);		
RUN;
PROC TRANSPOSE DATA=MSG_CASE_MANAGE_ANSWER OUT=MSG_CASE_MANAGE_ANSWER  (where=(not missing(col1)));
VAR NBS177 NBS182 NBS173 NBS168 NBS178 NBS167 NBS166 NBS165 NBS140 NBS143 NBS111 NBS142 NBS179 NBS192 NBS153 NBS151 
NBS150 NBS149 NBS148 NBS196 NBS174 NBS170 NBS169 NBS162 NBS164 NBS141 NBS189 NBS187 NBS181 NBS113 NBS114 NBS112 
NBS146 NBS147 NBS191 NBS160 NBS144 NBS180 NBS158 NBS157 NBS155 NBS159 NBS156;	
BY MSG_CONTAINER_UID;
RUN;

PROC SQL;
CREATE TABLE MSG_CASE_MANAGE_ANSWER AS SELECT DISTINCT NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD, NOTIFICATION_ACT_MAP.MSG_CONTAINER_UID, COL1 AS ANSWER_TXT 'ANSWER_TXT', 0 AS SEQ_NBR 'SEQ_NBR',  
_NAME_ AS QUESTION_IDENTIFIER 'QUESTION_IDENTIFIER',
'' AS ANSWER_GROUP_SEQ_NBR 'ANSWER_GROUP_SEQ_NBR', '' AS QUESTION_GROUP_SEQ_NBR 'QUESTION_GROUP_SEQ_NBR',
	NOTIFICATION_ACT_MAP.LOCAL_ID LENGTH = 100 format=$100. AS MSG_EVENT_ID, 'CASE'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD
FROM MSG_CASE_MANAGE_ANSWER 
INNER JOIN NOTIFICATION_ACT_MAP
ON NOTIFICATION_ACT_MAP.MSG_CONTAINER_UID=MSG_CASE_MANAGE_ANSWER.MSG_CONTAINER_UID
AND NOTIFICATION_ACT_MAP.MSG_EVENT_TYPE='CASE'
ORDER BY NOTIFICATION_ACT_MAP.ACT_UID,QUESTION_IDENTIFIER ;
QUIT;
%ADDCODINGSYSTEM(MSG_CASE_MANAGE_ANSWER, MSG_CASE_MANAGE_ANSWER);
%dbload(MSG_ANSWER, MSG_CASE_MANAGE_ANSWER);
PROC SQL;
CREATE TABLE MSG_ANSWER AS SELECT DISTINCT NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD, MSG_CONTAINER_UID, ANSWER_TXT, SEQ_NBR, ANSWER_GROUP_SEQ_NBR, 
NBS_UI_METADATA.QUESTION_IDENTIFIER, NBS_UI_METADATA.QUESTION_GROUP_SEQ_NBR,
PUBLIC_HEALTH_CASE.LOCAL_ID LENGTH = 100 format=$100. AS MSG_EVENT_ID, 'CASE'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
NBS_CASE_ANSWER.ACT_UID, D.question_label AS SECTION_NM 'SECTION_NM'
FROM NBS_ODS.NBS_CASE_ANSWER 
INNER JOIN NOTIFICATION_ACT_MAP
ON NOTIFICATION_ACT_MAP.ACT_UID=NBS_CASE_ANSWER.ACT_UID
INNER JOIN NBS_ODS.PUBLIC_HEALTH_CASE 
ON PUBLIC_HEALTH_CASE.PUBLIC_HEALTH_CASE_UID=NBS_CASE_ANSWER.ACT_UID
INNER JOIN NBS_ODS.NBS_UI_METADATA 
ON NBS_UI_METADATA.NBS_QUESTION_UID=NBS_CASE_ANSWER.NBS_QUESTION_UID
INNER JOIN NBS_SRT.CONDITION_CODE
ON CONDITION_CODE.CONDITION_CD=PUBLIC_HEALTH_CASE.CD
LEFT OUTER JOIN (SELECT DISTINCT INVESTIGATION_FORM_CD, QUESTION_LABEL, QUESTION_GROUP_SEQ_NBR FROM NBS_ODS.NBS_UI_METADATA WHERE QUESTION_GROUP_SEQ_NBR IS NOT NULL AND NBS_UI_COMPONENT_UID=1016) AS D ON 
NBS_UI_METADATA.INVESTIGATION_FORM_CD = D.INVESTIGATION_FORM_CD AND NBS_UI_METADATA.QUESTION_GROUP_SEQ_NBR = D.QUESTION_GROUP_SEQ_NBR
WHERE UPCASE(DATA_LOCATION) ='NBS_CASE_ANSWER.ANSWER_TXT'
AND CONDITION_CODE.INVESTIGATION_FORM_CD = NBS_UI_METADATA.INVESTIGATION_FORM_CD
ORDER BY NBS_CASE_ANSWER.ACT_UID,QUESTION_IDENTIFIER ;
QUIT;
PROC SQL;
CREATE TABLE MSG_ANSWER_PLC AS
SELECT * FROM MSG_ANSWER WHERE QUESTION_IDENTIFIER IN ('NBS243','NBS290');
RUN;
proc sql;
      DELETE FROM MSG_ANSWER   WHERE QUESTION_IDENTIFIER IN ('NBS243','NBS290');
quit;
%ADDCODINGSYSTEM(MSG_ANSWER, MSG_ANSWER);
%dbload(MSG_ANSWER, MSG_ANSWER);
PROC SQL;
CREATE TABLE PLACE_INIT 
AS SELECT DISTINCT NOTIFICATION_ACT_MAP.INVESTIGATION_FORM_CD,
    MSG_ANSWER_PLC.MSG_CONTAINER_UID,
	 MSG_ANSWER_PLC.MSG_EVENT_ID,
	MSG_ANSWER_PLC.ANSWER_GROUP_SEQ_NBR , 
	MSG_ANSWER_PLC.QUESTION_GROUP_SEQ_NBR, 
	MSG_ANSWER_PLC.ACT_UID, 
	MSG_ANSWER_PLC.ANSWER_TXT, 
	MSG_ANSWER_PLC.QUESTION_IDENTIFIER,
	PARTICIPATION_TYPE.TYPE_CD AS PART_TYPE_CD 'PART_TYPE_CD',
	'CASE'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE,
	0 AS SEQ_NBR 'SEQ_NBR'
FROM 
MSG_ANSWER_PLC INNER JOIN NBS_ODS.NBS_UI_METADATA
ON MSG_ANSWER_PLC.QUESTION_IDENTIFIER= NBS_UI_METADATA.QUESTION_IDENTIFIER
INNER JOIN NOTIFICATION_ACT_MAP
ON NOTIFICATION_ACT_MAP.ACT_UID=MSG_ANSWER_PLC.ACT_UID
INNER JOIN NBS_SRT.PARTICIPATION_TYPE 
ON NBS_UI_METADATA.QUESTION_IDENTIFIER=PARTICIPATION_TYPE.QUESTION_IDENTIFIER 
WHERE  NBS_UI_METADATA.QUESTION_IDENTIFIER IN  ('NBS243','NBS290')
ORDER BY ACT_UID, NOTIFICATION_ACT_MAP.LOCAL_ID, QUESTION_GROUP_SEQ_NBR;
QUIT;

DATA PLACE_INIT;
  SET PLACE_INIT;
  LENGTH TYPE_OF_PLACE $200;
  	PLACE=SCAN(ANSWER_TXT,1,'^');
  	POSTAL=SCAN(ANSWER_TXT,2,'^');
  	TELE=SCAN(ANSWER_TXT,3,'^');
  	PLACE_UID= input(PLACE,12.); 
  	POSTAL_UID= input(POSTAL,12.); 
  	TELE_UID= input(TELE,12.); 
  DROP PLACE POSTAL TELE ANSWER_TXT;
RUN;


PROC SQL;
CREATE TABLE PLACE_INFO AS 
SELECT DISTINCT PLACE_INIT.*,  PLACE.CD AS PLA_TYPE_CD 'PLA_TYPE_CD',
	PLACE.DESCRIPTION AS PLA_COMMENT_TXT 'PLA_COMMENT_TXT', PLACE.LOCAL_ID AS PLA_LOCAL_ID 'PLA_LOCAL_ID', PLACE.LOCAL_ID AS ANSWER_TXT 'ANSWER_TXT',
	PLACE.NM AS PLA_NAME_TXT 'PLA_NAME_TXT', PLACE.LAST_CHG_USER_ID, PLACE.LAST_CHG_TIME AS PLA_EFFECTIVE_TIME 'PLA_EFFECTIVE_TIME' 
FROM PLACE_INIT
LEFT JOIN NBS_ODS.PLACE 
ON PLACE_INIT.PLACE_UID =PLACE.PLACE_UID;
;
DATA PLACE_INFO_ANS;
SET PLACE_INFO;
RUN;
PROC SORT DATA=PLACE_INFO NODUPKEY; BY PLACE_UID POSTAL_UID TELE_UID; RUN;
%AUTHDATA(PLACE_INFO, PLACE_INFO, PLA_AUTHOR_ID);
DATA MSG_ANSWER_PLC_FINAL;
  SET PLACE_INFO_ANS;
  DROP PLACE_UID POSTAL_UID TELE_UID PLA_LOCAL_ID PLA_NAME_TXT PLA_COMMENT_TXT  LAST_CHG_USER_ID PLA_EFFECTIVE_TIME PLA_AUTHOR_ID TYPE_OF_PLACE PLA_TYPE_CD ACT_UID;
  RUN;
  %ADDCODINGSYSTEM(MSG_ANSWER_PLC_FINAL, MSG_ANSWER_PLC_FINAL);
%dbload(MSG_ANSWER, MSG_ANSWER_PLC_FINAL);
PROC SQL;
CREATE TABLE 
	PLACE_QEC_ENTITY_ID AS 
SELECT DISTINCT PLACE_INFO.*, ROOT_EXTENSION_TXT AS PLA_ID_QUICK_CODE 'PLA_ID_QUICK_CODE'
FROM PLACE_INFO LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON PLACE_INFO.PLACE_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'QEC';
QUIT;
PROC SORT DATA=PLACE_QEC_ENTITY_ID NODUPKEY; BY  PLACE_UID POSTAL_UID TELE_UID; RUN;
PROC SQL;
CREATE TABLE 
	PLACE_POSTAL AS SELECT 
	PLACE_QEC_ENTITY_ID.PLACE_UID, 
	POSTAL_LOCATOR.POSTAL_LOCATOR_UID AS POSTAL_UID 'POSTAL_UID',
	POSTAL_LOCATOR.CITY_DESC_TXT AS PLA_ADDR_CITY_TXT 'PLA_ADDR_CITY_TXT',             
	POSTAL_LOCATOR.CNTRY_CD	AS PLA_ADDR_COUNTRY_CD 'PLA_ADDR_COUNTRY_CD',            
	POSTAL_LOCATOR.CNTY_CD	AS PLA_ADDR_COUNTY_CD 'PLA_ADDR_COUNTY_CD',              
	POSTAL_LOCATOR.STATE_CD	AS PLA_ADDR_STATE_CD 'PLA_ADDR_STATE_CD',               
	POSTAL_LOCATOR.STREET_ADDR1 AS PLA_ADDR_STREET_ADDR1_TXT 'PLA_ADDR_STREET_ADDR1_TXT',
	POSTAL_LOCATOR.STREET_ADDR2	AS PLA_ADDR_STREET_ADDR2_TXT 'PLA_ADDR_STREET_ADDR2_TXT',
	POSTAL_LOCATOR.ZIP_CD AS PLA_ADDR_ZIP_CODE_TXT 'PLA_ADDR_ZIP_CODE_TXT',
	POSTAL_LOCATOR.CENSUS_TRACT AS PLA_CENSUS_TRACT_TXT 'PLA_CENSUS_TRACT_TXT',
	ENTITY_LOCATOR_PARTICIPATION.AS_OF_DATE  AS PLA_ADDR_AS_OF_DT 'PLA_ADDR_AS_OF_DT',
	ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS PLA_ADDR_COMMENT_TXT 'PLA_ADDR_COMMENT_TXT'
FROM PLACE_QEC_ENTITY_ID 
INNER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON 	PLACE_QEC_ENTITY_ID.PLACE_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
AND PLACE_QEC_ENTITY_ID.POSTAL_UID = ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID
INNER JOIN  NBS_ODS.POSTAL_LOCATOR 
ON 	ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=POSTAL_LOCATOR.POSTAL_LOCATOR_UID
WHERE 	ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='PLC'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='PST';
QUIT;
PROC SORT DATA=PLACE_POSTAL NODUPKEY; BY  PLACE_UID POSTAL_UID; RUN;
PROC SQL;
CREATE TABLE PLACE_TELE
AS SELECT DISTINCT
	PLACE_QEC_ENTITY_ID.PLACE_UID,
	TELE_LOCATOR.TELE_LOCATOR_UID AS TELE_UID 'TELE_UID',
	ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID AS ENTITY_UID 'ENTITY_UID',
	TELE_LOCATOR.EXTENSION_TXT  AS PLA_PHONE_EXTENSION_TXT 'PLA_PHONE_EXTENSION_TXT',      
	TELE_LOCATOR.PHONE_NBR_TXT AS PLA_PHONE_NBR_TXT 'PLA_PHONE_NBR_TXT', 
	TELE_LOCATOR.EMAIL_ADDRESS AS PLA_EMAIL_ADDRESS_TXT 'PLA_EMAIL_ADDRESS_TXT',
	ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS PLA_PHONE_COMMENT_TXT 'PLA_PHONE_COMMENT_TXT',
	ENTITY_LOCATOR_PARTICIPATION.USE_CD,
	ENTITY_LOCATOR_PARTICIPATION.CD,
	ENTITY_LOCATOR_PARTICIPATION.AS_OF_DATE  AS PLA_PHONE_AS_OF_DT 'PLA_PHONE_AS_OF_DT',
	TELE_LOCATOR.CNTRY_CD AS PLA_PHONE_COUNTRY_CODE_TXT 'PLA_PHONE_COUNTRY_CODE_TXT',    
	TELE_LOCATOR.URL_ADDRESS AS PLA_URL_ADDRESS_TXT 'PLA_URL_ADDRESS_TXT'

FROM 
	PLACE_QEC_ENTITY_ID 
INNER JOIN 
	NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON 
	PLACE_QEC_ENTITY_ID.PLACE_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN 
	NBS_ODS.TELE_LOCATOR 
ON 
	ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID
WHERE
	PLACE_QEC_ENTITY_ID.TELE_UID =ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID 
	AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE';
QUIT;
PROC SORT DATA=PLACE_TELE NODUPKEY; BY  PLACE_UID TELE_UID; RUN;
PROC SQL;
CREATE TABLE SOURCE_PLACE AS SELECT *
 FROM PLACE_QEC_ENTITY_ID 
 LEFT JOIN PLACE_TELE ON PLACE_QEC_ENTITY_ID.PLACE_UID =PLACE_TELE.PLACE_UID
LEFT JOIN PLACE_POSTAL ON PLACE_QEC_ENTITY_ID.PLACE_UID =PLACE_POSTAL.PLACE_UID;
QUIT;
DATA SOURCE_PLACE;
SET SOURCE_PLACE;
DROP ANSWER_GROUP_SEQ_NBR QUESTION_GROUP_SEQ_NBR NBS_QUESTION_UID NBS_CASE_ANSWER_UID ACT_UID ANSWER_TXT QUESTION_IDENTIFIER CHILD_LOCAL_ID TYPE_OF_PLACE 
POSTAL_UID TELE_UID ENTITY_UID USE_CD CD;
RUN;
PROC SORT DATA=SOURCE_PLACE NODUPKEY; BY  MSG_CONTAINER_UID PLACE_UID; RUN;
%DBLOAD (MSG_PLACE, SOURCE_PLACE);
PROC SQL;
CREATE TABLE 
Patient_INIT_A AS 
SELECT
	DISTINCT 
    NOTIFICATION_ENTITY_MAP.MSG_CONTAINER_UID,
	NOTIFICATION_ENTITY_MAP.ACT_UID,
	PERSON.LAST_CHG_USER_ID,
	PERSON.LOCAL_ID AS PAT_LOCAL_ID 'PAT_LOCAL_ID',
	PERSON.CURR_SEX_CD AS PAT_CURRENT_SEX_CD 'PAT_CURRENT_SEX_CD',	
	PERSON.BIRTH_TIME AS  PAT_BIRTH_DT 'PAT_BIRTH_DT',	
	PERSON.BIRTH_GENDER_CD AS PAT_BIRTH_SEX_CD 'PAT_BIRTH_SEX_CD',
	PERSON.DECEASED_IND_CD AS PAT_DECEASED_IND_CD 'PAT_DECEASED_IND_CD',	
	PERSON.DECEASED_TIME AS  PAT_DECEASED_DT 'PAT_DECEASED_DT',	
	PERSON.MARITAL_STATUS_CD AS PAT_MARITAL_STATUS_CD 'PAT_MARITAL_STATUS_CD',	
	PERSON.PRIM_LANG_CD AS PAT_PRIMARY_LANGUAGE_CD 'PAT_PRIMARY_LANGUAGE_CD',	
	PERSON.OCCUPATION_CD AS PAT_OCCUPATION_CD  'PAT_OCCUPATION_CD',
	PERSON.ETHNIC_GROUP_IND AS PAT_ETHNIC_GROUP_IND_CD 'PAT_ETHNIC_GROUP_IND_CD',	
	PERSON.DESCRIPTION AS PAT_COMMENT_TXT 'PAT_COMMENT_TXT',	
	INPUT(PERSON.AGE_REPORTED, 3.) AS PAT_REPORTED_AGE 'PAT_REPORTED_AGE',	
	PERSON.AGE_REPORTED_UNIT_CD AS PAT_REPORTED_AGE_UNIT_CD 'PAT_REPORTED_AGE_UNIT_CD',	
	PERSON.AS_OF_DATE_ADMIN AS PAT_INFO_AS_OF_DT 'PAT_INFO_AS_OF_DT',	
	PERSON.ADDITIONAL_GENDER_CD AS PAT_ADDITIONAL_GENDER_TXT 'PAT_ADDITIONAL_GENDER_TXT',	
	PERSON.SPEAKS_ENGLISH_CD AS PAT_SPEAKS_ENGLISH_IND_CD 'PAT_SPEAKS_ENGLISH_IND_CD',	
	PERSON.EHARS_ID AS PAT_ID_STATE_HIV_CASE_NBR_TXT 'PAT_ID_STATE_HIV_CASE_NBR_TXT',	
	PERSON.SEX_UNK_REASON_CD AS PAT_SEX_UNK_REASON_CD 'PAT_SEX_UNK_REASON_CD',	
	PERSON.PREFERRED_GENDER_CD AS PAT_PREFERRED_GENDER_CD 'PAT_PREFERRED_GENDER_CD',	
	PERSON.ETHNIC_UNK_REASON_CD AS PAT_ETHNICITY_UNK_REASON_CD 'PAT_ETHNICITY_UNK_REASON_CD',
	PERSON.PERSON_UID AS PERSON_UID 'PERSON_UID',
	PERSON.AS_OF_DATE_ADMIN AS PAT_INFO_AS_OF_DT	'PAT_INFO_AS_OF_DT',
	PERSON.ADDITIONAL_GENDER_CD AS PAT_ADDITIONAL_GENDER_TXT	'PAT_ADDITIONAL_GENDER_TXT',
	PERSON.SPEAKS_ENGLISH_CD AS PAT_SPEAKS_ENGLISH_IND_CD	'PAT_SPEAKS_ENGLISH_IND_CD',
	PERSON.EHARS_ID AS PAT_ID_STATE_HIV_CASE_NBR_TXT 'PAT_ID_STATE_HIV_CASE_NBR_TXT',
	PERSON.SEX_UNK_REASON_CD AS PAT_SEX_UNK_REASON_CD 'PAT_SEX_UNK_REASON_CD',
	PERSON.ETHNIC_UNK_REASON_CD AS PAT_ETHNICITY_UNK_REASON_CD 'PAT_ETHNICITY_UNK_REASON_CD',
	PERSON.PREFERRED_GENDER_CD AS PAT_PREFERRED_GENDER_CD 'PAT_PREFERRED_GENDER_CD',
	PERSON.LAST_CHG_TIME AS PAT_EFFECTIVE_TIME 'PAT_EFFECTIVE_TIME'
FROM NOTIFICATION_ENTITY_MAP 
INNER JOIN NBS_ODS.PERSON
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID =PERSON.PERSON_UID
WHERE NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC'
ORDER BY ACT_UID;
QUIT;
PROC SQL;
CREATE TABLE 
PATIENT_INIT_B AS     
	SELECT ORGANIZATION.LOCAL_ID AS PAT_ID_MEDICAL_RECORD_NBR_TXT 'PAT_ID_MEDICAL_RECORD_NBR_TXT', PARTICIPATION.ACT_UID, ORGANIZATION.ORGANIZATION_UID FROM NBS_ODS.ORGANIZATION 
	INNER JOIN NBS_ODS.PARTICIPATION ON
	ORGANIZATION.ORGANIZATION_UID = PARTICIPATION.SUBJECT_ENTITY_UID
	INNER JOIN NOTIFICATION_ENTITY_MAP ON
	PARTICIPATION.ACT_UID = NOTIFICATION_ENTITY_MAP.ACT_UID 
 	WHERE  PARTICIPATION.TYPE_CD ='OrgAsClinicOfPHC';
CREATE TABLE 
PATIENT_INIT AS 
SELECT PATIENT_INIT_A.*, PATIENT_INIT_B.PAT_ID_MEDICAL_RECORD_NBR_TXT FROM
PATIENT_INIT_A LEFT OUTER JOIN PATIENT_INIT_B
ON PATIENT_INIT_A.ACT_UID = PATIENT_INIT_B.ACT_UID
 ORDER BY PERSON_UID; 
 QUIT;

%AUTHDATA(Patient_INIT, Patient_INIT, PAT_AUTHOR_ID);

PROC SQL;
CREATE TABLE PERSON_NAME AS SELECT 
	PERSON_NAME.LAST_NM AS PAT_NAME_LAST_TXT 'PAT_NAME_LAST_TXT',
	PERSON_NAME.FIRST_NM AS PAT_NAME_FIRST_TXT 'PAT_NAME_FIRST_TXT',
	PERSON_NAME.MIDDLE_NM AS PAT_NAME_MIDDLE_TXT 'PAT_NAME_MIDDLE_TXT',
	PERSON_NAME.NM_SUFFIX AS PAT_NAME_SUFFIX_CD 'PAT_NAME_SUFFIX_CD',
	PERSON_NAME.AS_OF_DATE AS PAT_NAME_AS_OF_DT 'PAT_NAME_AS_OF_DT',
	PERSON_NAME.nm_prefix AS PAT_NAME_PREFIX_CD 'PAT_NAME_PREFIX_CD',
	PERSON_NAME.nm_degree AS PAT_NAME_DEGREE_CD 'PAT_NAME_DEGREE_CD',
	PERSON_NAME.PERSON_UID as PERSON_UID 'PERSON_UID',
	PERSON_NAME_ALIAS.FIRST_NM AS PAT_NAME_ALIAS_TXT 'PAT_NAME_ALIAS_TXT'
	FROM NOTIFICATION_ENTITY_MAP
LEFT JOIN NBS_ODS.PERSON_NAME
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID =PERSON_NAME.PERSON_UID
and PERSON_NAME.nm_use_cd='L'
LEFT OUTER JOIN NBS_ODS.PERSON_NAME PERSON_NAME_ALIAS
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID =PERSON_NAME_ALIAS.PERSON_UID
and PERSON_NAME_ALIAS.nm_use_cd='AL'
WHERE NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;

PROC SQL;
CREATE TABLE POSTAL AS 
SELECT 
	POSTAL_LOCATOR.CNTRY_CD,
	POSTAL_LOCATOR.STREET_ADDR1	AS PAT_ADDR_STREET_ADDR1_TXT 'PAT_ADDR_STREET_ADDR1_TXT',
	POSTAL_LOCATOR.STREET_ADDR2	AS PAT_ADDR_STREET_ADDR2_TXT 'PAT_ADDR_STREET_ADDR2_TXT',
	POSTAL_LOCATOR.CITY_DESC_TXT AS PAT_ADDR_CITY_TXT 'PAT_ADDR_CITY_TXT',
	POSTAL_LOCATOR.STATE_CD	AS PAT_ADDR_STATE_CD 'PAT_ADDR_STATE_CD',
	POSTAL_LOCATOR.ZIP_CD	AS PAT_ADDR_ZIP_CODE_TXT 'PAT_ADDR_ZIP_CODE_TXT',
	POSTAL_LOCATOR.CNTY_CD	AS PAT_ADDR_COUNTY_CD 'PAT_ADDR_COUNTY_CD',
	POSTAL_LOCATOR.CNTRY_CD	AS PAT_ADDR_COUNTRY_CD 'PAT_ADDR_COUNTRY_CD',
	POSTAL_LOCATOR.CENSUS_TRACT	AS PAT_ADDR_CENSUS_TRACT_TXT 'PAT_ADDR_CENSUS_TRACT_TXT',
	POSTAL_EL.AS_OF_DATE AS PAT_ADDR_AS_OF_DT 'PAT_ADDR_AS_OF_DT',
	POSTAL_EL.LOCATOR_DESC_TXT AS PAT_ADDR_COMMENT_TXT 'PAT_ADDR_COMMENT_TXT',
	POSTAL_EL.ENTITY_UID as PERSON_UID 'PERSON_UID'
FROM NOTIFICATION_ENTITY_MAP LEFT JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION POSTAL_EL
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID= POSTAL_EL.ENTITY_UID
LEFT JOIN NBS_ODS.POSTAL_LOCATOR 
ON POSTAL_LOCATOR.POSTAL_LOCATOR_UID = POSTAL_EL.LOCATOR_UID
WHERE POSTAL_EL.CD = 'H'
and POSTAL_EL.CLASS_CD='PST'
AND  NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;
PROC SORT DATA=POSTAL NODUPKEY; BY PERSON_UID; RUN;
PROC SQL;
CREATE TABLE POSTAL_BIRTH AS 
SELECT 
	POSTAL_LOCATOR.CNTRY_CD	AS PAT_BIRTH_COUNTRY_CD 'PAT_BIRTH_COUNTRY_CD',
	POSTAL_EL.ENTITY_UID AS PERSON_UID 'PERSON_UID'
FROM NOTIFICATION_ENTITY_MAP LEFT JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION POSTAL_EL
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID= POSTAL_EL.ENTITY_UID
LEFT JOIN NBS_ODS.POSTAL_LOCATOR 
ON POSTAL_LOCATOR.POSTAL_LOCATOR_UID = POSTAL_EL.LOCATOR_UID
WHERE POSTAL_EL.USE_CD='BIR'
and POSTAL_EL.CLASS_CD='PST'
AND  NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;
PROC SQL;
CREATE TABLE TELE_HOME AS 
SELECT 
	Tele_locator.phone_nbr_txt AS PAT_HOME_PHONE_NBR_TXT 'PAT_HOME_PHONE_NBR_TXT',
	TELE_EL.AS_OF_DATE AS PAT_PHONE_AS_OF_DT 'PAT_PHONE_AS_OF_DT',
	Tele_locator.CNTRY_CD ,
	TELE_EL.LOCATOR_DESC_TXT AS PAT_PHONE_COMMENT_TXT 'PAT_PHONE_COMMENT_TXT',
	TELE_EL.ENTITY_UID as PERSON_UID 'PERSON_UID'
FROM NOTIFICATION_ENTITY_MAP LEFT JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION TELE_EL
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID= TELE_EL.ENTITY_UID
LEFT JOIN NBS_ODS.TELE_LOCATOR 
ON TELE_LOCATOR.TELE_LOCATOR_UID = TELE_EL.LOCATOR_UID
WHERE TELE_EL.CD = 'PH'
and TELE_EL.CLASS_CD='TELE'
and TELE_EL.USE_CD='H'
AND  NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;
PROC SORT DATA=TELE_HOME NODUPKEY; BY PERSON_UID; RUN;
data TELE_HOME;
set TELE_HOME;
   PAT_PHONE_COUNTRY_CODE_TXT  = input(CNTRY_CD, 8.);
run;
PROC SQL;
CREATE TABLE TELE_NET AS
SELECT DISTINCT
	ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID AS PERSON_UID 'PERSON_UID',
	TELE_LOCATOR.EMAIL_ADDRESS AS PAT_EMAIL_ADDRESS_TXT 'PAT_EMAIL_ADDRESS_TXT'
FROM NOTIFICATION_ENTITY_MAP LEFT JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
LEFT JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID
WHERE ENTITY_LOCATOR_PARTICIPATION.CD='NET'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
AND  NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;
PROC SORT DATA=TELE_NET NODUPKEY; BY PERSON_UID; RUN;
PROC SQL;
CREATE TABLE TELE_OFFICE AS
SELECT DISTINCT
	ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID  AS PERSON_UID 'PERSON_UID',
	TELE_LOCATOR.EXTENSION_TXT,        
	TELE_LOCATOR.PHONE_NBR_TXT AS PAT_WORK_PHONE_NBR_TXT 'PAT_WORK_PHONE_NBR_TXT'
FROM NOTIFICATION_ENTITY_MAP INNER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID
WHERE ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='PH'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
AND  NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;
data TELE_OFFICE;
set TELE_OFFICE;
   PAT_WORK_PHONE_EXTENSION_TXT  = input(EXTENSION_TXT, 8.);
run;
PROC SORT DATA=TELE_OFFICE NODUPKEY; BY PERSON_UID; RUN;
PROC SQL;
CREATE TABLE TELE_CELL AS
SELECT DISTINCT
	ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID  AS PERSON_UID 'PERSON_UID',
	TELE_LOCATOR.PHONE_NBR_TXT AS PAT_CELL_PHONE_NBR_TXT 'PAT_CELL_PHONE_NBR_TXT'
FROM NOTIFICATION_ENTITY_MAP INNER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
INNER JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID
WHERE ENTITY_LOCATOR_PARTICIPATION.CD='CP'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
AND  NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;
PROC SORT DATA=TELE_CELL NODUPKEY; BY PERSON_UID; RUN;
PROC SQL;
CREATE TABLE SSN_ENTITY_ID AS SELECT DISTINCT 
	SUBJECT_ENTITY_UID AS PERSON_UID 'PERSON_UID', 
	ROOT_EXTENSION_TXT AS PAT_ID_SSN_TXT 'PAT_ID_SSN_TXT'
FROM NOTIFICATION_ENTITY_MAP 
LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.ASSIGNING_AUTHORITY_CD = 'SSA'
WHERE NOTIFICATION_ENTITY_MAP.TYPE_CD = 'SubjOfPHC';
QUIT;
PROC SORT DATA=SSN_ENTITY_ID NODUPKEY; BY PERSON_UID;  RUN;
PROC SQL;
CREATE TABLE PERSON_RACE AS SELECT DISTINCT
	PERSON_RACE.PERSON_UID AS  PERSON_UID ' PERSON_UID',  
	RACE_CATEGORY_CD
FROM  
	NOTIFICATION_ENTITY_MAP 
INNER JOIN 
	NBS_ODS.PERSON_RACE
ON PERSON_RACE.PERSON_UID=NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID
ORDER BY PERSON_UID;
QUIT;
DATA PERSON_RACE;
SET PERSON_RACE;
LENGTH PAT_RACE_CATEGORY_CD $200.;
DO UNTIL(LAST.PERSON_UID);
	SET PERSON_RACE;
	BY PERSON_UID NOTSORTED;
if(LENGTHN(COMPRESS(RACE_CATEGORY_CD))> 0) and (LENGTHN(COMPRESS(PAT_RACE_CATEGORY_CD))= 0) 
	then PAT_RACE_CATEGORY_CD= COMPRESS(RACE_CATEGORY_CD);
else if(LENGTHN(COMPRESS(RACE_CATEGORY_CD))> 0) and (LENGTHN(COMPRESS(PAT_RACE_CATEGORY_CD))> 0) 
	then PAT_RACE_CATEGORY_CD= COMPRESS(RACE_CATEGORY_CD|| '|' || PAT_RACE_CATEGORY_CD );
END;
RUN;
PROC SQL;
CREATE TABLE MSG_PATIENT AS 
SELECT DISTINCT * FROM Patient_INIT AS PATIENT
LEFT JOIN PERSON_NAME ON
	PERSON_NAME.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN POSTAL ON
	POSTAL.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN TELE_HOME ON
	TELE_HOME.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN TELE_NET ON
	TELE_NET.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN TELE_OFFICE ON
	TELE_OFFICE.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN TELE_CELL ON
	TELE_CELL.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN SSN_ENTITY_ID ON
	SSN_ENTITY_ID.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN PERSON_RACE ON
	PERSON_RACE.PERSON_UID = PATIENT.PERSON_UID
LEFT JOIN POSTAL_BIRTH ON
	POSTAL_BIRTH.PERSON_UID = PATIENT.PERSON_UID;
QUIT;
PROC DATASETS 
LIBRARY = WORK NOLIST; DELETE PERSON_RACE SSN_ENTITY_ID TELE_CELL TELE_OFFICE TELE_NET TELE_HOME POSTAL PERSON_NAME Patient_INIT; 
	RUN;
QUIT;
PROC SQL;
UPDATE NBS_ODS.NOTIFICATION SET RECORD_STATUS_CD ='COMPLETED' 
WHERE LOCAL_ID IN (SELECT
MSG_LOCAL_ID FROM MSG_CONTAINER);
QUIT;
DATA MSG_PATIENT;
set MSG_PATIENT;
TYPE_CD = 'CASE';
DROP CHG_USER_FIRST_NAME CHG_USER_FIRST_NAME;
RUN;
PROC SQL;
	CREATE TABLE TREATMENT_ALL AS 
	SELECT DISTINCT
    NOTIFICATION_ACT_MAP.MSG_CONTAINER_UID,
	RX1.TREATMENT_UID, 
	RX1.CD AS TREATMENT_CD 'TREATMENT_CD',
	RX1.LOCAL_ID					AS TRT_LOCAL_ID 'TRT_LOCAL_ID',
	RX1.CD_DESC_TXT					AS TRT_CUSTOM_TREATMENT_TXT 'TRT_CUSTOM_TREATMENT_TXT',
	RX1.CD 							AS TRT_COMPOSITE_CD 'TRT_COMPOSITE_CD',
	RX2.EFFECTIVE_FROM_TIME			AS TRT_TREATMENT_DT 'TRT_TREATMENT_DT',
	RX2.CD							AS TRT_DRUG_CD 'TRT_DRUG_CD',
	RX2.DOSE_QTY ,
	RX2.DOSE_QTY_UNIT_CD			AS TRT_DOSAGE_UNIT_CD 'TRT_DOSAGE_UNIT_CD',
	RX2.INTERVAL_CD					AS TRT_FREQUENCY_AMT_CD 'TRT_FREQUENCY_AMT_CD',
	RX2.EFFECTIVE_DURATION_AMT,
	RX2.EFFECTIVE_DURATION_UNIT_CD	AS TRT_DURATION_UNIT_CD 'TRT_DURATION_UNIT_CD',
	RX2.ROUTE_CD					AS TRT_ROUTE_CD 'TRT_ROUTE_CD',
	ORG1.LOCAL_ID 					AS TRT_REPORTING_FACILITY_ID 'TRT_REPORTING_FACILITY_ID',
	RX1.LAST_CHG_USER_ID,
	RX1.LAST_CHG_TIME AS TRT_EFFECTIVE_TIME 'TRT_EFFECTIVE_TIME' ,
	RX1.RECORD_STATUS_CD,
	RX1.TXT AS TRT_COMMENT_TXT 'TRT_COMMENT_TXT'
	FROM NBS_ODS.TREATMENT AS RX1 
	INNER JOIN NOTIFICATION_ACT_MAP
	ON NOTIFICATION_ACT_MAP.ACT_UID = RX1.TREATMENT_UID
	INNER JOIN NBS_ODS.TREATMENT_ADMINISTERED AS RX2 
	ON RX1.TREATMENT_UID = RX2.TREATMENT_UID 
	LEFT JOIN NBS_ODS.ACT_RELATIONSHIP AS ACT1 
	ON RX1.TREATMENT_UID = ACT1.SOURCE_ACT_UID
	AND ACT1.TARGET_CLASS_CD = 'CASE'
	AND ACT1.SOURCE_CLASS_CD = 'TRMT'
	and act1.type_cd='TreatmentToPHC'
	LEFT JOIN NBS_ODS.PARTICIPATION	AS PAR
	ON RX1.TREATMENT_UID = PAR.ACT_UID
	and PAR.TYPE_CD = 'ReporterOfTrmt'
	and PAR.SUBJECT_CLASS_CD ='ORG'
	and PAR.ACT_CLASS_CD = 'TRMT'
	LEFT JOIN NBS_ODS.ORGANIZATION AS ORG1
	ON PAR.SUBJECT_ENTITY_UID = ORG1.ORGANIZATION_UID
	/*get investigation_key and condition_key*/
	LEFT JOIN NBS_ODS.ACT_RELATIONSHIP AS ACT2
	ON RX1.TREATMENT_UID = ACT2.SOURCE_ACT_UID
	and ACT2.TYPE_CD = 'TreatmentToPHC'
	INNER JOIN NOTIFICATION_PSN_MAP AS PK
	ON ACT2.TARGET_ACT_UID = PK.ACT_UID
;
QUIT;

%AUTHDATA(TREATMENT_ALL, TREATMENT_ALL, TRT_AUTHOR_ID);

PROC SQL;
CREATE TABLE TREATMENT_ALL_DRUG AS SELECT A.* , CODE_SET_NM, TREATMENT_CODE.DRUG_CD
FROM TREATMENT_ALL A LEFT JOIN NBS_SRT.TREATMENT_CODE B ON
A.TREATMENT_CD = B.TREATMENT_CD;
QUIT;
DATA TREATMENT_ALL_DRUG;
SET TREATMENT_ALL_DRUG;
IF CODE_SET_NM ='TREAT_COMPOSITE' AND DRUG_CD='' THEN TRT_DRUG_CD ='';
IF CODE_SET_NM ='TREAT_COMPOSITE' AND DRUG_CD^='' THEN TRT_DRUG_CD =DRUG_CD;
RUN;

DATA MSG_TREATMENT;
SET TREATMENT_ALL_DRUG;
	LENGTH INDX   TRT_DURATION_AMT_1 TRT_DURATION_AMT_2 TRT_DOSAGE_AMT_1 TRT_DOSAGE_AMT_2  TRT_DURATION_AMT TRT_DOSAGE_AMT 4.;
	X1 = INDEX(DOSE_QTY, '-');
	Y1 = INDEX(DOSE_QTY, '<');
	Z1 = INDEX(DOSE_QTY, '>');
	IF(X1 >0) THEN INDX= X1; 
	ELSE IF(Y1 >0) THEN INDX= Y1;
	ELSE IF(Z1 >0) THEN INDX= Z1;
	IF( x1=0 and y1=0 and z1=0) then TRT_DOSAGE_AMT = INPUT(DOSE_QTY, 8.);
	LENGTH=LENGTHN(DOSE_QTY);
	IF INDX> 0 THEN TRT_DOSAGE_AMT_1=SUBSTR(DOSE_QTY, INDX+1, LENGTH);
	IF INDX> 0 THEN TRT_DOSAGE_AMT_2=SUBSTR(DOSE_QTY, 1, (X1-1));
	IF INDX> 0 THEN TRT_DOSAGE_AMT=TRT_DOSAGE_AMT_2;
	if(TRT_DOSAGE_AMT_1 > TRT_DOSAGE_AMT_2) then TRT_DOSAGE_AMT = TRT_DOSAGE_AMT_1;

	X = INDEX(EFFECTIVE_DURATION_AMT, '-');
	Y = INDEX(EFFECTIVE_DURATION_AMT, '<');
	Z = INDEX(EFFECTIVE_DURATION_AMT, '>');
	IF(X >0) THEN INDX= X; 
	ELSE IF(Y >0) THEN INDX= Y;
	ELSE IF(Z >0) THEN INDX= Z;
	IF( x=0 and y=0 and z=0) then TRT_DURATION_AMT = INPUT(EFFECTIVE_DURATION_AMT, 8.);
	LENGTH=LENGTHN(EFFECTIVE_DURATION_AMT);
	IF INDX> 0 THEN TRT_DURATION_AMT_1=SUBSTR(EFFECTIVE_DURATION_AMT, INDX+1, LENGTH);
	IF (INDX> 0 AND X>0) THEN TRT_DURATION_AMT_2=SUBSTR(EFFECTIVE_DURATION_AMT, 1, (X-1));
	IF (INDX> 0 AND X>0) THEN TRT_DURATION_AMT=TRT_DURATION_AMT_2;
	if(TRT_DURATION_AMT_1 > TRT_DURATION_AMT_2) then TRT_DURATION_AMT = TRT_DURATION_AMT_1;
 DROP INDX   TRT_DURATION_AMT_1 TRT_DURATION_AMT_2 TRT_DOSAGE_AMT_1 TRT_DOSAGE_AMT_2 X Y Z X1 Y1 Z1 LENGTH;
RUN;
PROC SQL;
CREATE TABLE MSG_INTERVIEW AS 
SELECT
NOTIFICATION_ENTITY_MAP.INVESTIGATION_FORM_CD, NOTIFICATION_ENTITY_MAP.MSG_CONTAINER_UID,
	NOTIFICATION_ENTITY_MAP.LOCAL_ID AS IXS_INTERVIEWEE_ID 'IXS_INTERVIEWEE_ID',
	INTERVIEW.INTERVIEW_UID AS INTERVIEW_UID,
	INTERVIEW.INTERVIEW_STATUS_CD AS IXS_STATUS_CD 'IXS_STATUS_CD',
	INTERVIEW.INTERVIEW_DATE AS IXS_INTERVIEW_DT 'IXS_INTERVIEW_DT',
	INTERVIEW.INTERVIEWEE_ROLE_CD AS IXS_INTERVIEWEE_ROLE_CD 'IXS_INTERVIEWEE_ROLE_CD',
	INTERVIEW.INTERVIEW_TYPE_CD AS IXS_INTERVIEW_TYPE_CD 'IXS_INTERVIEW_TYPE_CD',
	INTERVIEW.INTERVIEW_LOC_CD AS IXS_INTERVIEW_LOC_CD 'IXS_INTERVIEW_LOC_CD',
	INTERVIEW.LOCAL_ID as IXS_LOCAL_ID 'IXS_LOCAL_ID',
	INTERVIEW.LAST_CHG_USER_ID,
	INTERVIEW.LAST_CHG_TIME AS IXS_EFFECTIVE_TIME 'IXS_EFFECTIVE_TIME'
	FROM NBS_ODS.INTERVIEW INNER JOIN NBS_ODS.ACT_RELATIONSHIP 
	ON INTERVIEW.INTERVIEW_UID =ACT_RELATIONSHIP.SOURCE_ACT_UID
	INNER JOIN NOTIFICATION_ENTITY_MAP
	ON NOTIFICATION_ENTITY_MAP.ACT_UID=ACT_RELATIONSHIP.TARGET_ACT_UID
	WHERE  
	NOTIFICATION_ENTITY_MAP.TYPE_CD='SubjOfPHC';
QUIT;
%AUTHDATA(MSG_INTERVIEW, MSG_INTERVIEW, IXS_AUTHOR_ID);
PROC SQL;
CREATE TABLE INTERVIEW_ANSWER AS SELECT DISTINCT 
MSG_CONTAINER_UID, ANSWER_TXT, SEQ_NBR, ANSWER_GROUP_SEQ_NBR, 
NBS_UI_METADATA.QUESTION_IDENTIFIER, NBS_UI_METADATA.QUESTION_GROUP_SEQ_NBR,
MSG_INTERVIEW.IXS_LOCAL_ID LENGTH = 100 format=$100. AS MSG_EVENT_ID, 'IXS'  LENGTH = 100 format=$100. AS MSG_EVENT_TYPE, D.QUESTION_LABEL AS SECTION_NM 'SECTION_NM',
MSG_INTERVIEW.INVESTIGATION_FORM_CD
from MSG_INTERVIEW 
LEFT JOIN NBS_ODS.NBS_ANSWER 
ON  NBS_ANSWER.ACT_UID =MSG_INTERVIEW.INTERVIEW_UID
INNER JOIN NBS_ODS.NBS_UI_METADATA 
ON NBS_UI_METADATA.NBS_QUESTION_UID=NBS_ANSWER.NBS_QUESTION_UID
LEFT OUTER JOIN (SELECT DISTINCT INVESTIGATION_FORM_CD, QUESTION_LABEL, QUESTION_GROUP_SEQ_NBR FROM NBS_ODS.NBS_UI_METADATA WHERE QUESTION_GROUP_SEQ_NBR IS NOT NULL AND NBS_UI_COMPONENT_UID=1016) AS D ON 
NBS_UI_METADATA.INVESTIGATION_FORM_CD = D.INVESTIGATION_FORM_CD AND NBS_UI_METADATA.QUESTION_GROUP_SEQ_NBR = D.QUESTION_GROUP_SEQ_NBR
ORDER BY MSG_CONTAINER_UID;
QUIT;
  %ADDNONCASECODINGSYSTEM(INTERVIEW_ANSWER, INTERVIEW_ANSWER);
%DBLOAD(MSG_ANSWER, INTERVIEW_ANSWER);

PROC SQL;
CREATE TABLE PROVIDER_BASE AS 
SELECT 
DISTINCT MSG_CONTAINER_UID,PERSON.PERSON_UID AS PROVIDER_UID 'PROVIDER_UID',
PERSON.LOCAL_ID LENGTH=100 format=$100. AS PRV_LOCAL_ID 'PRV_LOCAL_ID',              
PERSON.DESCRIPTION LENGTH=100 format=$100. AS PRV_COMMENT_TXT 'PRV_COMMENT_TXT',      
PERSON.LAST_CHG_TIME AS PRV_EFFECTIVE_TIME 'PRV_EFFECTIVE_TIME',
PERSON.LAST_CHG_USER_ID,
PERSON.LOCAL_ID
FROM NBS_ODS.PERSON INNER JOIN
NOTIFICATION_ENTITY_MAP ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID =PERSON.PERSON_UID
where PERSON.CD= 'PRV';
QUIT;
%AUTHDATA(PROVIDER_BASE, PROVIDER_BASE, PRV_AUTHOR_ID);
PROC SQL;
CREATE TABLE PROVIDER_NAME AS 
SELECT PROVIDER_BASE.*,
FIRST_NM LENGTH=100 format=$100. AS PRV_NAME_FIRST_TXT 'PRV_NAME_FIRST_TXT',
LAST_NM LENGTH=100 format=$100. AS PRV_NAME_LAST_TXT 'PRV_NAME_LAST_TXT',
MIDDLE_NM LENGTH=100 format=$100. AS PRV_NAME_MIDDLE_TXT 'PRV_NAME_MIDDLE_TXT',
NM_SUFFIX LENGTH=100 format=$100. AS PRV_NAME_SUFFIX_CD 'PRV_NAME_SUFFIX_CD',
NM_PREFIX LENGTH=100 format=$100. AS PRV_NAME_PREFIX_CD 'PRV_NAME_PREFIX_CD',
NM_DEGREE LENGTH=100 format=$100. AS PRV_NAME_DEGREE_CD 'PRV_NAME_DEGREE_CD', 
PERSON_NAME.PERSON_UID AS  PROVIDER_UID ' PROVIDER_UID' 
FROM  PROVIDER_BASE INNER JOIN NBS_ODS.PERSON_NAME
ON PROVIDER_BASE.PROVIDER_UID=PERSON_NAME.PERSON_UID
WHERE NM_USE_CD ='L' ORDER BY PERSON_NAME.PERSON_UID, NM_USE_CD;
QUIT;

PROC SQL;
CREATE TABLE POSTAL_LOCATOR AS
SELECT DISTINCT
POSTAL_LOCATOR.CITY_DESC_TXT AS PRV_ADDR_CITY_TXT 'PRV_ADDR_CITY_TXT',             
POSTAL_LOCATOR.CNTRY_CD	LENGTH=100 format=$100. AS PRV_ADDR_COUNTRY_CD 'PRV_ADDR_COUNTRY_CD',            
POSTAL_LOCATOR.CNTY_CD	LENGTH=100 format=$100. AS PRV_ADDR_COUNTY_CD 'PRV_ADDR_COUNTY_CD',              
POSTAL_LOCATOR.STATE_CD	LENGTH=100 format=$100. AS PRV_ADDR_STATE_CD 'PRV_ADDR_STATE_CD',               
POSTAL_LOCATOR.STREET_ADDR1 LENGTH=100 format=$100. AS PRV_ADDR_STREET_ADDR1_TXT 'PRV_ADDR_STREET_ADDR1_TXT',
POSTAL_LOCATOR.STREET_ADDR2	LENGTH=100 format=$100. AS PRV_ADDR_STREET_ADDR2_TXT 'PRV_ADDR_STREET_ADDR2_TXT',
POSTAL_LOCATOR.ZIP_CD LENGTH=10 format=$10. AS PRV_ADDR_ZIP_CODE_TXT 'PRV_ADDR_ZIP_CODE_TXT',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT LENGTH=100 format=$100. AS PRV_ADDR_COMMENT_TXT 'PRV_ADDR_COMMENT_TXT',
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
FROM PROVIDER_BASE 
LEFT OUTER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON PROVIDER_BASE.PROVIDER_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
AND ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='O'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='PST'
LEFT OUTER JOIN NBS_ODS.POSTAL_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=POSTAL_LOCATOR.POSTAL_LOCATOR_UID;
QUIT;
PROC SORT DATA=POSTAL_LOCATOR NODUPKEY; BY ENTITY_UID; RUN;
PROC SQL;
CREATE TABLE TELE_LOCATOR_OFFICE AS
SELECT DISTINCT
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID,
TELE_LOCATOR.EXTENSION_TXT,        
TELE_LOCATOR.PHONE_NBR_TXT LENGTH=12 format=$12. AS PRV_PHONE_NBR_TXT 'PRV_PHONE_NBR_TXT', 
TELE_LOCATOR.EMAIL_ADDRESS AS PRV_EMAIL_ADDRESS_TXT 'PRV_EMAIL_ADDRESS_TXT',
TELE_LOCATOR.CNTRY_CD LENGTH=100 format=$100. AS PRV_PHONE_COUNTRY_CODE_TXT 'PRV_PHONE_COUNTRY_CODE_TXT',    
TELE_LOCATOR.URL_ADDRESS AS PRV_URL_ADDRESS_TXT 'PRV_URL_ADDRESS_TXT',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT LENGTH=100 format=$100. AS PRV_PHONE_COMMENT_TXT 'PRV_PHONE_COMMENT_TXT'
FROM PROVIDER_BASE LEFT OUTER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON PROVIDER_BASE.PROVIDER_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
AND ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='PH'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
LEFT OUTER JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID;
QUIT;
data TELE_LOCATOR_OFFICE;
set TELE_LOCATOR_OFFICE;
   PRV_PHONE_EXTENSION_TXT  = input(EXTENSION_TXT, 8.);
run;
PROC SORT DATA=TELE_LOCATOR_OFFICE NODUPKEY; BY ENTITY_UID; RUN;
PROC SQL;
CREATE TABLE LOCATOR AS SELECT POSTAL_LOCATOR.*,TELE_LOCATOR_OFFICE.*,  PROVIDER_BASE.PROVIDER_UID
FROM PROVIDER_BASE LEFT OUTER JOIN  TELE_LOCATOR_OFFICE ON
PROVIDER_BASE.PROVIDER_UID=TELE_LOCATOR_OFFICE.ENTITY_UID
LEFT OUTER JOIN  POSTAL_LOCATOR ON
PROVIDER_BASE.PROVIDER_UID=POSTAL_LOCATOR.ENTITY_UID;
QUIT;
PROC SORT DATA=LOCATOR NODUPKEY; BY PROVIDER_UID; RUN;
PROC DATASETS LIBRARY = WORK NOLIST;DELETE POSTAL_LOCATOR TELE_LOCATOR_OFFICE ;RUN;QUIT;
PROC SQL;
CREATE TABLE QEC_ENTITY_ID AS SELECT DISTINCT PROVIDER_UID, 
ROOT_EXTENSION_TXT AS PRV_ID_QUICK_CODE_TXT 'PRV_ID_QUICK_CODE_TXT' 
FROM PROVIDER_BASE LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON PROVIDER_BASE.PROVIDER_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'QEC';
QUIT;
PROC SORT DATA=QEC_ENTITY_ID NODUPKEY; BY PROVIDER_UID; RUN;
PROC SQL;
CREATE TABLE PRN_ENTITY_ID AS SELECT DISTINCT PROVIDER_UID, 
ROOT_EXTENSION_TXT AS PRV_ID_NBR_TXT 'PRV_ID_NBR_TXT'
FROM PROVIDER_BASE LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON PROVIDER_BASE.PROVIDER_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'PRN';
QUIT;
PROC SORT DATA=PRN_ENTITY_ID NODUPKEY; BY PROVIDER_UID; RUN;
PROC SQL;
CREATE TABLE NPI_ENTITY_ID AS SELECT DISTINCT PROVIDER_UID, 
ROOT_EXTENSION_TXT AS PRV_ID_NPI_TXT 'PRV_ID_NPI_TXT'  
FROM PROVIDER_BASE LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON PROVIDER_BASE.PROVIDER_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'NPI';
QUIT;
PROC SORT DATA=NPI_ENTITY_ID NODUPKEY; BY PROVIDER_UID; RUN;
PROC SQL;
CREATE TABLE PROVIDR_ROLE_ID
AS
SELECT CD, SUBJECT_ENTITY_UID AS PROVIDER_UID 'PROVIDER_UID' FROM NBS_ODS.ROLE WHERE SUBJECT_ENTITY_UID IN 
( SELECT PROVIDER_UID FROM PROVIDER_BASE) ORDER BY SUBJECT_ENTITY_UID;
QUIT;
DATA PROVIDR_ROLE_ID;
SET PROVIDR_ROLE_ID;
	LENGTH  PRV_ROLE_CD $100;
	DO UNTIL(LAST.PROVIDER_UID);
		SET PROVIDR_ROLE_ID;
		BY PROVIDER_UID NOTSORTED;
	IF(LENGTHN(COMPRESS(CD))> 0) AND (LENGTHN(COMPRESS(PRV_ROLE_CD))= 0) 
		THEN PRV_ROLE_CD= COMPRESS(CD);
	ELSE IF(LENGTHN((CD))> 0) AND (LENGTHN((PRV_ROLE_CD))> 0) 
		THEN PRV_ROLE_CD= COMPRESS(CD|| '|' || PRV_ROLE_CD );
	END;
 DROP CD;
RUN;
PROC SQL;
PROC SORT DATA=PROVIDR_ROLE_ID NODUPKEY; BY PROVIDER_UID; RUN;
PROC SQL;
CREATE TABLE MSG_PROVIDER AS SELECT PROVIDER_NAME.*, LOCATOR.*,
QEC_ENTITY_ID.PRV_ID_QUICK_CODE_TXT,
NPI_ENTITY_ID.PRV_ID_NPI_TXT,
PRN_ENTITY_ID.PRV_ID_NBR_TXT, PROVIDR_ROLE_ID.PRV_ROLE_CD
FROM PROVIDER_NAME LEFT OUTER JOIN  LOCATOR 
ON PROVIDER_NAME.PROVIDER_UID=LOCATOR.PROVIDER_UID
LEFT OUTER JOIN QEC_ENTITY_ID
ON  PROVIDER_NAME.PROVIDER_UID= QEC_ENTITY_ID.PROVIDER_UID
LEFT OUTER JOIN PRN_ENTITY_ID
ON  PROVIDER_NAME.PROVIDER_UID= PRN_ENTITY_ID.PROVIDER_UID
LEFT OUTER JOIN NPI_ENTITY_ID
ON  PROVIDER_NAME.PROVIDER_UID= NPI_ENTITY_ID.PROVIDER_UID
LEFT OUTER JOIN PROVIDR_ROLE_ID
ON  PROVIDER_NAME.PROVIDER_UID= PROVIDR_ROLE_ID.PROVIDER_UID 
ORDER BY PRV_LOCAL_ID;
QUIT;
PROC SORT DATA=MSG_PROVIDER NODUPKEY; BY MSG_CONTAINER_UID PROVIDER_UID; RUN;

PROC DATASETS 
LIBRARY = WORK NOLIST; DELETE PROVIDR_ROLE_ID PRN_ENTITY_ID PROVIDER_NAME QEC_ENTITY_ID NPI_ENTITY_ID LOCATOR POSTAL_LOCATOR TELE_LOCATOR_OFFICE PROVIDER_BASE MSG_PROVIDER_E; 
	RUN;
QUIT;

PROC SQL;
CREATE TABLE ORGANIZATION_INIT AS 
SELECT DISTINCT
NOTIFICATION_ENTITY_MAP.MSG_CONTAINER_UID,
ORGANIZATION.ORGANIZATION_UID AS ORGANIZATION_UID 'ORGANIZATION_UID',
ORGANIZATION.LOCAL_ID AS ORG_LOCAL_ID 'ORG_LOCAL_ID',              
ORGANIZATION.DESCRIPTION AS ORG_COMMENT_TXT 'ORG_COMMENT_TXT',
ORGANIZATION.LAST_CHG_TIME AS ORG_EFFECTIVE_TIME 'ORG_EFFECTIVE_TIME',
ORGANIZATION.LAST_CHG_USER_ID,
NAICS_INDUSTRY_CODE.CODE_SHORT_DESC_TXT AS ORG_CLASS_CD 'ORG_CLASS_CD'
FROM NOTIFICATION_ENTITY_MAP INNER JOIN NBS_ODS.ORGANIZATION
ON NOTIFICATION_ENTITY_MAP.SUBJECT_ENTITY_UID = ORGANIZATION.ORGANIZATION_UID 
LEFT OUTER JOIN NBS_SRT.NAICS_INDUSTRY_CODE NAICS
ON  NAICS_INDUSTRY_CODE.CODE=ORGANIZATION.STANDARD_INDUSTRY_CLASS_CD ;
QUIT;
%AUTHDATA(ORGANIZATION_INIT, ORGANIZATION_INIT, ORG_AUTHOR_ID);

PROC SQL;
CREATE TABLE ORGANIZATION_NAME AS SELECT DISTINCT ORGANIZATION_INIT.*, 
ORGANIZATION_NAME.NM_TXT AS ORG_NAME_TXT 'ORG_NAME_TXT',
ORGANIZATION_NAME.ORGANIZATION_UID AS  ORGANIZATION_UID ' ORGANIZATION_UID' 
FROM  ORGANIZATION_INIT INNER JOIN NBS_ODS.ORGANIZATION_NAME
ON ORGANIZATION_INIT.ORGANIZATION_UID=ORGANIZATION_NAME.ORGANIZATION_UID
ORDER BY ORGANIZATION_NAME.ORGANIZATION_UID;
QUIT;
PROC DATASETS 
LIBRARY = WORK NOLIST; DELETE ORGANIZATION_INIT; 
	RUN;
QUIT;
PROC SQL;
CREATE TABLE POSTAL_LOCATOR AS
SELECT DISTINCT ORGANIZATION_NAME.*,
POSTAL_LOCATOR.CITY_DESC_TXT AS ORG_ADDR_CITY_TXT 'ORG_ADDR_CITY_TXT',             
POSTAL_LOCATOR.CNTRY_CD	AS ORG_ADDR_COUNTRY_CD 'ORG_ADDR_COUNTRY_CD',            
POSTAL_LOCATOR.CNTY_CD	AS ORG_ADDR_COUNTY_CD 'ORG_ADDR_COUNTY_CD',              
POSTAL_LOCATOR.STATE_CD	AS ORG_ADDR_STATE_CD 'ORG_ADDR_STATE_CD',               
POSTAL_LOCATOR.STREET_ADDR1 AS ORG_ADDR_STREET_ADDR1_TXT 'ORG_ADDR_STREET_ADDR1_TXT',
POSTAL_LOCATOR.STREET_ADDR2	AS ORG_ADDR_STREET_ADDR2_TXT 'ORG_ADDR_STREET_ADDR2_TXT',
POSTAL_LOCATOR.ZIP_CD AS ORG_ADDR_ZIP_CODE_TXT 'ORG_ADDR_ZIP_CODE_TXT',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS ORG_ADDR_COMMENT_TXT 'ORG_ADDR_COMMENT_TXT',
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
FROM ORGANIZATION_NAME LEFT OUTER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON ORGANIZATION_NAME.ORGANIZATION_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
AND ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='O'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='PST'
LEFT OUTER JOIN NBS_ODS.POSTAL_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=POSTAL_LOCATOR.POSTAL_LOCATOR_UID;
QUIT;
PROC DATASETS 
LIBRARY = WORK NOLIST; DELETE ORGANIZATION_NAME; 
	RUN;
QUIT;
PROC SQL;
CREATE TABLE TELE_POSTER_OFFICE AS
SELECT DISTINCT POSTAL_LOCATOR.*,
ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID,
TELE_LOCATOR.EXTENSION_TXT,        
TELE_LOCATOR.PHONE_NBR_TXT AS ORG_PHONE_NBR_TXT 'ORG_PHONE_NBR_TXT', 
TELE_LOCATOR.CNTRY_CD AS ORG_PHONE_COUNTRY_CODE_TXT 'ORG_PHONE_COUNTRY_CODE_TXT',
TELE_LOCATOR.EMAIL_ADDRESS AS ORG_EMAIL_ADDRESS_TXT 'ORG_EMAIL_ADDRESS_TXT',
TELE_LOCATOR.URL_ADDRESS AS ORG_URL_ADDRESS_TXT 'ORG_URL_ADDRESS_TXT',
ENTITY_LOCATOR_PARTICIPATION.LOCATOR_DESC_TXT AS ORG_PHONE_COMMENT_TXT 'ORG_PHONE_COMMENT_TXT'
FROM POSTAL_LOCATOR LEFT OUTER JOIN NBS_ODS.ENTITY_LOCATOR_PARTICIPATION
ON POSTAL_LOCATOR.ORGANIZATION_UID= ENTITY_LOCATOR_PARTICIPATION.ENTITY_UID
AND ENTITY_LOCATOR_PARTICIPATION.USE_CD='WP'
AND ENTITY_LOCATOR_PARTICIPATION.CD='PH'
AND ENTITY_LOCATOR_PARTICIPATION.CLASS_CD='TELE'
LEFT OUTER JOIN NBS_ODS.TELE_LOCATOR 
ON ENTITY_LOCATOR_PARTICIPATION.LOCATOR_UID=TELE_LOCATOR.TELE_LOCATOR_UID;
QUIT;
data TELE_POSTER_OFFICE;
set TELE_POSTER_OFFICE;
   ORG_PHONE_EXTENSION_TXT  = input(EXTENSION_TXT, 8.);
run;
PROC SQL;
CREATE TABLE ORG_QEC AS SELECT DISTINCT TELE_POSTER_OFFICE.*, ORGANIZATION_UID, ROOT_EXTENSION_TXT AS ORG_ID_QUICK_CODE_TXT 'ORG_ID_QUICK_CODE_TXT'
FROM TELE_POSTER_OFFICE LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON TELE_POSTER_OFFICE.ORGANIZATION_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'QEC';
QUIT;
PROC SQL;
CREATE TABLE ORG_R
AS
SELECT CD, SUBJECT_ENTITY_UID AS ORGANIZATION_UID 'ORGANIZATION_UID' FROM NBS_ODS.ROLE WHERE SUBJECT_ENTITY_UID IN 
( SELECT ORGANIZATION_UID FROM ORG_QEC) ORDER BY SUBJECT_ENTITY_UID;
QUIT;
DATA ORG_R;
SET ORG_R;
	LENGTH  ORG_ROLE_CD $100;
	DO UNTIL(LAST.ORGANIZATION_UID);
		SET ORG_R;
		BY ORGANIZATION_UID NOTSORTED;
	IF(LENGTHN(COMPRESS(CD))> 0) AND (LENGTHN(COMPRESS(ORG_ROLE_CD))= 0) 
		THEN ORG_ROLE_CD= COMPRESS(CD);
	ELSE IF(LENGTHN((CD))> 0) AND (LENGTHN((ORG_ROLE_CD))> 0) 
		THEN ORG_ROLE_CD= COMPRESS(CD|| '|' || ORG_ROLE_CD );
	END;
 DROP CD;
RUN;
PROC SQL;
CREATE TABLE ORG_ROLE_ID AS SELECT DISTINCT ORG_QEC.ORGANIZATION_UID, 
ORG_ROLE_CD, ORG_QEC.*
FROM ORG_QEC LEFT OUTER JOIN ORG_R
ON ORG_QEC.ORGANIZATION_UID=ORG_R.ORGANIZATION_UID;
QUIT;
PROC SQL;
CREATE TABLE ORG_CLIA_ID AS SELECT DISTINCT ORGANIZATION_UID, ROOT_EXTENSION_TXT AS ORG_ID_CLIA_NBR_TXT 'ORG_ID_CLIA_NBR_TXT', ORG_ROLE_ID.*  
FROM ORG_ROLE_ID LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON ORG_ROLE_ID.ORGANIZATION_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'CLIA';
QUIT;
PROC SQL;
CREATE TABLE MSG_ORGANIZATION AS SELECT DISTINCT ORGANIZATION_UID, ROOT_EXTENSION_TXT AS ORG_ID_FACILITY_IDENTIFIER_TXT 'ORG_ID_FACILITY_IDENTIFIER_TXT', ORG_CLIA_ID.*
FROM ORG_CLIA_ID LEFT OUTER JOIN NBS_ODS.ENTITY_ID
ON ORG_CLIA_ID.ORGANIZATION_UID=ENTITY_ID.ENTITY_UID
AND ENTITY_ID.TYPE_CD = 'FI'
ORDER BY ORG_LOCAL_ID;
QUIT;
PROC SORT DATA=MSG_ORGANIZATION NODUPKEY; BY MSG_CONTAINER_UID ORGANIZATION_UID; RUN;
PROC SQL;
UPDATE NBS_ODS.PUBLIC_HEALTH_CASE SET 
jurisdiction_cd='999999', 
program_jurisdiction_oid=((select nbs_uid from nbs_srt.jurisdiction_code 
	   where code='999999')*100000+
		(select nbs_uid from nbs_srt.program_area_code  
where prog_area_cd=PUBLIC_HEALTH_CASE.prog_area_cd))
 where PUBLIC_HEALTH_CASE.local_id 
IN (SELECT LOCAL_ID FROM NOTIFICATION_CASE_MAP WHERE NOTIFICATION_CD= ('EXP_NOTF_PHDC'));
QUIT;
PROC SQL;
UPDATE NBS_ODS.NOTIFICATION SET 
jurisdiction_cd='999999', 
program_jurisdiction_oid=((select nbs_uid from nbs_srt.jurisdiction_code 
	   where code='999999')*100000+
		(select nbs_uid from nbs_srt.program_area_code  
where prog_area_cd=Notification.prog_area_cd))
 where Notification.NOTIFICATION_UID 
IN (SELECT NOTIFICATION_UID FROM NOTIFICATION_CASE_MAP WHERE NOTIFICATION_CD=('EXP_NOTF_PHDC'));
QUIT;
%DBLOAD (MSG_PROVIDER, MSG_PROVIDER);
%DBLOAD (MSG_INTERVIEW, MSG_INTERVIEW);
%DBLOAD (MSG_ORGANIZATION, MSG_ORGANIZATION);
%DBLOAD (MSG_TREATMENT, MSG_TREATMENT);
%DBLOAD (MSG_PATIENT, MSG_PATIENT);
%DBLOAD (MSG_CASE_INVESTIGATION, MSG_CASE_INVESTIGATION);
