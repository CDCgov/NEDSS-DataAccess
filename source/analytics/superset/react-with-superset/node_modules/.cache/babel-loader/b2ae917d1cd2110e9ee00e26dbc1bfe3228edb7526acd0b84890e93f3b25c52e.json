{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.embedDashboard = embedDashboard;\nvar _const = require(\"./const\");\nvar _switchboard = require(\"@superset-ui/switchboard\");\nvar _guestTokenRefresh = require(\"./guestTokenRefresh\");\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// We can swap this out for the actual switchboard package once it gets published\n\n/**\n * Embeds a Superset dashboard into the page using an iframe.\n */\nasync function embedDashboard(_ref) {\n  let {\n    id,\n    supersetDomain,\n    mountPoint,\n    fetchGuestToken,\n    dashboardUiConfig,\n    debug = false\n  } = _ref;\n  function log() {\n    if (debug) {\n      for (var _len = arguments.length, info = new Array(_len), _key = 0; _key < _len; _key++) {\n        info[_key] = arguments[_key];\n      }\n      console.debug(`[superset-embedded-sdk][dashboard ${id}]`, ...info);\n    }\n  }\n  log('embedding');\n  function calculateConfig() {\n    let configNumber = 0;\n    if (dashboardUiConfig) {\n      if (dashboardUiConfig.hideTitle) {\n        configNumber += 1;\n      }\n      if (dashboardUiConfig.hideTab) {\n        configNumber += 2;\n      }\n      if (dashboardUiConfig.hideChartControls) {\n        configNumber += 8;\n      }\n    }\n    return configNumber;\n  }\n  async function mountIframe() {\n    return new Promise(resolve => {\n      const iframe = document.createElement('iframe');\n      const dashboardConfig = dashboardUiConfig ? `?uiConfig=${calculateConfig()}` : \"\";\n      const filterConfig = dashboardUiConfig?.filters || {};\n      const filterConfigKeys = Object.keys(filterConfig);\n      const filterConfigUrlParams = filterConfigKeys.length > 0 ? \"&\" + filterConfigKeys.map(key => _const.DASHBOARD_UI_FILTER_CONFIG_URL_PARAM_KEY[key] + '=' + filterConfig[key]).join('&') : \"\"; // set up the iframe's sandbox configuration\n\n      iframe.sandbox.add(\"allow-same-origin\"); // needed for postMessage to work\n\n      iframe.sandbox.add(\"allow-scripts\"); // obviously the iframe needs scripts\n\n      iframe.sandbox.add(\"allow-presentation\"); // for fullscreen charts\n\n      iframe.sandbox.add(\"allow-downloads\"); // for downloading charts as image\n\n      iframe.sandbox.add(\"allow-forms\"); // for forms to submit\n\n      iframe.sandbox.add(\"allow-popups\"); // for exporting charts as csv\n      // add these if it turns out we need them:\n      // iframe.sandbox.add(\"allow-top-navigation\");\n      // add the event listener before setting src, to be 100% sure that we capture the load event\n\n      iframe.addEventListener('load', () => {\n        // MessageChannel allows us to send and receive messages smoothly between our window and the iframe\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API\n        const commsChannel = new MessageChannel();\n        const ourPort = commsChannel.port1;\n        const theirPort = commsChannel.port2; // Send one of the message channel ports to the iframe to initialize embedded comms\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n        // we know the content window isn't null because we are in the load event handler.\n\n        iframe.contentWindow.postMessage({\n          type: _const.IFRAME_COMMS_MESSAGE_TYPE,\n          handshake: \"port transfer\"\n        }, supersetDomain, [theirPort]);\n        log('sent message channel to the iframe'); // return our port from the promise\n\n        resolve(new _switchboard.Switchboard({\n          port: ourPort,\n          name: 'superset-embedded-sdk',\n          debug\n        }));\n      });\n      iframe.src = `${supersetDomain}/embedded/${id}${dashboardConfig}${filterConfigUrlParams}`; //@ts-ignore\n\n      mountPoint.replaceChildren(iframe);\n      log('placed the iframe');\n    });\n  }\n  const [guestToken, ourPort] = await Promise.all([fetchGuestToken(), mountIframe()]);\n  ourPort.emit('guestToken', {\n    guestToken\n  });\n  log('sent guest token');\n  async function refreshGuestToken() {\n    const newGuestToken = await fetchGuestToken();\n    ourPort.emit('guestToken', {\n      guestToken: newGuestToken\n    });\n    setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(newGuestToken));\n  }\n  setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(guestToken));\n  function unmount() {\n    log('unmounting'); //@ts-ignore\n\n    mountPoint.replaceChildren();\n  }\n  const getScrollSize = () => ourPort.get('getScrollSize');\n  const getDashboardPermalink = anchor => ourPort.get('getDashboardPermalink', {\n    anchor\n  });\n  const getActiveTabs = () => ourPort.get('getActiveTabs');\n  return {\n    getScrollSize,\n    unmount,\n    getDashboardPermalink,\n    getActiveTabs\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","embedDashboard","_const","require","_switchboard","_guestTokenRefresh","_ref","id","supersetDomain","mountPoint","fetchGuestToken","dashboardUiConfig","debug","log","_len","arguments","length","info","Array","_key","console","calculateConfig","configNumber","hideTitle","hideTab","hideChartControls","mountIframe","Promise","resolve","iframe","document","createElement","dashboardConfig","filterConfig","filters","filterConfigKeys","keys","filterConfigUrlParams","map","key","DASHBOARD_UI_FILTER_CONFIG_URL_PARAM_KEY","join","sandbox","add","addEventListener","commsChannel","MessageChannel","ourPort","port1","theirPort","port2","contentWindow","postMessage","type","IFRAME_COMMS_MESSAGE_TYPE","handshake","Switchboard","port","name","src","replaceChildren","guestToken","all","emit","refreshGuestToken","newGuestToken","setTimeout","getGuestTokenRefreshTiming","unmount","getScrollSize","get","getDashboardPermalink","anchor","getActiveTabs"],"sources":["/Users/UpasanaPattnaik/react-with-superset/node_modules/@superset-ui/embedded-sdk/lib/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.embedDashboard = embedDashboard;\n\nvar _const = require(\"./const\");\n\nvar _switchboard = require(\"@superset-ui/switchboard\");\n\nvar _guestTokenRefresh = require(\"./guestTokenRefresh\");\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// We can swap this out for the actual switchboard package once it gets published\n\n/**\n * Embeds a Superset dashboard into the page using an iframe.\n */\nasync function embedDashboard(_ref) {\n  let {\n    id,\n    supersetDomain,\n    mountPoint,\n    fetchGuestToken,\n    dashboardUiConfig,\n    debug = false\n  } = _ref;\n\n  function log() {\n    if (debug) {\n      for (var _len = arguments.length, info = new Array(_len), _key = 0; _key < _len; _key++) {\n        info[_key] = arguments[_key];\n      }\n\n      console.debug(`[superset-embedded-sdk][dashboard ${id}]`, ...info);\n    }\n  }\n\n  log('embedding');\n\n  function calculateConfig() {\n    let configNumber = 0;\n\n    if (dashboardUiConfig) {\n      if (dashboardUiConfig.hideTitle) {\n        configNumber += 1;\n      }\n\n      if (dashboardUiConfig.hideTab) {\n        configNumber += 2;\n      }\n\n      if (dashboardUiConfig.hideChartControls) {\n        configNumber += 8;\n      }\n    }\n\n    return configNumber;\n  }\n\n  async function mountIframe() {\n    return new Promise(resolve => {\n      const iframe = document.createElement('iframe');\n      const dashboardConfig = dashboardUiConfig ? `?uiConfig=${calculateConfig()}` : \"\";\n      const filterConfig = dashboardUiConfig?.filters || {};\n      const filterConfigKeys = Object.keys(filterConfig);\n      const filterConfigUrlParams = filterConfigKeys.length > 0 ? \"&\" + filterConfigKeys.map(key => _const.DASHBOARD_UI_FILTER_CONFIG_URL_PARAM_KEY[key] + '=' + filterConfig[key]).join('&') : \"\"; // set up the iframe's sandbox configuration\n\n      iframe.sandbox.add(\"allow-same-origin\"); // needed for postMessage to work\n\n      iframe.sandbox.add(\"allow-scripts\"); // obviously the iframe needs scripts\n\n      iframe.sandbox.add(\"allow-presentation\"); // for fullscreen charts\n\n      iframe.sandbox.add(\"allow-downloads\"); // for downloading charts as image\n\n      iframe.sandbox.add(\"allow-forms\"); // for forms to submit\n\n      iframe.sandbox.add(\"allow-popups\"); // for exporting charts as csv\n      // add these if it turns out we need them:\n      // iframe.sandbox.add(\"allow-top-navigation\");\n      // add the event listener before setting src, to be 100% sure that we capture the load event\n\n      iframe.addEventListener('load', () => {\n        // MessageChannel allows us to send and receive messages smoothly between our window and the iframe\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API\n        const commsChannel = new MessageChannel();\n        const ourPort = commsChannel.port1;\n        const theirPort = commsChannel.port2; // Send one of the message channel ports to the iframe to initialize embedded comms\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n        // we know the content window isn't null because we are in the load event handler.\n\n        iframe.contentWindow.postMessage({\n          type: _const.IFRAME_COMMS_MESSAGE_TYPE,\n          handshake: \"port transfer\"\n        }, supersetDomain, [theirPort]);\n        log('sent message channel to the iframe'); // return our port from the promise\n\n        resolve(new _switchboard.Switchboard({\n          port: ourPort,\n          name: 'superset-embedded-sdk',\n          debug\n        }));\n      });\n      iframe.src = `${supersetDomain}/embedded/${id}${dashboardConfig}${filterConfigUrlParams}`; //@ts-ignore\n\n      mountPoint.replaceChildren(iframe);\n      log('placed the iframe');\n    });\n  }\n\n  const [guestToken, ourPort] = await Promise.all([fetchGuestToken(), mountIframe()]);\n  ourPort.emit('guestToken', {\n    guestToken\n  });\n  log('sent guest token');\n\n  async function refreshGuestToken() {\n    const newGuestToken = await fetchGuestToken();\n    ourPort.emit('guestToken', {\n      guestToken: newGuestToken\n    });\n    setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(newGuestToken));\n  }\n\n  setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(guestToken));\n\n  function unmount() {\n    log('unmounting'); //@ts-ignore\n\n    mountPoint.replaceChildren();\n  }\n\n  const getScrollSize = () => ourPort.get('getScrollSize');\n\n  const getDashboardPermalink = anchor => ourPort.get('getDashboardPermalink', {\n    anchor\n  });\n\n  const getActiveTabs = () => ourPort.get('getActiveTabs');\n\n  return {\n    getScrollSize,\n    unmount,\n    getDashboardPermalink,\n    getActiveTabs\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}